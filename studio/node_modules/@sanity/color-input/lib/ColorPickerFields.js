"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ColorPickerFields = void 0;
var _react = _interopRequireDefault(require("react"));
var color = _interopRequireWildcard(require("react-color/lib/helpers/color"));
var _common = require("react-color/lib/components/common");
var _ui = require("@sanity/ui");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var ColorPickerFields = _ref => {
  var onChange = _ref.onChange,
    rgb = _ref.rgb,
    hsl = _ref.hsl,
    hex = _ref.hex,
    disableAlpha = _ref.disableAlpha;
  var _useTheme = (0, _ui.useTheme)(),
    sanity = _useTheme.sanity;
  var inputStyles = {
    input: {
      width: '80%',
      padding: '4px 10% 3px',
      border: 'none',
      boxShadow: "inset 0 0 0 1px ".concat(sanity.color.input.default.enabled.border),
      color: sanity.color.input.default.enabled.fg,
      backgroundColor: sanity.color.input.default.enabled.bg,
      fontSize: sanity.fonts.text.sizes[0].fontSize,
      textAlign: 'center'
    },
    label: {
      display: 'block',
      textAlign: 'center',
      fontSize: sanity.fonts.label.sizes[0].fontSize,
      color: sanity.color.base.fg,
      paddingTop: '3px',
      paddingBottom: '4px',
      textTransform: 'capitalize'
    }
  };
  var handleChange = (data, e) => {
    if (data.hex && color.isValidHex(data.hex)) {
      onChange({
        hex: data.hex,
        source: 'hex'
      }, e);
    } else if (data.r || data.g || data.b) {
      onChange({
        r: data.r || rgb.r,
        g: data.g || rgb.g,
        b: data.b || rgb.b,
        a: rgb.a,
        source: 'rgb'
      }, e);
    } else if (data.a) {
      if (data.a < 0) {
        data.a = 0;
      } else if (data.a > 100) {
        data.a = 100;
      }
      data.a /= 100;
      onChange({
        h: hsl.h,
        s: hsl.s,
        l: hsl.l,
        a: data.a,
        source: 'rgb'
      }, e);
    }
  };
  return /*#__PURE__*/_react.default.createElement(_ui.Flex, null, /*#__PURE__*/_react.default.createElement(_ui.Box, {
    flex: 2,
    marginRight: 1
  }, /*#__PURE__*/_react.default.createElement(_common.EditableInput, {
    style: inputStyles,
    label: "hex",
    value: hex.replace('#', ''),
    onChange: handleChange
  })), /*#__PURE__*/_react.default.createElement(_ui.Box, {
    flex: 1,
    marginRight: 1
  }, /*#__PURE__*/_react.default.createElement(_common.EditableInput, {
    style: inputStyles,
    label: "r",
    value: rgb.r,
    onChange: handleChange,
    dragLabel: "true",
    dragMax: "255"
  })), /*#__PURE__*/_react.default.createElement(_ui.Box, {
    flex: 1,
    marginRight: 1
  }, /*#__PURE__*/_react.default.createElement(_common.EditableInput, {
    style: inputStyles,
    label: "g",
    value: rgb.g,
    onChange: handleChange,
    dragLabel: "true",
    dragMax: "255"
  })), /*#__PURE__*/_react.default.createElement(_ui.Box, {
    flex: 1,
    marginRight: 1
  }, /*#__PURE__*/_react.default.createElement(_common.EditableInput, {
    style: inputStyles,
    label: "b",
    value: rgb.b,
    onChange: handleChange,
    dragLabel: "true",
    dragMax: "255"
  })), !disableAlpha && /*#__PURE__*/_react.default.createElement(_ui.Box, {
    flex: 1
  }, /*#__PURE__*/_react.default.createElement(_common.EditableInput, {
    style: inputStyles,
    label: "a",
    value: Math.round(rgb.a * 100),
    onChange: handleChange,
    dragLabel: "true",
    dragMax: "100"
  })));
};
exports.ColorPickerFields = ColorPickerFields;
var _default = ColorPickerFields;
exports.default = _default;
//# sourceMappingURL=ColorPickerFields.js.map