"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _formBuilder = require("part:@sanity/form-builder");
var _lodash = require("lodash");
var _ui = require("@sanity/ui");
var _icons = require("@sanity/icons");
var _components = require("@sanity/base/components");
var _ColorPicker = _interopRequireDefault(require("./ColorPicker"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
var set = _formBuilder.patches.set,
  unset = _formBuilder.patches.unset,
  setIfMissing = _formBuilder.patches.setIfMissing;
var DEFAULT_COLOR = {
  hex: '#24a3e3',
  hsl: {
    h: 200,
    s: 0.7732,
    l: 0.5156,
    a: 1
  },
  hsv: {
    h: 200,
    s: 0.8414,
    v: 0.8901,
    a: 1
  },
  rgb: {
    r: 46,
    g: 163,
    b: 227,
    a: 1
  },
  source: 'hex'
};
class ColorInput extends _react.PureComponent {
  constructor() {
    super(...arguments);
    _defineProperty(this, "focusRef", /*#__PURE__*/_react.default.createRef());
    _defineProperty(this, "emitSetColor", nextColor => {
      var _this$props = this.props,
        onChange = _this$props.onChange,
        type = _this$props.type;
      var fieldPatches = type.fields.filter(field => field.name in nextColor).map(field => {
        var nextFieldValue = nextColor[field.name];
        var isObject = field.type.jsonType === 'object';
        return set(isObject ? Object.assign({
          _type: field.type.name
        }, nextFieldValue) : nextFieldValue, [field.name]);
      });
      onChange(_formBuilder.PatchEvent.from([setIfMissing({
        _type: type.name
      }), set(type.name, ['_type']), set(nextColor.rgb.a, ['alpha']), ...fieldPatches]));
    });
    _defineProperty(this, "handleColorChange", (0, _lodash.debounce)(this.emitSetColor, 100));
    _defineProperty(this, "handleCreateColor", () => {
      this.emitSetColor(DEFAULT_COLOR);
    });
    _defineProperty(this, "handleUnset", () => {
      this.props.onChange(_formBuilder.PatchEvent.from(unset()));
    });
  }
  focus() {
    // todo: make the ColorPicker component support .focus()
    if (this.focusRef.current && this.focusRef.current.focus) {
      this.focusRef.current.focus();
    }
  }
  render() {
    var _this$props2 = this.props,
      type = _this$props2.type,
      readOnly = _this$props2.readOnly,
      value = _this$props2.value,
      level = _this$props2.level;
    return /*#__PURE__*/_react.default.createElement(_components.FormField, {
      title: type.title,
      description: type.description,
      level: level
    }, value ? /*#__PURE__*/_react.default.createElement(_ColorPicker.default, {
      ref: this.focusRef,
      color: value.hsl || value.hex,
      readOnly: readOnly || type.readOnly,
      onChange: this.handleColorChange,
      disableAlpha: type.options && type.options.disableAlpha,
      onUnset: this.handleUnset
    }) : /*#__PURE__*/_react.default.createElement(_ui.Button, {
      icon: _icons.AddIcon,
      mode: "ghost",
      text: "Create color",
      ref: this.focusRef,
      disabled: Boolean(readOnly),
      onClick: this.handleCreateColor
    }));
  }
}
exports.default = ColorInput;
_defineProperty(ColorInput, "propTypes", {
  type: _propTypes.default.shape({
    name: _propTypes.default.string,
    title: _propTypes.default.string,
    description: _propTypes.default.string,
    fields: _propTypes.default.arrayOf(_propTypes.default.shape({
      name: _propTypes.default.string.isRequired
    }))
  }).isRequired,
  onChange: _propTypes.default.func.isRequired,
  readOnly: _propTypes.default.bool,
  value: _propTypes.default.shape({
    hex: _propTypes.default.string,
    alpha: _propTypes.default.number
  })
});
//# sourceMappingURL=ColorInput.js.map