"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveTypeForDocument = resolveTypeForDocument;
var _Client = require("../parts/Client");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function resolveTypeForDocument(_x) {
  return _resolveTypeForDocument.apply(this, arguments);
}
function _resolveTypeForDocument() {
  _resolveTypeForDocument = _asyncToGenerator(function* (id) {
    var query = '*[_id in [$documentId, $draftId]]._type';
    var documentId = id.replace(/^drafts\./, '');
    var draftId = "drafts.".concat(documentId);
    var types = yield _Client.structureClient.fetch(query, {
      documentId,
      draftId
    }, {
      tag: 'structure.resolve-type'
    });
    return types[0];
  });
  return _resolveTypeForDocument.apply(this, arguments);
}