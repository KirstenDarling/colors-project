{"version":3,"file":"index.js","sources":["../src/utils/schema.ts","../src/utils/getPortableTextMemberSchemaTypes.ts","../src/utils/debug.ts","../src/editor/hooks/usePortableTextEditorKeyGenerator.ts","../src/utils/weakMaps.ts","../../../../node_modules/diff-match-patch/index.js","../src/patch/patches.ts","../src/utils/values.ts","../src/utils/operationToPatches.ts","../src/utils/paths.ts","../src/utils/ranges.ts","../src/editor/plugins/createWithEditableAPI.ts","../src/editor/plugins/createWithMaxBlocks.ts","../src/utils/withPreserveKeys.ts","../src/editor/plugins/createWithObjectKeys.ts","../src/utils/withoutPatching.ts","../src/patch/arrayInsert.ts","../src/patch/array.ts","../src/patch/object.ts","../src/patch/primitive.ts","../src/patch/string.ts","../src/patch/applyPatch.ts","../src/utils/patchToOperations.ts","../src/utils/bufferUntil.ts","../src/editor/plugins/createWithUndoRedo.ts","../src/editor/plugins/createWithPatches.ts","../src/editor/plugins/createWithPlaceholderBlock.ts","../src/editor/plugins/createWithPortableTextBlockStyle.ts","../src/editor/plugins/createWithPortableTextLists.ts","../src/editor/plugins/createWithPortableTextMarkModel.ts","../src/editor/plugins/createWithPortableTextSelections.ts","../src/editor/plugins/createWithSchemaTypes.ts","../src/editor/plugins/createWithUtils.ts","../src/editor/plugins/createWithHotKeys.ts","../src/utils/validateValue.ts","../src/editor/plugins/createWithInsertData.ts","../src/editor/plugins/index.ts","../src/editor/components/SlateContainer.tsx","../src/constants.ts","../src/editor/hooks/usePortableTextEditorSelection.ts","../src/editor/hooks/usePortableTextEditor.ts","../src/editor/hooks/usePortableTextEditorValue.ts","../src/editor/hooks/usePortableTextReadOnly.ts","../src/editor/hooks/useSyncValue.ts","../src/editor/components/Synchronizer.tsx","../src/editor/PortableTextEditor.tsx","../src/utils/patches.ts","../src/utils/selection.ts","../src/editor/nodes/DefaultAnnotation.tsx","../src/editor/components/Leaf.tsx","../src/editor/nodes/DefaultObject.tsx","../src/editor/nodes/index.ts","../src/editor/components/DraggableBlock.tsx","../src/editor/components/Element.tsx","../src/editor/hooks/useForwardedRef.ts","../src/editor/Editable.tsx"],"sourcesContent":["import {Schema} from '@sanity/schema'\n\nexport function compileType(rawType: any) {\n  return Schema.compile({\n    name: 'blockTypeSchema',\n    types: [rawType],\n  }).get(rawType.name)\n}\n","import {\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  PortableTextBlock,\n  SchemaType,\n  SpanSchemaType,\n} from '@sanity/types'\nimport {PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport function getPortableTextMemberSchemaTypes(\n  portableTextType: ArraySchemaType<PortableTextBlock>\n): PortableTextMemberSchemaTypes {\n  if (!portableTextType) {\n    throw new Error(\"Parameter 'portabletextType' missing (required)\")\n  }\n  const blockType = portableTextType.of?.find(findBlockType) as BlockSchemaType | undefined\n  if (!blockType) {\n    throw new Error('Block type is not defined in this schema (required)')\n  }\n  const childrenField = blockType.fields?.find((field) => field.name === 'children') as\n    | {type: ArraySchemaType}\n    | undefined\n  if (!childrenField) {\n    throw new Error('Children field for block type found in schema (required)')\n  }\n  const ofType = childrenField.type.of\n  if (!ofType) {\n    throw new Error('Valid types for block children not found in schema (required)')\n  }\n  const spanType = ofType.find((memberType) => memberType.name === 'span') as\n    | ObjectSchemaType\n    | undefined\n  if (!spanType) {\n    throw new Error('Span type not found in schema (required)')\n  }\n  const inlineObjectTypes = (ofType.filter((memberType) => memberType.name !== 'span') ||\n    []) as ObjectSchemaType[]\n  const blockObjectTypes = (portableTextType.of?.filter((field) => field.name !== blockType.name) ||\n    []) as ObjectSchemaType[]\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: (spanType as SpanSchemaType).annotations,\n  }\n}\n\nfunction resolveEnabledStyles(blockType: ObjectSchemaType) {\n  const styleField = blockType.fields?.find((btField) => btField.name === 'style')\n  if (!styleField) {\n    throw new Error(\"A field with name 'style' is not defined in the block type (required).\")\n  }\n  const textStyles =\n    styleField.type.options?.list &&\n    styleField.type.options.list?.filter((style: {value: string}) => style.value)\n  if (!textStyles || textStyles.length === 0) {\n    throw new Error(\n      'The style fields need at least one style ' +\n        \"defined. I.e: {title: 'Normal', value: 'normal'}.\"\n    )\n  }\n  return textStyles\n}\n\nfunction resolveEnabledDecorators(spanType: ObjectSchemaType) {\n  return (spanType as any).decorators\n}\n\nfunction resolveEnabledListItems(blockType: ObjectSchemaType) {\n  const listField = blockType.fields?.find((btField) => btField.name === 'list')\n  if (!listField) {\n    throw new Error(\"A field with name 'list' is not defined in the block type (required).\")\n  }\n  const listItems =\n    listField.type.options?.list &&\n    listField.type.options.list.filter((list: {value: string}) => list.value)\n  if (!listItems) {\n    throw new Error('The list field need at least to be an empty array')\n  }\n  return listItems\n}\n\nfunction findBlockType(type: SchemaType): BlockSchemaType | null {\n  if (type.type) {\n    return findBlockType(type.type)\n  }\n\n  if (type.name === 'block') {\n    return type as BlockSchemaType\n  }\n\n  return null\n}\n","import debug from 'debug'\n\nconst rootName = 'sanity-pte:'\n\nexport default debug(rootName)\nexport function debugWithName(name: string): debug.Debugger {\n  const namespace = `${rootName}${name}`\n  if (debug && debug.enabled(namespace)) {\n    return debug(namespace)\n  }\n  return debug(rootName)\n}\n","import {randomKey} from '@sanity/util/content'\nimport {createContext, useContext} from 'react'\n\nexport const defaultKeyGenerator = (): string => randomKey(12)\n\n/**\n * A React context for sharing the editor's keyGenerator.\n */\nexport const PortableTextEditorKeyGeneratorContext =\n  createContext<() => string>(defaultKeyGenerator)\n\n/**\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorKeyGenerator = (): (() => string) => {\n  const keyGenerator = useContext(PortableTextEditorKeyGeneratorContext)\n\n  if (keyGenerator === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorKeyGenerator\\` hook must be used inside the <PortableTextEditor> component's context.`\n    )\n  }\n  return keyGenerator\n}\n","import {Editor, Element, Range, Text} from 'slate'\nimport {EditorSelection} from '..'\n\n/**\n * Dragging\n */\n\n// Is the editor dragging something?\nexport const IS_DRAGGING: WeakMap<Editor, boolean> = new WeakMap()\n// Is the editor dragging a element?\nexport const IS_DRAGGING_BLOCK_ELEMENT: WeakMap<Editor, Element> = new WeakMap()\n\n// When dragging elements, this will be the target element\nexport const IS_DRAGGING_ELEMENT_TARGET: WeakMap<Editor, Element> = new WeakMap()\n// Target position for dragging over a block\nexport const IS_DRAGGING_BLOCK_TARGET_POSITION: WeakMap<Editor, 'top' | 'bottom'> = new WeakMap()\n\nexport const KEY_TO_SLATE_ELEMENT: WeakMap<Editor, any | undefined> = new WeakMap()\nexport const KEY_TO_VALUE_ELEMENT: WeakMap<Editor, any | undefined> = new WeakMap()\n\n// Keep object relation to slate range in the portable-text-range\nexport const SLATE_TO_PORTABLE_TEXT_RANGE = new WeakMap<Range, EditorSelection>()\n","/**\n * Diff Match and Patch\n * Copyright 2018 The diff-match-patch Authors.\n * https://github.com/google/diff-match-patch\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * Class containing the diff, match and patch methods.\n * @constructor\n */\nvar diff_match_patch = function() {\n\n  // Defaults.\n  // Redefine these in your program to override the defaults.\n\n  // Number of seconds to map a diff before giving up (0 for infinity).\n  this.Diff_Timeout = 1.0;\n  // Cost of an empty edit operation in terms of edit characters.\n  this.Diff_EditCost = 4;\n  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n  this.Match_Threshold = 0.5;\n  // How far to search for a match (0 = exact location, 1000+ = broad match).\n  // A match this many characters away from the expected location will add\n  // 1.0 to the score (0.0 is a perfect match).\n  this.Match_Distance = 1000;\n  // When deleting a large block of text (over ~64 characters), how close do\n  // the contents have to be to match the expected contents. (0.0 = perfection,\n  // 1.0 = very loose).  Note that Match_Threshold controls how closely the\n  // end points of a delete need to match.\n  this.Patch_DeleteThreshold = 0.5;\n  // Chunk size for context length.\n  this.Patch_Margin = 4;\n\n  // The number of bits in an int.\n  this.Match_MaxBits = 32;\n};\n\n\n//  DIFF FUNCTIONS\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n/**\n * Class representing one diff tuple.\n * ~Attempts to look like a two-element array (which is what this used to be).~\n * Constructor returns an actual two-element array, to allow destructing @JackuB\n * See https://github.com/JackuB/diff-match-patch/issues/14 for details\n * @param {number} op Operation, one of: DIFF_DELETE, DIFF_INSERT, DIFF_EQUAL.\n * @param {string} text Text to be deleted, inserted, or retained.\n * @constructor\n */\ndiff_match_patch.Diff = function(op, text) {\n  return [op, text];\n};\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\n *     then don't run a line-level diff first to identify the changed areas.\n *     Defaults to true, which does a faster, slightly less optimal diff.\n * @param {number=} opt_deadline Optional time when the diff should be complete\n *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n *     instead.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines,\n    opt_deadline) {\n  // Set a deadline by which time the diff must be complete.\n  if (typeof opt_deadline == 'undefined') {\n    if (this.Diff_Timeout <= 0) {\n      opt_deadline = Number.MAX_VALUE;\n    } else {\n      opt_deadline = (new Date).getTime() + this.Diff_Timeout * 1000;\n    }\n  }\n  var deadline = opt_deadline;\n\n  // Check for null inputs.\n  if (text1 == null || text2 == null) {\n    throw new Error('Null input. (diff_main)');\n  }\n\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [new diff_match_patch.Diff(DIFF_EQUAL, text1)];\n    }\n    return [];\n  }\n\n  if (typeof opt_checklines == 'undefined') {\n    opt_checklines = true;\n  }\n  var checklines = opt_checklines;\n\n  // Trim off common prefix (speedup).\n  var commonlength = this.diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = this.diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = this.diff_compute_(text1, text2, checklines, deadline);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, commonprefix));\n  }\n  if (commonsuffix) {\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, commonsuffix));\n  }\n  this.diff_cleanupMerge(diffs);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean} checklines Speedup flag.  If false, then don't run a\n *     line-level diff first to identify the changed areas.\n *     If true, then run a faster, slightly less optimal diff.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_compute_ = function(text1, text2, checklines,\n    deadline) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1)];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [new diff_match_patch.Diff(DIFF_INSERT, longtext.substring(0, i)),\n             new diff_match_patch.Diff(DIFF_EQUAL, shorttext),\n             new diff_match_patch.Diff(DIFF_INSERT,\n                 longtext.substring(i + shorttext.length))];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n            new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = this.diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\n    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);\n    // Merge the results.\n    return diffs_a.concat([new diff_match_patch.Diff(DIFF_EQUAL, mid_common)],\n                          diffs_b);\n  }\n\n  if (checklines && text1.length > 100 && text2.length > 100) {\n    return this.diff_lineMode_(text1, text2, deadline);\n  }\n\n  return this.diff_bisect_(text1, text2, deadline);\n};\n\n\n/**\n * Do a quick line-level diff on both strings, then rediff the parts for\n * greater accuracy.\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {\n  // Scan the text on a line-by-line basis first.\n  var a = this.diff_linesToChars_(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  var linearray = a.lineArray;\n\n  var diffs = this.diff_main(text1, text2, false, deadline);\n\n  // Convert the diff back to original text.\n  this.diff_charsToLines_(diffs, linearray);\n  // Eliminate freak matches (e.g. blank lines)\n  this.diff_cleanupSemantic(diffs);\n\n  // Rediff any replacement blocks, this time character-by-character.\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete >= 1 && count_insert >= 1) {\n          // Delete the offending records and add the merged ones.\n          diffs.splice(pointer - count_delete - count_insert,\n                       count_delete + count_insert);\n          pointer = pointer - count_delete - count_insert;\n          var subDiff =\n              this.diff_main(text_delete, text_insert, false, deadline);\n          for (var j = subDiff.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, subDiff[j]);\n          }\n          pointer = pointer + subDiff.length;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n    pointer++;\n  }\n  diffs.pop();  // Remove the dummy entry at the end.\n\n  return diffs;\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 != 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Bail out if deadline is reached.\n    if ((new Date()).getTime() > deadline) {\n      break;\n    }\n\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length &&\n             text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length &&\n             text1.charAt(text1_length - x2 - 1) ==\n             text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n          new diff_match_patch.Diff(DIFF_INSERT, text2)];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisectSplit_ = function(text1, text2, x, y,\n    deadline) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = this.diff_main(text1a, text2a, false, deadline);\n  var diffsb = this.diff_main(text1b, text2b, false, deadline);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Split two texts into an array of strings.  Reduce the texts to a string of\n * hashes where each Unicode character represents one line.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n *     An object containing the encoded text1, the encoded text2 and\n *     the array of unique strings.\n *     The zeroth element of the array of unique strings is intentionally blank.\n * @private\n */\ndiff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {\n  var lineArray = [];  // e.g. lineArray[4] == 'Hello\\n'\n  var lineHash = {};   // e.g. lineHash['Hello\\n'] == 4\n\n  // '\\x00' is a valid character, but various debuggers don't like it.\n  // So we'll insert a junk entry to avoid generating a null character.\n  lineArray[0] = '';\n\n  /**\n   * Split a text into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * Modifies linearray and linehash through being a closure.\n   * @param {string} text String to encode.\n   * @return {string} Encoded string.\n   * @private\n   */\n  function diff_linesToCharsMunge_(text) {\n    var chars = '';\n    // Walk the text, pulling out a substring for each line.\n    // text.split('\\n') would would temporarily double our memory footprint.\n    // Modifying text would create many large strings to garbage collect.\n    var lineStart = 0;\n    var lineEnd = -1;\n    // Keeping our own length variable is faster than looking it up.\n    var lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf('\\n', lineStart);\n      if (lineEnd == -1) {\n        lineEnd = text.length - 1;\n      }\n      var line = text.substring(lineStart, lineEnd + 1);\n\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :\n          (lineHash[line] !== undefined)) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        if (lineArrayLength == maxLines) {\n          // Bail out at 65535 because\n          // String.fromCharCode(65536) == String.fromCharCode(0)\n          line = text.substring(lineStart);\n          lineEnd = text.length;\n        }\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n      lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  // Allocate 2/3rds of the space for text1, the rest for text2.\n  var maxLines = 40000;\n  var chars1 = diff_linesToCharsMunge_(text1);\n  maxLines = 65535;\n  var chars2 = diff_linesToCharsMunge_(text2);\n  return {chars1: chars1, chars2: chars2, lineArray: lineArray};\n};\n\n\n/**\n * Rehydrate the text in a diff from a string of line hashes to real lines of\n * text.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {!Array.<string>} lineArray Array of unique strings.\n * @private\n */\ndiff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {\n  for (var i = 0; i < diffs.length; i++) {\n    var chars = diffs[i][1];\n    var text = [];\n    for (var j = 0; j < chars.length; j++) {\n      text[j] = lineArray[chars.charCodeAt(j)];\n    }\n    diffs[i][1] = text.join('');\n  }\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\ndiff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) ==\n        text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\ndiff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 ||\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine if the suffix of one string is the prefix of another.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of the first\n *     string and the start of the second string.\n * @private\n */\ndiff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  // Eliminate the null case.\n  if (text1_length == 0 || text2_length == 0) {\n    return 0;\n  }\n  // Truncate the longer string.\n  if (text1_length > text2_length) {\n    text1 = text1.substring(text1_length - text2_length);\n  } else if (text1_length < text2_length) {\n    text2 = text2.substring(0, text1_length);\n  }\n  var text_length = Math.min(text1_length, text2_length);\n  // Quick check for the worst case.\n  if (text1 == text2) {\n    return text_length;\n  }\n\n  // Start by looking for a single character match\n  // and increase length until no match is found.\n  // Performance analysis: https://neil.fraser.name/news/2010/11/04/\n  var best = 0;\n  var length = 1;\n  while (true) {\n    var pattern = text1.substring(text_length - length);\n    var found = text2.indexOf(pattern);\n    if (found == -1) {\n      return best;\n    }\n    length += found;\n    if (found == 0 || text1.substring(text_length - length) ==\n        text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n * @private\n */\ndiff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {\n  if (this.Diff_Timeout <= 0) {\n    // Don't risk returning a non-optimal diff if we have unlimited time.\n    return null;\n  }\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = dmp.diff_commonPrefix(longtext.substring(i),\n                                               shorttext.substring(j));\n      var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),\n                                               shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) +\n            shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b,\n              best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reduce the number of edits by eliminating semantically trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Number of characters that changed prior to the equality.\n  var length_insertions1 = 0;\n  var length_deletions1 = 0;\n  // Number of characters that changed after the equality.\n  var length_insertions2 = 0;\n  var length_deletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      equalities[equalitiesLength++] = pointer;\n      length_insertions1 = length_insertions2;\n      length_deletions1 = length_deletions2;\n      length_insertions2 = 0;\n      length_deletions2 = 0;\n      lastEquality = diffs[pointer][1];\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_INSERT) {\n        length_insertions2 += diffs[pointer][1].length;\n      } else {\n        length_deletions2 += diffs[pointer][1].length;\n      }\n      // Eliminate an equality that is smaller or equal to the edits on both\n      // sides of it.\n      if (lastEquality && (lastEquality.length <=\n          Math.max(length_insertions1, length_deletions1)) &&\n          (lastEquality.length <= Math.max(length_insertions2,\n                                           length_deletions2))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        // Throw away the equality we just deleted.\n        equalitiesLength--;\n        // Throw away the previous equality (it needs to be reevaluated).\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        length_insertions1 = 0;  // Reset the counters.\n        length_deletions1 = 0;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastEquality = null;\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  // Normalize the diff.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n  this.diff_cleanupSemanticLossless(diffs);\n\n  // Find any overlaps between deletions and insertions.\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n  //   -> <del>abc</del>xxx<ins>def</ins>\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\n  //   -> <ins>def</ins>xxx<del>abc</del>\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] == DIFF_DELETE &&\n        diffs[pointer][0] == DIFF_INSERT) {\n      var deletion = diffs[pointer - 1][1];\n      var insertion = diffs[pointer][1];\n      var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);\n      var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\n      if (overlap_length1 >= overlap_length2) {\n        if (overlap_length1 >= deletion.length / 2 ||\n            overlap_length1 >= insertion.length / 2) {\n          // Overlap found.  Insert an equality and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n              insertion.substring(0, overlap_length1)));\n          diffs[pointer - 1][1] =\n              deletion.substring(0, deletion.length - overlap_length1);\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n          pointer++;\n        }\n      } else {\n        if (overlap_length2 >= deletion.length / 2 ||\n            overlap_length2 >= insertion.length / 2) {\n          // Reverse overlap found.\n          // Insert an equality and swap and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n              deletion.substring(0, overlap_length2)));\n          diffs[pointer - 1][0] = DIFF_INSERT;\n          diffs[pointer - 1][1] =\n              insertion.substring(0, insertion.length - overlap_length2);\n          diffs[pointer + 1][0] = DIFF_DELETE;\n          diffs[pointer + 1][1] =\n              deletion.substring(overlap_length2);\n          pointer++;\n        }\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n};\n\n\n/**\n * Look for single edits surrounded on both sides by equalities\n * which can be shifted sideways to align the edit to a word boundary.\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {\n  /**\n   * Given two strings, compute a score representing whether the internal\n   * boundary falls on logical boundaries.\n   * Scores range from 6 (best) to 0 (worst).\n   * Closure, but does not reference any external variables.\n   * @param {string} one First string.\n   * @param {string} two Second string.\n   * @return {number} The score.\n   * @private\n   */\n  function diff_cleanupSemanticScore_(one, two) {\n    if (!one || !two) {\n      // Edges are the best.\n      return 6;\n    }\n\n    // Each port of this function behaves slightly differently due to\n    // subtle differences in each language's definition of things like\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n    // the choice has been made to use each language's native features\n    // rather than force total conformity.\n    var char1 = one.charAt(one.length - 1);\n    var char2 = two.charAt(0);\n    var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);\n    var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);\n    var whitespace1 = nonAlphaNumeric1 &&\n        char1.match(diff_match_patch.whitespaceRegex_);\n    var whitespace2 = nonAlphaNumeric2 &&\n        char2.match(diff_match_patch.whitespaceRegex_);\n    var lineBreak1 = whitespace1 &&\n        char1.match(diff_match_patch.linebreakRegex_);\n    var lineBreak2 = whitespace2 &&\n        char2.match(diff_match_patch.linebreakRegex_);\n    var blankLine1 = lineBreak1 &&\n        one.match(diff_match_patch.blanklineEndRegex_);\n    var blankLine2 = lineBreak2 &&\n        two.match(diff_match_patch.blanklineStartRegex_);\n\n    if (blankLine1 || blankLine2) {\n      // Five points for blank lines.\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      // Four points for line breaks.\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      // Three points for end of sentences.\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      // Two points for whitespace.\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      // One point for non-alphanumeric.\n      return 1;\n    }\n    return 0;\n  }\n\n  var pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      var equality1 = diffs[pointer - 1][1];\n      var edit = diffs[pointer][1];\n      var equality2 = diffs[pointer + 1][1];\n\n      // First, shift the edit as far left as possible.\n      var commonOffset = this.diff_commonSuffix(equality1, edit);\n      if (commonOffset) {\n        var commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n\n      // Second, step character by character right, looking for the best fit.\n      var bestEquality1 = equality1;\n      var bestEdit = edit;\n      var bestEquality2 = equality2;\n      var bestScore = diff_cleanupSemanticScore_(equality1, edit) +\n          diff_cleanupSemanticScore_(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        var score = diff_cleanupSemanticScore_(equality1, edit) +\n            diff_cleanupSemanticScore_(edit, equality2);\n        // The >= encourages trailing rather than leading whitespace on edits.\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n\n      if (diffs[pointer - 1][1] != bestEquality1) {\n        // We have an improvement, save it back to the diff.\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n};\n\n// Define some regex patterns for matching boundaries.\ndiff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\ndiff_match_patch.whitespaceRegex_ = /\\s/;\ndiff_match_patch.linebreakRegex_ = /[\\r\\n]/;\ndiff_match_patch.blanklineEndRegex_ = /\\n\\r?\\n$/;\ndiff_match_patch.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n\n/**\n * Reduce the number of edits by eliminating operationally trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Is there an insertion operation before the last equality.\n  var pre_ins = false;\n  // Is there a deletion operation before the last equality.\n  var pre_del = false;\n  // Is there an insertion operation after the last equality.\n  var post_ins = false;\n  // Is there a deletion operation after the last equality.\n  var post_del = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      if (diffs[pointer][1].length < this.Diff_EditCost &&\n          (post_ins || post_del)) {\n        // Candidate found.\n        equalities[equalitiesLength++] = pointer;\n        pre_ins = post_ins;\n        pre_del = post_del;\n        lastEquality = diffs[pointer][1];\n      } else {\n        // Not a candidate, and can never become one.\n        equalitiesLength = 0;\n        lastEquality = null;\n      }\n      post_ins = post_del = false;\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_DELETE) {\n        post_del = true;\n      } else {\n        post_ins = true;\n      }\n      /*\n       * Five types to be split:\n       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n       * <ins>A</ins>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<ins>C</ins>\n       * <ins>A</del>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<del>C</del>\n       */\n      if (lastEquality && ((pre_ins && pre_del && post_ins && post_del) ||\n                           ((lastEquality.length < this.Diff_EditCost / 2) &&\n                            (pre_ins + pre_del + post_ins + post_del) == 3))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;  // Throw away the equality we just deleted;\n        lastEquality = null;\n        if (pre_ins && pre_del) {\n          // No changes made which could affect previous entry, keep going.\n          post_ins = post_del = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--;  // Throw away the previous equality.\n          pointer = equalitiesLength > 0 ?\n              equalities[equalitiesLength - 1] : -1;\n          post_ins = post_del = false;\n        }\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupMerge = function(diffs) {\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = this.diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if ((pointer - count_delete - count_insert) > 0 &&\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] +=\n                    text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n                    text_insert.substring(0, commonlength)));\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = this.diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\n                  commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length -\n                  commonlength);\n              text_delete = text_delete.substring(0, text_delete.length -\n                  commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          pointer -= count_delete + count_insert;\n          diffs.splice(pointer, count_delete + count_insert);\n          if (text_delete.length) {\n            diffs.splice(pointer, 0,\n                new diff_match_patch.Diff(DIFF_DELETE, text_delete));\n            pointer++;\n          }\n          if (text_insert.length) {\n            diffs.splice(pointer, 0,\n                new diff_match_patch.Diff(DIFF_INSERT, text_insert));\n            pointer++;\n          }\n          pointer++;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                        diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n          diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n            diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * loc is a location in text1, compute and return the equivalent location in\n * text2.\n * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {number} loc Location within text1.\n * @return {number} Location within text2.\n */\ndiff_match_patch.prototype.diff_xIndex = function(diffs, loc) {\n  var chars1 = 0;\n  var chars2 = 0;\n  var last_chars1 = 0;\n  var last_chars2 = 0;\n  var x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {  // Overshot the location.\n      break;\n    }\n    last_chars1 = chars1;\n    last_chars2 = chars2;\n  }\n  // Was the location was deleted?\n  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\n    return last_chars2;\n  }\n  // Add the remaining character length.\n  return last_chars2 + (loc - last_chars1);\n};\n\n\n/**\n * Convert a diff array into a pretty HTML report.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} HTML representation.\n */\ndiff_match_patch.prototype.diff_prettyHtml = function(diffs) {\n  var html = [];\n  var pattern_amp = /&/g;\n  var pattern_lt = /</g;\n  var pattern_gt = />/g;\n  var pattern_para = /\\n/g;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];    // Operation (insert, delete, equal)\n    var data = diffs[x][1];  // Text of change.\n    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')\n        .replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');\n    switch (op) {\n      case DIFF_INSERT:\n        html[x] = '<ins style=\"background:#e6ffe6;\">' + text + '</ins>';\n        break;\n      case DIFF_DELETE:\n        html[x] = '<del style=\"background:#ffe6e6;\">' + text + '</del>';\n        break;\n      case DIFF_EQUAL:\n        html[x] = '<span>' + text + '</span>';\n        break;\n    }\n  }\n  return html.join('');\n};\n\n\n/**\n * Compute and return the source text (all equalities and deletions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Source text.\n */\ndiff_match_patch.prototype.diff_text1 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute and return the destination text (all equalities and insertions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Destination text.\n */\ndiff_match_patch.prototype.diff_text2 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute the Levenshtein distance; the number of inserted, deleted or\n * substituted characters.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {number} Number of changes.\n */\ndiff_match_patch.prototype.diff_levenshtein = function(diffs) {\n  var levenshtein = 0;\n  var insertions = 0;\n  var deletions = 0;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];\n    var data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        // A deletion and an insertion is one substitution.\n        levenshtein += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n    }\n  }\n  levenshtein += Math.max(insertions, deletions);\n  return levenshtein;\n};\n\n\n/**\n * Crush the diff into an encoded string which describes the operations\n * required to transform text1 into text2.\n * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\n * Operations are tab-separated.  Inserted text is escaped using %xx notation.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Delta text.\n */\ndiff_match_patch.prototype.diff_toDelta = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        text[x] = '+' + encodeURI(diffs[x][1]);\n        break;\n      case DIFF_DELETE:\n        text[x] = '-' + diffs[x][1].length;\n        break;\n      case DIFF_EQUAL:\n        text[x] = '=' + diffs[x][1].length;\n        break;\n    }\n  }\n  return text.join('\\t').replace(/%20/g, ' ');\n};\n\n\n/**\n * Given the original text1, and an encoded string which describes the\n * operations required to transform text1 into text2, compute the full diff.\n * @param {string} text1 Source string for the diff.\n * @param {string} delta Delta text.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.diff_fromDelta = function(text1, delta) {\n  var diffs = [];\n  var diffsLength = 0;  // Keeping our own length var is faster in JS.\n  var pointer = 0;  // Cursor in text1\n  var tokens = delta.split(/\\t/g);\n  for (var x = 0; x < tokens.length; x++) {\n    // Each token begins with a one character parameter which specifies the\n    // operation of this token (delete, insert, equality).\n    var param = tokens[x].substring(1);\n    switch (tokens[x].charAt(0)) {\n      case '+':\n        try {\n          diffs[diffsLength++] =\n              new diff_match_patch.Diff(DIFF_INSERT, decodeURI(param));\n        } catch (ex) {\n          // Malformed URI sequence.\n          throw new Error('Illegal escape in diff_fromDelta: ' + param);\n        }\n        break;\n      case '-':\n        // Fall through.\n      case '=':\n        var n = parseInt(param, 10);\n        if (isNaN(n) || n < 0) {\n          throw new Error('Invalid number in diff_fromDelta: ' + param);\n        }\n        var text = text1.substring(pointer, pointer += n);\n        if (tokens[x].charAt(0) == '=') {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_EQUAL, text);\n        } else {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_DELETE, text);\n        }\n        break;\n      default:\n        // Blank tokens are ok (from a trailing \\t).\n        // Anything else is an error.\n        if (tokens[x]) {\n          throw new Error('Invalid diff operation in diff_fromDelta: ' +\n                          tokens[x]);\n        }\n    }\n  }\n  if (pointer != text1.length) {\n    throw new Error('Delta length (' + pointer +\n        ') does not equal source text length (' + text1.length + ').');\n  }\n  return diffs;\n};\n\n\n//  MATCH FUNCTIONS\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc'.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n */\ndiff_match_patch.prototype.match_main = function(text, pattern, loc) {\n  // Check for null inputs.\n  if (text == null || pattern == null || loc == null) {\n    throw new Error('Null input. (match_main)');\n  }\n\n  loc = Math.max(0, Math.min(loc, text.length));\n  if (text == pattern) {\n    // Shortcut (potentially not guaranteed by the algorithm)\n    return 0;\n  } else if (!text.length) {\n    // Nothing to match.\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) == pattern) {\n    // Perfect match at the perfect spot!  (Includes case of null pattern)\n    return loc;\n  } else {\n    // Do a fuzzy compare.\n    return this.match_bitap_(text, pattern, loc);\n  }\n};\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc' using the\n * Bitap algorithm.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n * @private\n */\ndiff_match_patch.prototype.match_bitap_ = function(text, pattern, loc) {\n  if (pattern.length > this.Match_MaxBits) {\n    throw new Error('Pattern too long for this browser.');\n  }\n\n  // Initialise the alphabet.\n  var s = this.match_alphabet_(pattern);\n\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Compute and return the score for a match with e errors and x location.\n   * Accesses loc and pattern through being a closure.\n   * @param {number} e Number of errors in match.\n   * @param {number} x Location of match.\n   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\n   * @private\n   */\n  function match_bitapScore_(e, x) {\n    var accuracy = e / pattern.length;\n    var proximity = Math.abs(loc - x);\n    if (!dmp.Match_Distance) {\n      // Dodge divide by zero error.\n      return proximity ? 1.0 : accuracy;\n    }\n    return accuracy + (proximity / dmp.Match_Distance);\n  }\n\n  // Highest score beyond which we give up.\n  var score_threshold = this.Match_Threshold;\n  // Is there a nearby exact match? (speedup)\n  var best_loc = text.indexOf(pattern, loc);\n  if (best_loc != -1) {\n    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    // What about in the other direction? (speedup)\n    best_loc = text.lastIndexOf(pattern, loc + pattern.length);\n    if (best_loc != -1) {\n      score_threshold =\n          Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    }\n  }\n\n  // Initialise the bit arrays.\n  var matchmask = 1 << (pattern.length - 1);\n  best_loc = -1;\n\n  var bin_min, bin_mid;\n  var bin_max = pattern.length + text.length;\n  var last_rd;\n  for (var d = 0; d < pattern.length; d++) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from 'loc' we can stray at this\n    // error level.\n    bin_min = 0;\n    bin_mid = bin_max;\n    while (bin_min < bin_mid) {\n      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\n        bin_min = bin_mid;\n      } else {\n        bin_max = bin_mid;\n      }\n      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n    }\n    // Use the result from this iteration as the maximum for the next.\n    bin_max = bin_mid;\n    var start = Math.max(1, loc - bin_mid + 1);\n    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\n\n    var rd = Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (var j = finish; j >= start; j--) {\n      // The alphabet (s) is a sparse hash, so the following line generates\n      // warnings.\n      var charMatch = s[text.charAt(j - 1)];\n      if (d === 0) {  // First pass: exact match.\n        rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\n      } else {  // Subsequent passes: fuzzy match.\n        rd[j] = (((rd[j + 1] << 1) | 1) & charMatch) |\n                (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |\n                last_rd[j + 1];\n      }\n      if (rd[j] & matchmask) {\n        var score = match_bitapScore_(d, j - 1);\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (score <= score_threshold) {\n          // Told you so.\n          score_threshold = score;\n          best_loc = j - 1;\n          if (best_loc > loc) {\n            // When passing loc, don't exceed our current distance from loc.\n            start = Math.max(1, 2 * loc - best_loc);\n          } else {\n            // Already passed loc, downhill from here on in.\n            break;\n          }\n        }\n      }\n    }\n    // No hope for a (better) match at greater error levels.\n    if (match_bitapScore_(d + 1, loc) > score_threshold) {\n      break;\n    }\n    last_rd = rd;\n  }\n  return best_loc;\n};\n\n\n/**\n * Initialise the alphabet for the Bitap algorithm.\n * @param {string} pattern The text to encode.\n * @return {!Object} Hash of character locations.\n * @private\n */\ndiff_match_patch.prototype.match_alphabet_ = function(pattern) {\n  var s = {};\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);\n  }\n  return s;\n};\n\n\n//  PATCH FUNCTIONS\n\n\n/**\n * Increase the context until it is unique,\n * but don't let the pattern expand beyond Match_MaxBits.\n * @param {!diff_match_patch.patch_obj} patch The patch to grow.\n * @param {string} text Source text.\n * @private\n */\ndiff_match_patch.prototype.patch_addContext_ = function(patch, text) {\n  if (text.length == 0) {\n    return;\n  }\n  if (patch.start2 === null) {\n    throw Error('patch not initialized');\n  }\n  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  var padding = 0;\n\n  // Look for the first and last matches of pattern in text.  If two different\n  // matches are found, increase the pattern length.\n  while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&\n         pattern.length < this.Match_MaxBits - this.Patch_Margin -\n         this.Patch_Margin) {\n    padding += this.Patch_Margin;\n    pattern = text.substring(patch.start2 - padding,\n                             patch.start2 + patch.length1 + padding);\n  }\n  // Add one chunk for good luck.\n  padding += this.Patch_Margin;\n\n  // Add the prefix.\n  var prefix = text.substring(patch.start2 - padding, patch.start2);\n  if (prefix) {\n    patch.diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, prefix));\n  }\n  // Add the suffix.\n  var suffix = text.substring(patch.start2 + patch.length1,\n                              patch.start2 + patch.length1 + padding);\n  if (suffix) {\n    patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, suffix));\n  }\n\n  // Roll back the start points.\n  patch.start1 -= prefix.length;\n  patch.start2 -= prefix.length;\n  // Extend the lengths.\n  patch.length1 += prefix.length + suffix.length;\n  patch.length2 += prefix.length + suffix.length;\n};\n\n\n/**\n * Compute a list of patches to turn text1 into text2.\n * Use diffs if provided, otherwise compute it ourselves.\n * There are four ways to call this function, depending on what data is\n * available to the caller:\n * Method 1:\n * a = text1, b = text2\n * Method 2:\n * a = diffs\n * Method 3 (optimal):\n * a = text1, b = diffs\n * Method 4 (deprecated, use method 3):\n * a = text1, b = text2, c = diffs\n *\n * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or\n * Array of diff tuples for text1 to text2 (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_b text2 (methods 1,4) or\n * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_c Array of diff tuples\n * for text1 to text2 (method 4) or undefined (methods 1,2,3).\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {\n  var text1, diffs;\n  if (typeof a == 'string' && typeof opt_b == 'string' &&\n      typeof opt_c == 'undefined') {\n    // Method 1: text1, text2\n    // Compute diffs from text1 and text2.\n    text1 = /** @type {string} */(a);\n    diffs = this.diff_main(text1, /** @type {string} */(opt_b), true);\n    if (diffs.length > 2) {\n      this.diff_cleanupSemantic(diffs);\n      this.diff_cleanupEfficiency(diffs);\n    }\n  } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&\n      typeof opt_c == 'undefined') {\n    // Method 2: diffs\n    // Compute text1 from diffs.\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(a);\n    text1 = this.diff_text1(diffs);\n  } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&\n      typeof opt_c == 'undefined') {\n    // Method 3: text1, diffs\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_b);\n  } else if (typeof a == 'string' && typeof opt_b == 'string' &&\n      opt_c && typeof opt_c == 'object') {\n    // Method 4: text1, text2, diffs\n    // text2 is not used.\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_c);\n  } else {\n    throw new Error('Unknown call format to patch_make.');\n  }\n\n  if (diffs.length === 0) {\n    return [];  // Get rid of the null case.\n  }\n  var patches = [];\n  var patch = new diff_match_patch.patch_obj();\n  var patchDiffLength = 0;  // Keeping our own length var is faster in JS.\n  var char_count1 = 0;  // Number of characters into the text1 string.\n  var char_count2 = 0;  // Number of characters into the text2 string.\n  // Start with text1 (prepatch_text) and apply the diffs until we arrive at\n  // text2 (postpatch_text).  We recreate the patches one by one to determine\n  // context info.\n  var prepatch_text = text1;\n  var postpatch_text = text1;\n  for (var x = 0; x < diffs.length; x++) {\n    var diff_type = diffs[x][0];\n    var diff_text = diffs[x][1];\n\n    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {\n      // A new patch starts here.\n      patch.start1 = char_count1;\n      patch.start2 = char_count2;\n    }\n\n    switch (diff_type) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = diffs[x];\n        patch.length2 += diff_text.length;\n        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +\n                         postpatch_text.substring(char_count2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diff_text.length;\n        patch.diffs[patchDiffLength++] = diffs[x];\n        postpatch_text = postpatch_text.substring(0, char_count2) +\n                         postpatch_text.substring(char_count2 +\n                             diff_text.length);\n        break;\n      case DIFF_EQUAL:\n        if (diff_text.length <= 2 * this.Patch_Margin &&\n            patchDiffLength && diffs.length != x + 1) {\n          // Small equality inside a patch.\n          patch.diffs[patchDiffLength++] = diffs[x];\n          patch.length1 += diff_text.length;\n          patch.length2 += diff_text.length;\n        } else if (diff_text.length >= 2 * this.Patch_Margin) {\n          // Time for a new patch.\n          if (patchDiffLength) {\n            this.patch_addContext_(patch, prepatch_text);\n            patches.push(patch);\n            patch = new diff_match_patch.patch_obj();\n            patchDiffLength = 0;\n            // Unlike Unidiff, our patch lists have a rolling context.\n            // https://github.com/google/diff-match-patch/wiki/Unidiff\n            // Update prepatch text & pos to reflect the application of the\n            // just completed patch.\n            prepatch_text = postpatch_text;\n            char_count1 = char_count2;\n          }\n        }\n        break;\n    }\n\n    // Update the current character count.\n    if (diff_type !== DIFF_INSERT) {\n      char_count1 += diff_text.length;\n    }\n    if (diff_type !== DIFF_DELETE) {\n      char_count2 += diff_text.length;\n    }\n  }\n  // Pick up the leftover patch if not empty.\n  if (patchDiffLength) {\n    this.patch_addContext_(patch, prepatch_text);\n    patches.push(patch);\n  }\n\n  return patches;\n};\n\n\n/**\n * Given an array of patches, return another array that is identical.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_deepCopy = function(patches) {\n  // Making deep copies is hard in JavaScript.\n  var patchesCopy = [];\n  for (var x = 0; x < patches.length; x++) {\n    var patch = patches[x];\n    var patchCopy = new diff_match_patch.patch_obj();\n    patchCopy.diffs = [];\n    for (var y = 0; y < patch.diffs.length; y++) {\n      patchCopy.diffs[y] =\n          new diff_match_patch.Diff(patch.diffs[y][0], patch.diffs[y][1]);\n    }\n    patchCopy.start1 = patch.start1;\n    patchCopy.start2 = patch.start2;\n    patchCopy.length1 = patch.length1;\n    patchCopy.length2 = patch.length2;\n    patchesCopy[x] = patchCopy;\n  }\n  return patchesCopy;\n};\n\n\n/**\n * Merge a set of patches onto the text.  Return a patched text, as well\n * as a list of true/false values indicating which patches were applied.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @param {string} text Old text.\n * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the\n *      new text and an array of boolean values.\n */\ndiff_match_patch.prototype.patch_apply = function(patches, text) {\n  if (patches.length == 0) {\n    return [text, []];\n  }\n\n  // Deep copy the patches so that no changes are made to originals.\n  patches = this.patch_deepCopy(patches);\n\n  var nullPadding = this.patch_addPadding(patches);\n  text = nullPadding + text + nullPadding;\n\n  this.patch_splitMax(patches);\n  // delta keeps track of the offset between the expected and actual location\n  // of the previous patch.  If there are patches expected at positions 10 and\n  // 20, but the first patch was found at 12, delta is 2 and the second patch\n  // has an effective expected position of 22.\n  var delta = 0;\n  var results = [];\n  for (var x = 0; x < patches.length; x++) {\n    var expected_loc = patches[x].start2 + delta;\n    var text1 = this.diff_text1(patches[x].diffs);\n    var start_loc;\n    var end_loc = -1;\n    if (text1.length > this.Match_MaxBits) {\n      // patch_splitMax will only provide an oversized pattern in the case of\n      // a monster delete.\n      start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),\n                                  expected_loc);\n      if (start_loc != -1) {\n        end_loc = this.match_main(text,\n            text1.substring(text1.length - this.Match_MaxBits),\n            expected_loc + text1.length - this.Match_MaxBits);\n        if (end_loc == -1 || start_loc >= end_loc) {\n          // Can't find valid trailing context.  Drop this patch.\n          start_loc = -1;\n        }\n      }\n    } else {\n      start_loc = this.match_main(text, text1, expected_loc);\n    }\n    if (start_loc == -1) {\n      // No match found.  :(\n      results[x] = false;\n      // Subtract the delta for this failed patch from subsequent patches.\n      delta -= patches[x].length2 - patches[x].length1;\n    } else {\n      // Found a match.  :)\n      results[x] = true;\n      delta = start_loc - expected_loc;\n      var text2;\n      if (end_loc == -1) {\n        text2 = text.substring(start_loc, start_loc + text1.length);\n      } else {\n        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);\n      }\n      if (text1 == text2) {\n        // Perfect match, just shove the replacement text in.\n        text = text.substring(0, start_loc) +\n               this.diff_text2(patches[x].diffs) +\n               text.substring(start_loc + text1.length);\n      } else {\n        // Imperfect match.  Run a diff to get a framework of equivalent\n        // indices.\n        var diffs = this.diff_main(text1, text2, false);\n        if (text1.length > this.Match_MaxBits &&\n            this.diff_levenshtein(diffs) / text1.length >\n            this.Patch_DeleteThreshold) {\n          // The end points match, but the content is unacceptably bad.\n          results[x] = false;\n        } else {\n          this.diff_cleanupSemanticLossless(diffs);\n          var index1 = 0;\n          var index2;\n          for (var y = 0; y < patches[x].diffs.length; y++) {\n            var mod = patches[x].diffs[y];\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = this.diff_xIndex(diffs, index1);\n            }\n            if (mod[0] === DIFF_INSERT) {  // Insertion\n              text = text.substring(0, start_loc + index2) + mod[1] +\n                     text.substring(start_loc + index2);\n            } else if (mod[0] === DIFF_DELETE) {  // Deletion\n              text = text.substring(0, start_loc + index2) +\n                     text.substring(start_loc + this.diff_xIndex(diffs,\n                         index1 + mod[1].length));\n            }\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  }\n  // Strip the padding off.\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n};\n\n\n/**\n * Add some padding on text start and end so that edges can match something.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} The padding string added to each side.\n */\ndiff_match_patch.prototype.patch_addPadding = function(patches) {\n  var paddingLength = this.Patch_Margin;\n  var nullPadding = '';\n  for (var x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  }\n\n  // Bump all the patches forward.\n  for (var x = 0; x < patches.length; x++) {\n    patches[x].start1 += paddingLength;\n    patches[x].start2 += paddingLength;\n  }\n\n  // Add some padding on start of first diff.\n  var patch = patches[0];\n  var diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.start1 -= paddingLength;  // Should be 0.\n    patch.start2 -= paddingLength;  // Should be 0.\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    // Grow first equality.\n    var extraLength = paddingLength - diffs[0][1].length;\n    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  // Add some padding on end of last diff.\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    // Grow last equality.\n    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  return nullPadding;\n};\n\n\n/**\n * Look through the patches and break up any which are longer than the maximum\n * limit of the match algorithm.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_splitMax = function(patches) {\n  var patch_size = this.Match_MaxBits;\n  for (var x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patch_size) {\n      continue;\n    }\n    var bigpatch = patches[x];\n    // Remove the big old patch.\n    patches.splice(x--, 1);\n    var start1 = bigpatch.start1;\n    var start2 = bigpatch.start2;\n    var precontext = '';\n    while (bigpatch.diffs.length !== 0) {\n      // Create one of several smaller patches.\n      var patch = new diff_match_patch.patch_obj();\n      var empty = true;\n      patch.start1 = start1 - precontext.length;\n      patch.start2 = start2 - precontext.length;\n      if (precontext !== '') {\n        patch.length1 = patch.length2 = precontext.length;\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, precontext));\n      }\n      while (bigpatch.diffs.length !== 0 &&\n             patch.length1 < patch_size - this.Patch_Margin) {\n        var diff_type = bigpatch.diffs[0][0];\n        var diff_text = bigpatch.diffs[0][1];\n        if (diff_type === DIFF_INSERT) {\n          // Insertions are harmless.\n          patch.length2 += diff_text.length;\n          start2 += diff_text.length;\n          patch.diffs.push(bigpatch.diffs.shift());\n          empty = false;\n        } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 &&\n                   patch.diffs[0][0] == DIFF_EQUAL &&\n                   diff_text.length > 2 * patch_size) {\n          // This is a large deletion.  Let it pass in one chunk.\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          empty = false;\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          bigpatch.diffs.shift();\n        } else {\n          // Deletion or equality.  Only take as much as we can stomach.\n          diff_text = diff_text.substring(0,\n              patch_size - patch.length1 - this.Patch_Margin);\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          if (diff_type === DIFF_EQUAL) {\n            patch.length2 += diff_text.length;\n            start2 += diff_text.length;\n          } else {\n            empty = false;\n          }\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          if (diff_text == bigpatch.diffs[0][1]) {\n            bigpatch.diffs.shift();\n          } else {\n            bigpatch.diffs[0][1] =\n                bigpatch.diffs[0][1].substring(diff_text.length);\n          }\n        }\n      }\n      // Compute the head context for the next patch.\n      precontext = this.diff_text2(patch.diffs);\n      precontext =\n          precontext.substring(precontext.length - this.Patch_Margin);\n      // Append the end context for this patch.\n      var postcontext = this.diff_text1(bigpatch.diffs)\n                            .substring(0, this.Patch_Margin);\n      if (postcontext !== '') {\n        patch.length1 += postcontext.length;\n        patch.length2 += postcontext.length;\n        if (patch.diffs.length !== 0 &&\n            patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n          patch.diffs[patch.diffs.length - 1][1] += postcontext;\n        } else {\n          patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, postcontext));\n        }\n      }\n      if (!empty) {\n        patches.splice(++x, 0, patch);\n      }\n    }\n  }\n};\n\n\n/**\n * Take a list of patches and return a textual representation.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} Text representation of patches.\n */\ndiff_match_patch.prototype.patch_toText = function(patches) {\n  var text = [];\n  for (var x = 0; x < patches.length; x++) {\n    text[x] = patches[x];\n  }\n  return text.join('');\n};\n\n\n/**\n * Parse a textual representation of patches and return a list of Patch objects.\n * @param {string} textline Text representation of patches.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.patch_fromText = function(textline) {\n  var patches = [];\n  if (!textline) {\n    return patches;\n  }\n  var text = textline.split('\\n');\n  var textPointer = 0;\n  var patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\n  while (textPointer < text.length) {\n    var m = text[textPointer].match(patchHeader);\n    if (!m) {\n      throw new Error('Invalid patch string: ' + text[textPointer]);\n    }\n    var patch = new diff_match_patch.patch_obj();\n    patches.push(patch);\n    patch.start1 = parseInt(m[1], 10);\n    if (m[2] === '') {\n      patch.start1--;\n      patch.length1 = 1;\n    } else if (m[2] == '0') {\n      patch.length1 = 0;\n    } else {\n      patch.start1--;\n      patch.length1 = parseInt(m[2], 10);\n    }\n\n    patch.start2 = parseInt(m[3], 10);\n    if (m[4] === '') {\n      patch.start2--;\n      patch.length2 = 1;\n    } else if (m[4] == '0') {\n      patch.length2 = 0;\n    } else {\n      patch.start2--;\n      patch.length2 = parseInt(m[4], 10);\n    }\n    textPointer++;\n\n    while (textPointer < text.length) {\n      var sign = text[textPointer].charAt(0);\n      try {\n        var line = decodeURI(text[textPointer].substring(1));\n      } catch (ex) {\n        // Malformed URI sequence.\n        throw new Error('Illegal escape in patch_fromText: ' + line);\n      }\n      if (sign == '-') {\n        // Deletion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_DELETE, line));\n      } else if (sign == '+') {\n        // Insertion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_INSERT, line));\n      } else if (sign == ' ') {\n        // Minor equality.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, line));\n      } else if (sign == '@') {\n        // Start of next patch.\n        break;\n      } else if (sign === '') {\n        // Blank line?  Whatever.\n      } else {\n        // WTF?\n        throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\n      }\n      textPointer++;\n    }\n  }\n  return patches;\n};\n\n\n/**\n * Class representing one patch operation.\n * @constructor\n */\ndiff_match_patch.patch_obj = function() {\n  /** @type {!Array.<!diff_match_patch.Diff>} */\n  this.diffs = [];\n  /** @type {?number} */\n  this.start1 = null;\n  /** @type {?number} */\n  this.start2 = null;\n  /** @type {number} */\n  this.length1 = 0;\n  /** @type {number} */\n  this.length2 = 0;\n};\n\n\n/**\n * Emulate GNU diff's format.\n * Header: @@ -382,8 +481,9 @@\n * Indices are printed as 1-based, not 0-based.\n * @return {string} The GNU diff string.\n */\ndiff_match_patch.patch_obj.prototype.toString = function() {\n  var coords1, coords2;\n  if (this.length1 === 0) {\n    coords1 = this.start1 + ',0';\n  } else if (this.length1 == 1) {\n    coords1 = this.start1 + 1;\n  } else {\n    coords1 = (this.start1 + 1) + ',' + this.length1;\n  }\n  if (this.length2 === 0) {\n    coords2 = this.start2 + ',0';\n  } else if (this.length2 == 1) {\n    coords2 = this.start2 + 1;\n  } else {\n    coords2 = (this.start2 + 1) + ',' + this.length2;\n  }\n  var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\\n'];\n  var op;\n  // Escape the body of the patch with %xx notation.\n  for (var x = 0; x < this.diffs.length; x++) {\n    switch (this.diffs[x][0]) {\n      case DIFF_INSERT:\n        op = '+';\n        break;\n      case DIFF_DELETE:\n        op = '-';\n        break;\n      case DIFF_EQUAL:\n        op = ' ';\n        break;\n    }\n    text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\\n';\n  }\n  return text.join('').replace(/%20/g, ' ');\n};\n\n\n// The following export code was added by @ForbesLindesay\nmodule.exports = diff_match_patch;\nmodule.exports['diff_match_patch'] = diff_match_patch;\nmodule.exports['DIFF_DELETE'] = DIFF_DELETE;\nmodule.exports['DIFF_INSERT'] = DIFF_INSERT;\nmodule.exports['DIFF_EQUAL'] = DIFF_EQUAL;","import {Path, PathSegment} from '@sanity/types'\nimport * as DMP from 'diff-match-patch'\n\nimport type {\n  SetIfMissingPatch,\n  InsertPatch,\n  InsertPosition,\n  SetPatch,\n  UnsetPatch,\n  DiffMatchPatch,\n} from '../types/patch'\n\nexport function setIfMissing(value: any, path: Path = []): SetIfMissingPatch {\n  return {\n    type: 'setIfMissing',\n    path,\n    value,\n  }\n}\n\n// eslint-disable-next-line new-cap\nconst dmp = new DMP.diff_match_patch()\n\nexport function diffMatchPatch(\n  currentValue: string,\n  nextValue: string,\n  path: Path = []\n): DiffMatchPatch {\n  const patch = dmp\n    .patch_make(currentValue, nextValue)\n    .map((_patch) => _patch.toString())\n    .join('')\n  return {type: 'diffMatchPatch', path, value: patch}\n}\n\nexport function insert(items: any[], position: InsertPosition, path: Path = []): InsertPatch {\n  return {\n    type: 'insert',\n    path,\n    position,\n    items,\n  }\n}\n\nexport function set(value: any, path: Path = []): SetPatch {\n  return {type: 'set', path, value}\n}\n\nexport function unset(path: Path = []): UnsetPatch {\n  return {type: 'unset', path}\n}\n\nexport function prefixPath<T extends {path: Path}>(patch: T, segment: PathSegment): T {\n  return {\n    ...patch,\n    path: [segment, ...patch.path],\n  }\n}\n","import {isEqual} from 'lodash'\nimport {Node, Element, Text, Descendant} from 'slate'\nimport {\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {PortableTextMemberSchemaTypes} from '../types/editor'\n\nconst EMPTY_MARKDEFS: PortableTextObject[] = []\n\ntype Partial<T> = {\n  [P in keyof T]?: T[P]\n}\n\nfunction keepObjectEquality(\n  object: PortableTextBlock | PortableTextChild,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild>\n) {\n  const value = keyMap[object._key]\n  if (value && isEqual(object, value)) {\n    return value\n  }\n  keyMap[object._key] = object\n  return object\n}\n\nexport function toSlateValue(\n  value: PortableTextBlock[] | undefined,\n  {schemaTypes}: {schemaTypes: PortableTextMemberSchemaTypes},\n  keyMap: Record<string, any> = {}\n): Descendant[] {\n  if (value && Array.isArray(value)) {\n    return value.map((block) => {\n      const {_type, _key, ...rest} = block\n      const voidChildren = [{_key: `${_key}-void-child`, _type: 'span', text: '', marks: []}]\n      const isPortableText = block && block._type === schemaTypes.block.name\n      if (isPortableText) {\n        const textBlock = block as PortableTextTextBlock\n        let hasInlines = false\n        const hasMissingStyle = typeof textBlock.style === 'undefined'\n        const hasMissingMarkDefs = typeof textBlock.markDefs === 'undefined'\n        const children = textBlock.children.map((child) => {\n          const {_type: cType, _key: cKey, ...cRest} = child\n          if (cType !== 'span') {\n            hasInlines = true\n            return keepObjectEquality(\n              {\n                _type: cType,\n                _key: cKey,\n                children: voidChildren,\n                value: cRest,\n                __inline: true,\n              },\n              keyMap\n            )\n          }\n          // Original object\n          return child\n        })\n        if (!hasMissingStyle && !hasMissingMarkDefs && !hasInlines && Element.isElement(block)) {\n          // Original object\n          return block\n        }\n        if (hasMissingStyle) {\n          rest.style = schemaTypes.styles[0].value\n        }\n        if (hasMissingMarkDefs) {\n          rest.markDefs = EMPTY_MARKDEFS\n        }\n        return keepObjectEquality({_type, _key, ...rest, children}, keyMap)\n      }\n      return keepObjectEquality(\n        {\n          _type,\n          _key,\n          children: voidChildren,\n          value: rest,\n        },\n        keyMap\n      )\n    }) as Descendant[]\n  }\n  return []\n}\n\nexport function fromSlateValue(\n  value: (Node | Partial<Node>)[],\n  textBlockType: string,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild> = {}\n): PortableTextBlock[] {\n  return value.map((block) => {\n    const {_key, _type} = block\n    if (!_key || !_type) {\n      throw new Error('Not a valid block')\n    }\n    if (_type === textBlockType && 'children' in block && Array.isArray(block.children) && _key) {\n      let hasInlines = false\n      const children = block.children.map((child) => {\n        const {_type: _cType} = child\n        if ('value' in child && _cType !== 'span') {\n          hasInlines = true\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const {value: v, _key: k, _type: t, __inline: _i, children: _c, ...rest} = child\n          return keepObjectEquality({...rest, ...v, _key: k as string, _type: t as string}, keyMap)\n        }\n        return child\n      })\n      if (!hasInlines) {\n        return block as PortableTextBlock // Original object\n      }\n      return keepObjectEquality({...block, children, _key, _type}, keyMap) as PortableTextBlock\n    }\n    const blockValue = 'value' in block && block.value\n    return keepObjectEquality(\n      {_key, _type, ...(typeof blockValue === 'object' ? blockValue : {})},\n      keyMap\n    ) as PortableTextBlock\n  })\n}\n\nexport function isEqualToEmptyEditor(\n  children: Descendant[] | PortableTextBlock[],\n  schemaTypes: PortableTextMemberSchemaTypes\n): boolean {\n  return (\n    children === undefined ||\n    (children && Array.isArray(children) && children.length === 0) ||\n    (children &&\n      Array.isArray(children) &&\n      children.length === 1 &&\n      Element.isElement(children[0]) &&\n      children[0]._type === schemaTypes.block.name &&\n      'style' in children[0] &&\n      children[0].style === schemaTypes.styles[0].value &&\n      !('listItem' in children[0]) &&\n      Array.isArray(children[0].children) &&\n      children[0].children.length === 1 &&\n      Text.isText(children[0].children[0]) &&\n      children[0].children[0]._type === 'span' &&\n      !children[0].children[0].marks?.join('') &&\n      children[0].children[0].text === '')\n  )\n}\n\nexport function findBlockAndIndexFromPath(\n  firstPathSegment: PathSegment,\n  children: (Node | Partial<Node>)[]\n): [Element | undefined, number | undefined] {\n  let blockIndex = -1\n  const isNumber = Number.isInteger(Number(firstPathSegment))\n  if (isNumber) {\n    blockIndex = Number(firstPathSegment)\n  } else if (children) {\n    blockIndex = children.findIndex(\n      (blk) => Element.isElement(blk) && isEqual({_key: blk._key}, firstPathSegment)\n    )\n  }\n  if (blockIndex > -1) {\n    return [children[blockIndex] as Element, blockIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function findChildAndIndexFromPath(\n  secondPathSegment: PathSegment,\n  block: Element\n): [Element | Text | undefined, number] {\n  let childIndex = -1\n  const isNumber = Number.isInteger(Number(secondPathSegment))\n  if (isNumber) {\n    childIndex = Number(secondPathSegment)\n  } else {\n    childIndex = block.children.findIndex((child) => isEqual({_key: child._key}, secondPathSegment))\n  }\n  if (childIndex > -1) {\n    return [block.children[childIndex] as Element | Text, childIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function getValueOrInitialValue(\n  value: unknown,\n  initialValue: PortableTextBlock[]\n): PortableTextBlock[] | undefined {\n  if (value && Array.isArray(value) && value.length > 0) {\n    return value\n  }\n  return initialValue\n}\n","import {Path, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {omitBy, isUndefined, get} from 'lodash'\nimport {\n  Descendant,\n  Editor,\n  InsertNodeOperation,\n  InsertTextOperation,\n  MergeNodeOperation,\n  MoveNodeOperation,\n  RemoveNodeOperation,\n  RemoveTextOperation,\n  SetNodeOperation,\n  SplitNodeOperation,\n} from 'slate'\nimport {set, insert, unset, diffMatchPatch, setIfMissing} from '../patch/PatchEvent'\nimport type {Patch, InsertPosition} from '../types/patch'\nimport {PatchFunctions} from '../editor/plugins/createWithPatches'\nimport {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {fromSlateValue} from './values'\nimport {debugWithName} from './debug'\n\nconst debug = debugWithName('operationToPatches')\n\nexport function createOperationToPatches(types: PortableTextMemberSchemaTypes): PatchFunctions {\n  const textBlockName = types.block.name\n  function insertTextPatch(\n    editor: Editor,\n    operation: InsertTextOperation,\n    beforeValue: Descendant[]\n  ) {\n    debug('Operation', JSON.stringify(operation, null, 2))\n    const block =\n      editor.isTextBlock(editor.children[operation.path[0]]) && editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const textChild =\n      editor.isTextBlock(block) &&\n      editor.isTextSpan(block.children[operation.path[1]]) &&\n      (block.children[operation.path[1]] as PortableTextSpan)\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [{_key: block._key}, 'children', {_key: textChild._key}, 'text']\n    const prevBlock = beforeValue[operation.path[0]]\n    const prevChild = editor.isTextBlock(prevBlock) && prevBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevChild) ? prevChild.text : ''\n    const patch = diffMatchPatch(prevText, textChild.text, path)\n    return patch.value.length ? [patch] : []\n  }\n\n  function removeTextPatch(\n    editor: Editor,\n    operation: RemoveTextOperation,\n    beforeValue: Descendant[]\n  ) {\n    const block = editor && editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const child = (editor.isTextBlock(block) && block.children[operation.path[1]]) || undefined\n    const textChild: PortableTextSpan | undefined = editor.isTextSpan(child) ? child : undefined\n    if (child && !textChild) {\n      throw new Error('Expected span')\n    }\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [{_key: block._key}, 'children', {_key: textChild._key}, 'text']\n    const beforeBlock = beforeValue[operation.path[0]]\n    const prevTextChild = editor.isTextBlock(beforeBlock) && beforeBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevTextChild) && prevTextChild.text\n    const patch = diffMatchPatch(prevText || '', textChild.text, path)\n    return patch.value ? [patch] : []\n  }\n\n  function setNodePatch(editor: Editor, operation: SetNodeOperation) {\n    if (operation.path.length === 1) {\n      const block = editor.children[operation.path[0]]\n      if (typeof block._key !== 'string') {\n        throw new Error('Expected block to have a _key')\n      }\n      const setNode = omitBy(\n        {...editor.children[operation.path[0]], ...operation.newProperties},\n        isUndefined\n      )\n      return [set(fromSlateValue([setNode], textBlockName)[0], [{_key: block._key}])]\n    } else if (operation.path.length === 2) {\n      const block = editor.children[operation.path[0]]\n      if (editor.isTextBlock(block)) {\n        const child = block.children[operation.path[1]]\n        if (child) {\n          const blockKey = block._key\n          const childKey = child._key\n          const patches: Patch[] = []\n          Object.keys(operation.newProperties).forEach((keyName) => {\n            const val = get(operation.newProperties, keyName)\n            patches.push(set(val, [{_key: blockKey}, 'children', {_key: childKey}, keyName]))\n          })\n          return patches\n        }\n        throw new Error('Could not find a valid child')\n      }\n      throw new Error('Could not find a valid block')\n    } else {\n      throw new Error(`Unexpected path encountered: ${JSON.stringify(operation.path)}`)\n    }\n  }\n\n  function insertNodePatch(\n    editor: Editor,\n    operation: InsertNodeOperation,\n    beforeValue: Descendant[]\n  ): Patch[] {\n    const block = beforeValue[operation.path[0]]\n    const isTextBlock = editor.isTextBlock(block)\n    if (operation.path.length === 1) {\n      const position = operation.path[0] === 0 ? 'before' : 'after'\n      const beforeBlock = beforeValue[operation.path[0] - 1]\n      const targetKey = operation.path[0] === 0 ? block?._key : beforeBlock?._key\n      if (targetKey) {\n        return [\n          insert([fromSlateValue([operation.node], textBlockName)[0]], position, [\n            {_key: targetKey},\n          ]),\n        ]\n      }\n      return [\n        setIfMissing(beforeValue, []),\n        insert([fromSlateValue([operation.node], textBlockName)[0]], 'before', [operation.path[0]]),\n      ]\n    } else if (isTextBlock && operation.path.length === 2 && editor.children[operation.path[0]]) {\n      const position =\n        block.children.length === 0 || !block.children[operation.path[1] - 1] ? 'before' : 'after'\n      const blk = fromSlateValue(\n        [\n          {\n            _key: 'bogus',\n            _type: textBlockName,\n            children: [operation.node as Descendant],\n          },\n        ],\n        textBlockName\n      )[0] as PortableTextTextBlock\n      const child = blk.children[0]\n      return [\n        insert([child], position, [\n          {_key: block._key},\n          'children',\n          block.children.length <= 1 || !block.children[operation.path[1] - 1]\n            ? 0\n            : {_key: block.children[operation.path[1] - 1]._key},\n        ]),\n      ]\n    }\n    debug('Something was inserted into a void block. Not producing editor patches.')\n    return []\n  }\n\n  function splitNodePatch(\n    editor: Editor,\n    operation: SplitNodeOperation,\n    beforeValue: Descendant[]\n  ) {\n    const patches: Patch[] = []\n    const splitBlock = editor.children[operation.path[0]]\n    if (!editor.isTextBlock(splitBlock)) {\n      throw new Error(\n        `Block with path ${JSON.stringify(\n          operation.path[0]\n        )} is not a text block and can't be split`\n      )\n    }\n    if (operation.path.length === 1) {\n      const oldBlock = beforeValue[operation.path[0]]\n      if (editor.isTextBlock(oldBlock)) {\n        const targetValue = fromSlateValue(\n          [editor.children[operation.path[0] + 1]],\n          textBlockName\n        )[0]\n        if (targetValue) {\n          patches.push(insert([targetValue], 'after', [{_key: splitBlock._key}]))\n          const spansToUnset = oldBlock.children.slice(operation.position)\n          spansToUnset.forEach((span) => {\n            const path = [{_key: oldBlock._key}, 'children', {_key: span._key}]\n            patches.push(unset(path))\n          })\n        }\n      }\n      return patches\n    }\n    if (operation.path.length === 2) {\n      const splitSpan = splitBlock.children[operation.path[1]]\n      if (editor.isTextSpan(splitSpan)) {\n        const targetSpans = (\n          fromSlateValue(\n            [\n              {\n                ...splitBlock,\n                children: splitBlock.children.slice(operation.path[1] + 1, operation.path[1] + 2),\n              } as Descendant,\n            ],\n            textBlockName\n          )[0] as PortableTextTextBlock\n        ).children\n\n        patches.push(\n          insert(targetSpans, 'after', [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n          ])\n        )\n        patches.push(\n          set(splitSpan.text, [{_key: splitBlock._key}, 'children', {_key: splitSpan._key}, 'text'])\n        )\n      }\n      return patches\n    }\n    return patches\n  }\n\n  function removeNodePatch(\n    editor: Editor,\n    operation: RemoveNodeOperation,\n    beforeValue: Descendant[]\n  ) {\n    const block = beforeValue[operation.path[0]]\n    if (operation.path.length === 1) {\n      // Remove a single block\n      if (block && block._key) {\n        return [unset([{_key: block._key}])]\n      }\n      throw new Error('Block not found')\n    } else if (editor.isTextBlock(block) && operation.path.length === 2) {\n      const spanToRemove =\n        editor.isTextBlock(block) && block.children && block.children[operation.path[1]]\n      if (spanToRemove) {\n        return [unset([{_key: block._key}, 'children', {_key: spanToRemove._key}])]\n      }\n      debug('Span not found in editor trying to remove node')\n      return []\n    } else {\n      debug('Not creating patch inside object block')\n      return []\n    }\n  }\n\n  function mergeNodePatch(\n    editor: Editor,\n    operation: MergeNodeOperation,\n    beforeValue: Descendant[]\n  ) {\n    const patches: Patch[] = []\n\n    const block = beforeValue[operation.path[0]]\n    const targetBlock = editor.children[operation.path[0]]\n\n    if (operation.path.length === 1) {\n      if (block?._key) {\n        const newBlock = fromSlateValue([editor.children[operation.path[0] - 1]], textBlockName)[0]\n        patches.push(set(newBlock, [{_key: newBlock._key}]))\n        patches.push(unset([{_key: block._key}]))\n      } else {\n        throw new Error('Target key not found!')\n      }\n    } else if (operation.path.length === 2 && editor.isTextBlock(targetBlock)) {\n      const mergedSpan =\n        (editor.isTextBlock(block) && block.children[operation.path[1]]) || undefined\n      const targetSpan = targetBlock.children[operation.path[1] - 1]\n      if (editor.isTextSpan(targetSpan)) {\n        // Set the merged span with it's new value\n        patches.push(\n          set(targetSpan.text, [{_key: block._key}, 'children', {_key: targetSpan._key}, 'text'])\n        )\n        if (mergedSpan) {\n          patches.push(unset([{_key: block._key}, 'children', {_key: mergedSpan._key}]))\n        }\n      }\n    } else {\n      debug(\"Void nodes can't be merged, not creating any patches\")\n    }\n    return patches\n  }\n\n  function moveNodePatch(editor: Editor, operation: MoveNodeOperation, beforeValue: Descendant[]) {\n    const patches: Patch[] = []\n    const block = beforeValue[operation.path[0]]\n    const targetBlock = beforeValue[operation.newPath[0]]\n    if (operation.path.length === 1) {\n      const position: InsertPosition = operation.path[0] > operation.newPath[0] ? 'before' : 'after'\n      patches.push(unset([{_key: block._key}]))\n      patches.push(\n        insert([fromSlateValue([block], textBlockName)[0]], position, [{_key: targetBlock._key}])\n      )\n    } else if (\n      operation.path.length === 2 &&\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(targetBlock)\n    ) {\n      const child = block.children[operation.path[1]]\n      const targetChild = targetBlock.children[operation.newPath[1]]\n      const position = operation.newPath[1] === targetBlock.children.length ? 'after' : 'before'\n      const childToInsert = (fromSlateValue([block], textBlockName)[0] as PortableTextTextBlock)\n        .children[operation.path[1]]\n      patches.push(unset([{_key: block._key}, 'children', {_key: child._key}]))\n      patches.push(\n        insert([childToInsert], position, [\n          {_key: targetBlock._key},\n          'children',\n          {_key: targetChild._key},\n        ])\n      )\n    }\n    return patches\n  }\n\n  return {\n    insertNodePatch,\n    insertTextPatch,\n    mergeNodePatch,\n    moveNodePatch,\n    removeNodePatch,\n    removeTextPatch,\n    setNodePatch,\n    splitNodePatch,\n  }\n}\n","import {isEqual} from 'lodash'\nimport {Editor, Point, Path as SlatePath, Element} from 'slate'\nimport {isKeySegment, Path} from '@sanity/types'\nimport {EditorSelectionPoint, PortableTextMemberSchemaTypes} from '../types/editor'\nimport {ObjectWithKeyAndType} from './ranges'\n\nexport function createKeyedPath(\n  point: Point,\n  value: ObjectWithKeyAndType[] | undefined,\n  types: PortableTextMemberSchemaTypes\n): Path | null {\n  const blockPath = [point.path[0]]\n  if (!value) {\n    return null\n  }\n  const block = value[blockPath[0]]\n  if (!block) {\n    return null\n  }\n  const keyedBlockPath = [{_key: block._key}]\n  if (block._type !== types.block.name) {\n    return keyedBlockPath as Path\n  }\n  let keyedChildPath\n  const childPath = point.path.slice(0, 2)\n  const child = Array.isArray(block.children) && block.children[childPath[1]]\n  if (child) {\n    keyedChildPath = ['children', {_key: child._key}]\n  }\n  return (keyedChildPath ? [...keyedBlockPath, ...keyedChildPath] : keyedBlockPath) as Path\n}\n\nexport function createArrayedPath(point: EditorSelectionPoint, editor: Editor): SlatePath {\n  if (!editor) {\n    return []\n  }\n  const [block, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) => isKeySegment(point.path[0]) && n._key === point.path[0]._key,\n    })\n  )[0] || [undefined, undefined]\n  if (!block || !Element.isElement(block)) {\n    return []\n  }\n  if (editor.isVoid(block)) {\n    return blockPath\n  }\n  const childPath = [point.path[2]]\n  const childIndex = block.children.findIndex((child) => isEqual([{_key: child._key}], childPath))\n  if (childIndex >= 0 && block.children[childIndex]) {\n    const child = block.children[childIndex]\n    if (Element.isElement(child) && editor.isVoid(child)) {\n      return blockPath.concat(childIndex).concat(0)\n    }\n    return blockPath.concat(childIndex)\n  }\n  return blockPath\n}\n","import {BaseRange, Editor, Range} from 'slate'\nimport {EditorSelection, EditorSelectionPoint, PortableTextMemberSchemaTypes} from '../types/editor'\nimport {createArrayedPath, createKeyedPath} from './paths'\n\nexport interface ObjectWithKeyAndType {\n  _key: string\n  _type: string\n  children?: ObjectWithKeyAndType[]\n}\n\nexport function toPortableTextRange(\n  value: ObjectWithKeyAndType[] | undefined,\n  range: BaseRange | Partial<BaseRange> | null,\n  types: PortableTextMemberSchemaTypes\n): EditorSelection {\n  if (!range) {\n    return null\n  }\n  let anchor: EditorSelectionPoint | null = null\n  let focus: EditorSelectionPoint | null = null\n  const anchorPath = range.anchor && createKeyedPath(range.anchor, value, types)\n  if (anchorPath && range.anchor) {\n    anchor = {\n      path: anchorPath,\n      offset: range.anchor.offset,\n    }\n  }\n  const focusPath = range.focus && createKeyedPath(range.focus, value, types)\n  if (focusPath && range.focus) {\n    focus = {\n      path: focusPath,\n      offset: range.focus.offset,\n    }\n  }\n  return anchor && focus ? {anchor, focus} : null\n}\n\nexport function toSlateRange(selection: EditorSelection, editor: Editor): Range | null {\n  if (!selection || !editor) {\n    return null\n  }\n  const anchor = {\n    path: createArrayedPath(selection.anchor, editor),\n    offset: selection.anchor.offset,\n  }\n  const focus = {\n    path: createArrayedPath(selection.focus, editor),\n    offset: selection.focus.offset,\n  }\n  const range = anchor && focus ? {anchor, focus} : null\n  return range\n}\n","import {Text, Range, Transforms, Editor, Element as SlateElement, Node} from 'slate'\nimport {\n  ObjectSchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  SchemaType,\n} from '@sanity/types'\nimport {ReactEditor} from '@sanity/slate-react'\nimport {DOMNode} from '@sanity/slate-react/dist/utils/dom'\nimport {\n  EditableAPIDeleteOptions,\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {toSlateValue, fromSlateValue} from '../../utils/values'\nimport {toSlateRange, toPortableTextRange} from '../../utils/ranges'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nimport {debugWithName} from '../../utils/debug'\nimport {KEY_TO_VALUE_ELEMENT, SLATE_TO_PORTABLE_TEXT_RANGE} from '../../utils/weakMaps'\n\nconst debug = debugWithName('API:editable')\n\nexport function createWithEditableAPI(\n  portableTextEditor: PortableTextEditor,\n  types: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string\n) {\n  return function withEditableAPI(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    portableTextEditor.setEditable({\n      focus: (): void => {\n        // Make a selection if missing\n        if (!editor.selection) {\n          const point = {path: [0, 0], offset: 0}\n          Transforms.select(editor, {focus: point, anchor: point})\n          editor.onChange()\n        }\n        ReactEditor.focus(editor)\n      },\n      blur: (): void => {\n        ReactEditor.blur(editor)\n      },\n      toggleMark: (mark: string): void => {\n        editor.pteToggleMark(mark)\n      },\n      toggleList: (listStyle: string): void => {\n        editor.pteToggleListItem(listStyle)\n      },\n      toggleBlockStyle: (blockStyle: string): void => {\n        editor.pteToggleBlockStyle(blockStyle)\n      },\n      isMarkActive: (mark: string): boolean => {\n        // Try/catch this, as Slate may error because the selection is currently wrong\n        // TODO: catch only relevant error from Slate\n        try {\n          return editor.pteIsMarkActive(mark)\n        } catch (err) {\n          console.warn(err)\n          return false\n        }\n      },\n      marks: (): string[] => {\n        return (\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        )\n      },\n      undo: (): void => editor.undo(),\n      redo: (): void => editor.redo(),\n      select: (selection: EditorSelection): void => {\n        const slateSelection = toSlateRange(selection, editor)\n        if (slateSelection) {\n          Transforms.select(editor, slateSelection)\n        } else {\n          Transforms.deselect(editor)\n        }\n        editor.onChange()\n      },\n      focusBlock: (): PortableTextBlock | undefined => {\n        if (editor.selection) {\n          // Try/catch this, as Slate may error because the selection is currently wrong\n          // TODO: catch only relevant error from Slate\n          try {\n            const [block] = Array.from(\n              Editor.nodes(editor, {\n                at: editor.selection.focus,\n                match: (n) => Editor.isBlock(editor, n),\n              })\n            )[0] || [undefined]\n            if (block) {\n              return fromSlateValue([block], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0]\n            }\n          } catch (err) {\n            return undefined\n          }\n        }\n        return undefined\n      },\n      focusChild: (): PortableTextChild | undefined => {\n        if (editor.selection) {\n          try {\n            const [node] = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: editor.selection.focus,\n                match: (n) => n._type !== undefined,\n                voids: true,\n              })\n            )[0] || [undefined]\n            if (node && !Editor.isBlock(editor, node)) {\n              const pseudoBlock: PortableTextBlock = {\n                _key: 'pseudo',\n                _type: types.block.name,\n                children: [node],\n              }\n              const blocks = fromSlateValue(\n                [pseudoBlock],\n                types.block.name,\n                KEY_TO_VALUE_ELEMENT.get(editor)\n              )\n              if (editor.isTextBlock(blocks[0])) {\n                return blocks[0].children[0]\n              }\n            }\n          } catch (err) {\n            return undefined\n          }\n        }\n        return undefined\n      },\n      insertChild: (type: SchemaType, value?: {[prop: string]: any}): Path => {\n        if (!editor.selection) {\n          throw new Error('The editor has no selection')\n        }\n        const [focusBlock] = Array.from(\n          Editor.nodes(editor, {\n            at: editor.selection.focus,\n            match: (n) => Editor.isBlock(editor, n),\n          })\n        )[0] || [undefined]\n        if (!focusBlock) {\n          throw new Error('No focus block')\n        }\n        if (focusBlock && Editor.isVoid(editor, focusBlock)) {\n          throw new Error(\"Can't insert childs into block objects\")\n        }\n        const block = toSlateValue(\n          [\n            {\n              _key: keyGenerator(),\n              _type: types.block.name,\n              children: [\n                {\n                  _key: keyGenerator(),\n                  _type: type.name,\n                  ...(value ? value : {}),\n                },\n              ],\n            },\n          ],\n          portableTextEditor\n        )[0] as unknown as SlateElement\n        const child = block.children[0]\n        Editor.insertNode(editor, child as Node)\n        editor.onChange()\n        return (\n          toPortableTextRange(\n            fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)),\n            editor.selection,\n            types\n          )?.focus.path || []\n        )\n      },\n      insertBlock: (type: SchemaType, value?: {[prop: string]: any}): Path => {\n        if (!editor.selection) {\n          throw new Error('The editor has no selection')\n        }\n        const block = toSlateValue(\n          [\n            {\n              _key: keyGenerator(),\n              _type: type.name,\n              ...(value ? value : {}),\n            },\n          ],\n          portableTextEditor\n        )[0] as unknown as Node\n        Editor.insertNode(editor, block)\n        editor.onChange()\n        return (\n          toPortableTextRange(\n            fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)),\n            editor.selection,\n            types\n          )?.focus.path || []\n        )\n      },\n      hasBlockStyle: (style: string): boolean => {\n        try {\n          return editor.pteHasBlockStyle(style)\n        } catch (err) {\n          // This is fine.\n          // debug(err)\n          return false\n        }\n      },\n      hasListStyle: (listStyle: string): boolean => {\n        try {\n          return editor.pteHasListStyle(listStyle)\n        } catch (err) {\n          // This is fine.\n          // debug(err)\n          return false\n        }\n      },\n      isVoid: (element: PortableTextBlock | PortableTextChild) => {\n        return ![types.block.name, types.span.name].includes(element._type)\n      },\n      findByPath: (\n        path: Path\n      ): [PortableTextBlock | PortableTextChild | undefined, Path | undefined] => {\n        const slatePath = toSlateRange(\n          {focus: {path, offset: 0}, anchor: {path, offset: 0}},\n          editor\n        )\n        if (slatePath) {\n          const [block, blockPath] = Editor.node(editor, slatePath.focus.path.slice(0, 1))\n          if (block && blockPath && typeof block._key === 'string') {\n            if (path.length === 1 && slatePath.focus.path.length === 1) {\n              return [fromSlateValue([block], types.block.name)[0], [{_key: block._key}]]\n            }\n            const ptBlock = fromSlateValue(\n              [block],\n              types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor)\n            )[0]\n            if (editor.isTextBlock(ptBlock)) {\n              const ptChild = ptBlock.children[slatePath.focus.path[1]]\n              if (ptChild) {\n                return [ptChild, [{_key: block._key}, 'children', {_key: ptChild._key}]]\n              }\n            }\n          }\n        }\n        return [undefined, undefined]\n      },\n      findDOMNode: (element: PortableTextBlock | PortableTextChild): DOMNode | undefined => {\n        let node: DOMNode | undefined\n        try {\n          const [item] = Array.from(\n            Editor.nodes(editor, {\n              at: [],\n              match: (n) => n._key === element._key,\n            }) || []\n          )[0] || [undefined]\n          node = ReactEditor.toDOMNode(editor, item)\n        } catch (err) {\n          // Nothing\n        }\n        return node\n      },\n      activeAnnotations: (): PortableTextObject[] => {\n        if (!editor.selection || editor.selection.focus.path.length < 2) {\n          return []\n        }\n        try {\n          const activeAnnotations: PortableTextObject[] = []\n          const spans = Editor.nodes(editor, {\n            at: editor.selection,\n            match: (node) =>\n              Text.isText(node) &&\n              node.marks !== undefined &&\n              Array.isArray(node.marks) &&\n              node.marks.length > 0,\n          })\n          for (const [span, path] of spans) {\n            const [block] = Editor.node(editor, path, {depth: 1})\n            if (editor.isTextBlock(block)) {\n              block.markDefs?.forEach((def) => {\n                if (\n                  Text.isText(span) &&\n                  span.marks &&\n                  Array.isArray(span.marks) &&\n                  span.marks.includes(def._key)\n                ) {\n                  activeAnnotations.push(def)\n                }\n              })\n            }\n          }\n          return activeAnnotations\n        } catch (err) {\n          return []\n        }\n      },\n      addAnnotation: (\n        type: ObjectSchemaType,\n        value?: {[prop: string]: unknown}\n      ): {spanPath: Path; markDefPath: Path} | undefined => {\n        const {selection} = editor\n        if (selection) {\n          const [block] = Editor.node(editor, selection.focus, {depth: 1})\n          if (SlateElement.isElement(block) && block._type === types.block.name) {\n            const annotationKey = keyGenerator()\n            if (editor.isTextBlock(block)) {\n              Transforms.setNodes(\n                editor,\n                {\n                  markDefs: [\n                    ...(block.markDefs || []),\n                    {_type: type.name, _key: annotationKey, ...value} as PortableTextObject,\n                  ],\n                },\n                {at: selection.focus}\n              )\n              editor.onChange()\n              if (Range.isCollapsed(selection)) {\n                editor.pteExpandToWord()\n                editor.onChange()\n              }\n              const [textNode] = Editor.node(editor, selection.focus, {depth: 2})\n              if (editor.selection) {\n                Editor.withoutNormalizing(editor, () => {\n                  // Split if needed\n                  Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n                  if (editor.selection && Text.isText(textNode)) {\n                    Transforms.setNodes(\n                      editor,\n                      {\n                        marks: [...((textNode.marks || []) as string[]), annotationKey],\n                      },\n                      {\n                        at: editor.selection,\n                        match: (n) => n._type === types.span.name,\n                      }\n                    )\n                    editor.onChange()\n                  }\n                })\n                Editor.normalize(editor)\n                editor.onChange()\n                const newSelection = toPortableTextRange(\n                  fromSlateValue(\n                    editor.children,\n                    types.block.name,\n                    KEY_TO_VALUE_ELEMENT.get(editor)\n                  ),\n                  editor.selection,\n                  types\n                )\n                // eslint-disable-next-line max-depth\n                if (newSelection && typeof block._key === 'string') {\n                  // Insert an empty string to continue writing non-annotated text\n                  Editor.withoutNormalizing(editor, () => {\n                    if (editor.selection) {\n                      Transforms.insertNodes(\n                        editor,\n                        [{_type: 'span', text: '', marks: [], _key: keyGenerator()}],\n                        {\n                          at: Range.end(editor.selection),\n                        }\n                      )\n                      editor.onChange()\n                    }\n                  })\n                  return {\n                    spanPath: newSelection.focus.path,\n                    markDefPath: [{_key: block._key}, 'markDefs', {_key: annotationKey}],\n                  }\n                }\n              }\n            }\n          }\n        }\n        return undefined\n      },\n      delete: (selection: EditorSelection, options?: EditableAPIDeleteOptions): void => {\n        if (selection) {\n          const range = toSlateRange(selection, editor)\n          if (range) {\n            if (!options?.mode || options?.mode === 'selected') {\n              debug(`Deleting content in selection`)\n              Transforms.delete(editor, {\n                at: range,\n                hanging: true,\n                voids: true,\n              })\n              editor.onChange()\n              return\n            }\n            if (options?.mode === 'blocks') {\n              debug(`Deleting blocks touched by selection`)\n            } else {\n              debug(`Deleting children touched by selection`)\n            }\n            const nodes = Editor.nodes(editor, {\n              at: range,\n              match: (node) => {\n                if (options?.mode === 'blocks') {\n                  return (\n                    editor.isTextBlock(node) ||\n                    (!editor.isTextBlock(node) && SlateElement.isElement(node))\n                  )\n                }\n                return (\n                  node._type === types.span.name || // Text children\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node)) // inline blocks\n                )\n              },\n            })\n            const nodeAndPaths = [...nodes]\n            nodeAndPaths.forEach(([, p]) => {\n              Transforms.removeNodes(editor, {\n                at: p,\n                voids: true,\n                hanging: true,\n              })\n            })\n            editor.onChange()\n          }\n        }\n      },\n      removeAnnotation: (type: ObjectSchemaType): void => {\n        let {selection} = editor\n        debug('Removing annotation', type)\n        if (selection) {\n          // Select the whole annotation if collapsed\n          if (Range.isCollapsed(selection)) {\n            const [node, nodePath] = Editor.node(editor, selection, {depth: 2})\n            if (Text.isText(node) && node.marks && typeof node.text === 'string') {\n              Transforms.select(editor, nodePath)\n              selection = editor.selection\n            }\n          }\n          // Do this without normalization or span references will be unstable!\n          Editor.withoutNormalizing(editor, () => {\n            if (selection && Range.isExpanded(selection)) {\n              selection = editor.selection\n              if (!selection) {\n                return\n              }\n              // Split the span first\n              Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n              editor.onChange()\n\n              // Everything in the selection which has marks\n              const spans = [\n                ...Editor.nodes(editor, {\n                  at: selection,\n                  match: (node) =>\n                    Text.isText(node) &&\n                    node.marks !== undefined &&\n                    Array.isArray(node.marks) &&\n                    node.marks.length > 0,\n                }),\n              ]\n              spans.forEach(([span, path]) => {\n                const [block] = Editor.node(editor, path, {depth: 1})\n                if (editor.isTextBlock(block)) {\n                  block.markDefs\n                    ?.filter((def) => def._type === type.name)\n                    .forEach((def) => {\n                      if (\n                        Text.isText(span) &&\n                        Array.isArray(span.marks) &&\n                        span.marks.includes(def._key)\n                      ) {\n                        const newMarks = [...(span.marks || []).filter((mark) => mark !== def._key)]\n                        Transforms.setNodes(\n                          editor,\n                          {\n                            marks: newMarks,\n                          },\n                          {at: path, voids: false, split: false}\n                        )\n                      }\n                    })\n                }\n              })\n            }\n          })\n          Editor.normalize(editor)\n          editor.onChange()\n        }\n      },\n      getSelection: (): EditorSelection | null => {\n        let ptRange: EditorSelection = null\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n          if (existing) {\n            return existing\n          }\n          ptRange = toPortableTextRange(\n            fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)),\n            editor.selection,\n            types\n          )\n          SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n        }\n        return ptRange\n      },\n      getValue: () => {\n        return fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))\n      },\n      isCollapsedSelection: () => {\n        return !!editor.selection && Range.isCollapsed(editor.selection)\n      },\n      isExpandedSelection: () => {\n        return !!editor.selection && Range.isExpanded(editor.selection)\n      },\n      insertBreak: () => {\n        editor.insertBreak()\n        editor.onChange()\n      },\n    })\n    return editor\n  }\n}\n","import {PortableTextSlateEditor} from '../../types/editor'\n\n/**\n * This plugin makes sure that the PTE maxBlocks prop is respected\n *\n */\nexport function createWithMaxBlocks(maxBlocks: number) {\n  return function withMaxBlocks(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    const {apply} = editor\n    editor.apply = (operation) => {\n      const rows = maxBlocks\n      if (rows > 0 && editor.children.length >= rows) {\n        if (\n          (operation.type === 'insert_node' || operation.type === 'split_node') &&\n          operation.path.length === 1\n        ) {\n          return\n        }\n      }\n      apply(operation)\n    }\n    return editor\n  }\n}\n","import {Editor} from 'slate'\n\nexport const PRESERVE_KEYS: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withPreserveKeys(editor: Editor, fn: () => void): void {\n  PRESERVE_KEYS.set(editor, true)\n  fn()\n  PRESERVE_KEYS.set(editor, false)\n}\n\nexport function isPreservingKeys(editor: Editor): boolean | undefined {\n  return PRESERVE_KEYS.get(editor)\n}\n","import {Element, Transforms, Node, Editor} from 'slate'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\nimport {isPreservingKeys, PRESERVE_KEYS} from '../../utils/withPreserveKeys'\n\n/**\n * This plugin makes sure that every new node in the editor get a new _key prop when created\n *\n */\nexport function createWithObjectKeys(\n  schemaTypes: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string\n) {\n  return function withKeys(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    PRESERVE_KEYS.set(editor, false)\n    const {apply, normalizeNode} = editor\n    editor.apply = (operation) => {\n      if (operation.type === 'split_node') {\n        operation.properties = {\n          ...operation.properties,\n          _key: keyGenerator(),\n        }\n      }\n      if (operation.type === 'insert_node') {\n        // Must be given a new key or adding/removing marks while typing gets in trouble (duped keys)!\n        const withNewKey = !isPreservingKeys(editor) || !('_key' in operation.node)\n        if (!Editor.isEditor(operation.node)) {\n          operation.node = {\n            ...operation.node,\n            ...(withNewKey ? {_key: keyGenerator()} : {}),\n          }\n        }\n      }\n      apply(operation)\n    }\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (Element.isElement(node) && node._type === schemaTypes.block.name) {\n        // Set key on block itself\n        if (!node._key) {\n          Transforms.setNodes(editor, {_key: keyGenerator()}, {at: path})\n        }\n        // Set keys on it's children\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (!child._key) {\n            Transforms.setNodes(editor, {_key: keyGenerator()}, {at: childPath})\n            return\n          }\n        }\n      }\n      // Do the original `normalizeNode` to enforce other constraints.\n      normalizeNode(entry)\n    }\n\n    return editor\n  }\n}\n","import {Editor} from 'slate'\n\nexport const PATCHING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withoutPatching(editor: Editor, fn: () => void): void {\n  const prev = isPatching(editor)\n  PATCHING.set(editor, false)\n  fn()\n  PATCHING.set(editor, prev)\n}\n\nexport function isPatching(editor: Editor): boolean | undefined {\n  return PATCHING.get(editor)\n}\n","export const BEFORE = 'before'\nexport const AFTER = 'after'\n\nexport default function insert(array: any[], position: string, index: number, ...args: any[]) {\n  if (position !== BEFORE && position !== AFTER) {\n    throw new Error(`Invalid position \"${position}\", must be either ${BEFORE} or ${AFTER}`)\n  }\n\n  const items = flatten(...args)\n\n  if (array.length === 0) {\n    return items\n  }\n\n  const len = array.length\n  const idx = Math.abs((len + index) % len) % len\n\n  const normalizedIdx = position === 'after' ? idx + 1 : idx\n\n  const copy = array.slice()\n  copy.splice(normalizedIdx, 0, ...flatten(items))\n  return copy\n}\n\nfunction flatten(...values: any[]) {\n  return values.reduce((prev, item) => prev.concat(item), [])\n}\n","import {PathSegment} from '@sanity/types'\nimport {findIndex} from 'lodash'\nimport applyPatch from './applyPatch'\nimport insert from './arrayInsert'\n\nconst hasOwn = Object.prototype.hasOwnProperty.call.bind(Object.prototype.hasOwnProperty)\n\nfunction move(arr: any[], from: number, to: any) {\n  const nextValue = arr.slice()\n  const val = nextValue[from]\n  nextValue.splice(from, 1)\n  nextValue.splice(to, 0, val)\n  return nextValue\n}\n\nfunction findTargetIndex(array: any[], pathSegment: PathSegment) {\n  if (typeof pathSegment === 'number') {\n    return pathSegment\n  }\n  const index = findIndex(array, pathSegment)\n  return index === -1 ? false : index\n}\n\nexport default function apply(\n  value: any,\n  patch: {type: any; path: any; value: any; position: any; items: any}\n) {\n  const nextValue = value.slice() // make a copy for internal mutation\n\n  if (patch.path.length === 0) {\n    // its directed to me\n    if (patch.type === 'setIfMissing') {\n      if (!Array.isArray(patch.value)) {\n        // eslint-disable-line max-depth\n        throw new Error('Cannot set value of an array to a non-array')\n      }\n      return value === undefined ? patch.value : value\n    } else if (patch.type === 'set') {\n      if (!Array.isArray(patch.value)) {\n        // eslint-disable-line max-depth\n        throw new Error('Cannot set value of an array to a non-array')\n      }\n      return patch.value\n    } else if (patch.type === 'unset') {\n      return undefined\n    } else if (patch.type === 'move') {\n      if (!patch.value || !hasOwn(patch.value, 'from') || !hasOwn(patch.value, 'to')) {\n        // eslint-disable-line max-depth\n        throw new Error(\n          `Invalid value of 'move' patch. Expected a value with \"from\" and \"to\" indexes, instead got: ${JSON.stringify(\n            patch.value\n          )}`\n        )\n      }\n      return move(nextValue, patch.value.from, patch.value.to)\n    }\n    throw new Error(`Invalid array operation: ${patch.type}`)\n  }\n\n  const [head, ...tail] = patch.path\n\n  const index = findTargetIndex(value, head)\n\n  // If the given selector could not be found, return as-is\n  if (index === false) {\n    return nextValue\n  }\n\n  if (tail.length === 0) {\n    if (patch.type === 'insert') {\n      const {position, items} = patch\n      return insert(value, position, index, items)\n    } else if (patch.type === 'unset') {\n      if (typeof index !== 'number') {\n        throw new Error(`Expected array index to be a number, instead got \"${index}\"`)\n      }\n      nextValue.splice(index, 1)\n      return nextValue\n    }\n  }\n\n  // The patch is not directed to me\n  nextValue[index] = applyPatch(nextValue[index], {\n    ...patch,\n    path: tail,\n  })\n  return nextValue\n}\n","import {omit, clone, isObject} from 'lodash'\nimport applyPatch from './applyPatch'\n\nexport default function apply(value: any, patch: {type: any; path: any; value: any}) {\n  const nextValue = clone(value)\n  if (patch.path.length === 0) {\n    // its directed to me\n    if (patch.type === 'set') {\n      if (!isObject(patch.value)) {\n        // eslint-disable-line max-depth\n        throw new Error('Cannot set value of an object to a non-object')\n      }\n      return patch.value\n    } else if (patch.type === 'unset') {\n      return undefined\n    } else if (patch.type === 'setIfMissing') {\n      // console.log('IS IT missing?', value)\n      return value === undefined ? patch.value : value\n    }\n    throw new Error(`Invalid object operation: ${patch.type}`)\n  }\n\n  // The patch is not directed to me\n  const [head, ...tail] = patch.path\n  if (typeof head !== 'string') {\n    throw new Error(`Expected field name to be a string, instad got: ${head}`)\n  }\n\n  if (tail.length === 0 && patch.type === 'unset') {\n    return omit(nextValue, head)\n  }\n\n  nextValue[head] = applyPatch(nextValue[head], {\n    ...patch,\n    path: tail,\n  })\n  return nextValue\n}\n","const OPERATIONS: Record<string, any> = {\n  replace(_currentValue: any, nextValue: any) {\n    return nextValue\n  },\n  set(_currentValue: any, nextValue: any) {\n    return nextValue\n  },\n  setIfMissing(currentValue: any, nextValue: any) {\n    return currentValue === undefined ? nextValue : currentValue\n  },\n  unset(_currentValue: any, _nextValue: any) {\n    return undefined\n  },\n  inc(currentValue: any, nextValue: any) {\n    return currentValue + nextValue\n  },\n  dec(currentValue: any, nextValue: any) {\n    return currentValue - nextValue\n  },\n}\n\nconst SUPPORTED_PATCH_TYPES = Object.keys(OPERATIONS)\n\nexport default function apply(value: any, patch: any) {\n  if (!SUPPORTED_PATCH_TYPES.includes(patch.type)) {\n    throw new Error(\n      `Received patch of unsupported type: \"${JSON.stringify(\n        patch.type\n      )}\" for primitives. This is most likely a bug.`\n    )\n  }\n\n  if (patch.path.length > 0) {\n    throw new Error(\n      `Cannot apply deep operations on primitive values. Received patch with type \"${\n        patch.type\n      }\" and path \"${patch.path\n        .map((path: any) => JSON.stringify(path))\n        .join('.')} that targeted the value \"${JSON.stringify(value)}\"`\n    )\n  }\n  return OPERATIONS[patch.type](value, patch.value)\n}\n","import * as DMP from 'diff-match-patch'\n\n// eslint-disable-next-line new-cap\nconst dmp = new DMP.diff_match_patch()\n\ntype fn = (oldVal: any, newVal: any) => any\nconst OPERATIONS: Record<string, fn> = {\n  replace(currentValue: any, nextValue: any) {\n    return nextValue\n  },\n  set(currentValue: any, nextValue: any) {\n    return nextValue\n  },\n  setIfMissing(currentValue: undefined, nextValue: any) {\n    return currentValue === undefined ? nextValue : currentValue\n  },\n  unset(currentValue: any, nextValue: any) {\n    return undefined\n  },\n  diffMatchPatch(currentValue: string, nextValue: string) {\n    return dmp.patch_apply(dmp.patch_fromText(nextValue), currentValue)[0]\n  },\n}\n\nconst SUPPORTED_PATCH_TYPES = Object.keys(OPERATIONS)\n\nexport default function apply(\n  value: string,\n  patch: {type: string; path: any[]; value: any}\n): string {\n  if (!SUPPORTED_PATCH_TYPES.includes(patch.type)) {\n    throw new Error(\n      `Received patch of unsupported type: \"${JSON.stringify(\n        patch.type\n      )}\" for string. This is most likely a bug.`\n    )\n  }\n\n  if (patch.path.length > 0) {\n    throw new Error(\n      `Cannot apply deep operations on string values. Received patch with type \"${\n        patch.type\n      }\" and path \"${patch.path.join('.')} that targeted the value \"${JSON.stringify(value)}\"`\n    )\n  }\n  const func = OPERATIONS[patch.type]\n  if (func) {\n    return func(value, patch.value)\n  }\n  throw new Error('Unknown patch type')\n}\n","import {isObject, isString} from 'lodash'\nimport applyArrayPatch from './array'\nimport applyObjectPatch from './object'\nimport applyPrimitivePatch from './primitive'\nimport applyStringPatch from './string'\n\nexport function applyAll(value: any, patches: any[]) {\n  return patches.reduce(_apply, value)\n}\n\nfunction applyPatch(value: string, patch: {type: string; path: any[]; value: any}) {\n  if (Array.isArray(value)) {\n    return applyArrayPatch(value, patch as any)\n  }\n  if (isString(value)) {\n    return applyStringPatch(value, patch)\n  }\n  if (isObject(value)) {\n    return applyObjectPatch(value, patch)\n  }\n  return applyPrimitivePatch(value, patch)\n}\n\nexport default function _apply(value: string, patch: {type: string; path: any[]; value: any}) {\n  const res = applyPatch(value, patch)\n  // console.log('applyPatch(%o, %o) : %o (noop? %o)', value, patch, res, value === res)\n  return res\n}\n","/* eslint-disable max-statements */\nimport {Editor, Transforms, Element, Path as SlatePath, Descendant, Text, Node} from 'slate'\nimport * as DMP from 'diff-match-patch'\nimport {Path, KeyedSegment, PathSegment, PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport type {Patch, InsertPatch, UnsetPatch, SetPatch, DiffMatchPatch} from '../types/patch'\nimport {applyAll} from '../patch/applyPatch'\nimport {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {toSlateValue} from './values'\nimport {debugWithName} from './debug'\nimport {KEY_TO_SLATE_ELEMENT} from './weakMaps'\n\nconst debug = debugWithName('patchToOperations')\n\n// eslint-disable-next-line new-cap\nconst dmp = new DMP.diff_match_patch()\n\nexport function createPatchToOperations(\n  schemaTypes: PortableTextMemberSchemaTypes\n): (\n  editor: Editor,\n  patch: Patch,\n  patches: Patch[],\n  snapshot: PortableTextBlock[] | undefined\n) => boolean {\n  function diffMatchPatch(editor: Editor, patch: DiffMatchPatch) {\n    const blockKey = findLastKey([patch.path[0]])\n    const blockIndex = editor.children.findIndex((node, indx) => {\n      return blockKey ? node._key === blockKey : indx === patch.path[0]\n    })\n    const block = editor.children[blockIndex] as Element | undefined\n    const parsed = dmp.patch_fromText(patch.value)[0]\n    const isSpanTextDiffMatchPatch =\n      editor.isTextBlock(block) &&\n      patch.path[1] === 'children' &&\n      patch.path.length === 4 &&\n      patch.path[3] === 'text'\n    if (parsed && isSpanTextDiffMatchPatch) {\n      const distance = parsed.length2 - parsed.length1\n      let text\n      if (parsed.diffs[1]) {\n        text = parsed.diffs[1][1]\n      } else {\n        text = parsed.diffs[0][1]\n      }\n      if (patch.path[1] === 'children') {\n        const childKey = findLastKey([patch.path[2]])\n        const childIndex = block.children.findIndex((node, indx) => {\n          return childKey ? node._key === childKey : indx === patch.path[0]\n        })\n        const slatePath = [blockIndex]\n        if (childIndex > -1) {\n          slatePath.push(childIndex)\n        }\n        const point = {\n          path: slatePath,\n          offset:\n            distance >= 0\n              ? (parsed.start1 || 0) + parsed.diffs[0][1].length\n              : (parsed.start2 || 0) + parsed.length2 - distance,\n        }\n        // debug(\n        //   `DiffMatchPatch (${distance < 0 ? 'remove' : 'insert'}) at ${JSON.stringify(slatePath)}}: `,\n        //   JSON.stringify(point, null, 2),\n        //   JSON.stringify(parsed, null, 2)\n        // )\n        debugState(editor, 'before')\n\n        if (distance >= 0) {\n          editor.apply({\n            type: 'insert_text',\n            path: point.path,\n            offset: point.offset,\n            text,\n          })\n        } else {\n          editor.apply({\n            type: 'remove_text',\n            path: point.path,\n            offset: point.offset - text.length,\n            text,\n          })\n        }\n      }\n      debugState(editor, 'after')\n      return true\n    }\n    return false\n  }\n\n  function insertPatch(editor: Editor, patch: InsertPatch) {\n    // Insert blocks\n    if (patch.path.length === 1) {\n      const {items, position} = patch\n      const blocksToInsert = toSlateValue(\n        items as PortableTextBlock[],\n        {schemaTypes},\n        KEY_TO_SLATE_ELEMENT.get(editor)\n      ) as Descendant[]\n      const posKey = findLastKey(patch.path)\n      const index = Math.max(\n        0,\n        editor.children.findIndex((node, indx) => {\n          return posKey ? node._key === posKey : indx === patch.path[0]\n        })\n      )\n      const normalizedIdx = position === 'after' ? index + 1 : index\n      debug(`Inserting blocks at path [${normalizedIdx}]`)\n      debugState(editor, 'before')\n      Transforms.insertNodes(editor, blocksToInsert, {at: [normalizedIdx]})\n      debugState(editor, 'after')\n      return true\n    }\n    const {items, position} = patch\n    const posKey = findLastKey(patch.path)\n    const blockIndex = editor.children.findIndex((node, indx) => {\n      return posKey ? node._key === posKey : indx === patch.path[0]\n    })\n\n    // Insert children\n    const block: Descendant | undefined =\n      editor.children && blockIndex > -1 ? editor.children[blockIndex] : undefined\n    const childIndex = editor.isTextBlock(block)\n      ? block.children.findIndex((node: PortableTextChild, indx: number) => {\n          return isKeyedSegment(patch.path[2])\n            ? node._key === patch.path[2]._key\n            : indx === patch.path[2]\n        })\n      : 0\n    const childrenToInsert =\n      block &&\n      toSlateValue(\n        [{...block, children: items as PortableTextChild[]}],\n        {schemaTypes},\n        KEY_TO_SLATE_ELEMENT.get(editor)\n      )\n\n    const normalizedIdx = position === 'after' ? childIndex + 1 : childIndex\n    const targetPath = [blockIndex, normalizedIdx]\n    debug(`Inserting children at path ${targetPath}`)\n    debugState(editor, 'before')\n    if (childrenToInsert && Element.isElement(childrenToInsert[0])) {\n      Transforms.insertNodes(editor, childrenToInsert[0].children, {at: targetPath})\n    }\n    debugState(editor, 'after')\n    return true\n  }\n\n  function setPatch(editor: Editor, patch: SetPatch) {\n    const blockIndex = editor.children.findIndex((node, indx) => {\n      return isKeyedSegment(patch.path[0])\n        ? node._key === patch.path[0]._key\n        : indx === patch.path[0]\n    })\n    debug('blockIndex', blockIndex)\n    const block = blockIndex > -1 ? editor.children[blockIndex] : undefined\n    const isTextBlock = editor.isTextBlock(block)\n\n    // Ignore patches targeting nested void data, like 'markDefs'\n    if (isTextBlock && patch.path.length > 2 && patch.path[1] !== 'children') {\n      debug('Ignoring setting void value')\n      return false\n    }\n\n    const childIndex = isTextBlock\n      ? block.children.findIndex((node: PortableTextChild, indx: number) => {\n          return isKeyedSegment(patch.path[2])\n            ? node._key === patch.path[2]._key\n            : indx === patch.path[2]\n        })\n      : 0\n    let value = patch.value\n    const targetPath: SlatePath = childIndex > -1 ? [blockIndex, childIndex] : [blockIndex]\n    if (typeof patch.path[3] === 'string') {\n      value = {}\n      value[patch.path[3]] = patch.value\n    }\n    if (isTextBlock) {\n      debug(`Setting nodes at ${JSON.stringify(patch.path)} - ${JSON.stringify(targetPath)}`)\n      debug('Value to set', JSON.stringify(value, null, 2))\n      debugState(editor, 'before')\n      if (targetPath.length === 1) {\n        debug('Setting block property')\n        const {children, ...nextRest} = value as PortableTextBlock\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const {children: prevChildren, ...prevRest} = block || {children: undefined}\n        editor.apply({\n          type: 'set_node',\n          path: targetPath,\n          properties: {...prevRest},\n          newProperties: nextRest,\n        })\n        if (block && Element.isElement(block)) {\n          block.children.forEach((c, cIndex) => {\n            editor.apply({\n              type: 'remove_node',\n              path: targetPath.concat(cIndex),\n              node: c,\n            })\n          })\n        }\n        if (Array.isArray(children)) {\n          children.forEach((c, cIndex) => {\n            editor.apply({\n              type: 'insert_node',\n              path: targetPath.concat(cIndex),\n              node: c,\n            })\n          })\n        }\n      } else if (Text.isText(value)) {\n        debug('Setting text property')\n        const prevSel = editor.selection && {...editor.selection}\n        editor.apply({\n          type: 'remove_text',\n          path: targetPath,\n          offset: 0,\n          text: block.children[childIndex].text as string,\n        })\n        editor.apply({\n          type: 'insert_text',\n          path: targetPath,\n          offset: 0,\n          text: value.text,\n        })\n        const onSamePath = prevSel && isEqual(prevSel.focus.path, targetPath)\n        // const onSameText =\n        //   editor.selection &&\n        //   editor.selection.focus.path[0] === blockIndex &&\n        //   patch.path[3] === 'text'\n        if (onSamePath) {\n          debug('On same path, restoring previous selection')\n          Transforms.select(editor, prevSel)\n        }\n        //  else if (onSameText) {\n        //   debug('Adjusting for inserted text')\n        //   const newOffset = typeof patch.value === 'string' ? patch.value.length : 0\n        //   const point = {path: targetPath, offset: newOffset}\n        //   Transforms.select(editor, {focus: point, anchor: point})\n        // }\n      } else {\n        debug('Setting non-text property')\n        editor.apply({\n          type: 'set_node',\n          path: targetPath,\n          properties: {},\n          newProperties: value as Partial<Node>,\n        })\n      }\n      debugState(editor, 'after')\n      return true\n    }\n    // If this is a object block, just set the whole block\n    else if (block && 'value' in block) {\n      const newVal = applyAll([block.value], [patch])[0]\n      Transforms.setNodes(editor, {...block, value: newVal}, {at: [blockIndex]})\n      return true\n    }\n    return false\n  }\n\n  function unsetPatch(editor: Editor, patch: UnsetPatch, previousPatch?: Patch) {\n    // Value\n    if (patch.path.length === 0) {\n      debug(`Removing everything`)\n      debugState(editor, 'before')\n      const previousSelection = editor.selection\n      Transforms.deselect(editor)\n      editor.children.forEach((c, i) => {\n        Transforms.removeNodes(editor, {at: [i]})\n      })\n      Transforms.insertNodes(editor, editor.createPlaceholderBlock())\n      if (previousSelection) {\n        Transforms.select(editor, {\n          anchor: {path: [0, 0], offset: 0},\n          focus: {path: [0, 0], offset: 0},\n        })\n      }\n      debugState(editor, 'after')\n      return true\n    }\n    // Single blocks\n    if (patch.path.length === 1) {\n      const lastKey = findLastKey(patch.path)\n      const index = editor.children.findIndex((node, indx) =>\n        lastKey ? node._key === lastKey : indx === patch.path[0]\n      )\n      if (index === -1) {\n        debug(`Could not find block to unset at path ${JSON.stringify(patch.path)}`)\n        return false\n      }\n      debug(`Removing block at path [${index}]`)\n      debugState(editor, 'before')\n      if (\n        editor.selection &&\n        editor.selection.focus.path[0] === index &&\n        editor.children[index - 1]\n      ) {\n        const point = {path: [Math.max(editor.selection.focus.path[0] - 1, 0)], offset: 0}\n        Transforms.select(editor, {focus: point, anchor: point})\n        Transforms.move(editor, {unit: 'line'})\n      }\n      Transforms.removeNodes(editor, {at: [index]})\n      debugState(editor, 'after')\n      return true\n    }\n\n    const blockIndex = editor.children.findIndex((node, indx) => {\n      return isKeyedSegment(patch.path[0])\n        ? node._key === patch.path[0]._key\n        : indx === patch.path[0]\n    })\n\n    const block = blockIndex > -1 ? editor.children[blockIndex] : undefined\n\n    // Unset on text block children\n    if (editor.isTextBlock(block) && patch.path[1] === 'children' && patch.path.length === 3) {\n      const childIndex = block.children.findIndex((node: PortableTextChild, indx: number) => {\n        return isKeyedSegment(patch.path[2])\n          ? node._key === patch.path[2]._key\n          : indx === patch.path[2]\n      })\n      const targetPath = [blockIndex, childIndex]\n      const prevSel = editor.selection && {...editor.selection}\n      const onSamePath = isEqual(editor.selection?.focus.path, targetPath)\n      if (childIndex === -1) {\n        debug(`Could not find child to unset at path ${JSON.stringify(targetPath)}`)\n        return false\n      }\n      debug(`Unsetting child at path ${JSON.stringify(targetPath)}`)\n      debugState(editor, 'before')\n      if (prevSel && onSamePath && editor.isTextBlock(block)) {\n        const needToAdjust = childIndex >= prevSel.focus.path[1]\n        if (needToAdjust) {\n          const textChild = block.children[childIndex]\n          const isMergeUnset =\n            previousPatch?.type === 'set' &&\n            previousPatch.path[3] === 'text' &&\n            typeof previousPatch.value === 'string' &&\n            editor.isTextSpan(textChild) &&\n            isEqual(\n              previousPatch.value.slice(-textChild.text.length),\n              block.children[childIndex].text\n            )\n          if (isMergeUnset) {\n            const mergedChild = block.children[Math.max(childIndex - 1, 0)]\n            debug('Adjusting selection for merging of nodes')\n            prevSel.focus = {...prevSel.focus}\n            prevSel.focus.path = [targetPath[0], Math.max(targetPath[1] - 1, 0)]\n            prevSel.focus.offset = editor.isTextSpan(mergedChild)\n              ? mergedChild.text.length - textChild.text.length + prevSel.focus.offset\n              : 0\n            prevSel.anchor = prevSel.focus\n            Transforms.select(editor, prevSel)\n            Transforms.removeNodes(editor, {at: [blockIndex, childIndex]})\n            debugState(editor, 'after')\n            return true\n          }\n        }\n      }\n      Transforms.removeNodes(editor, {at: [blockIndex, childIndex]})\n      debugState(editor, 'after')\n      return true\n    }\n    return false\n  }\n\n  let previousPatch: Patch | undefined\n\n  return function (editor: Editor, patch: Patch): boolean {\n    let changed = false\n    debug('\\n\\nNEW PATCH =============================================================')\n    debug(JSON.stringify(patch, null, 2))\n    try {\n      switch (patch.type) {\n        case 'insert':\n          changed = insertPatch(editor, patch)\n          break\n        case 'unset':\n          changed = unsetPatch(editor, patch, previousPatch)\n          break\n        case 'set':\n          changed = setPatch(editor, patch)\n          break\n        case 'diffMatchPatch':\n          changed = diffMatchPatch(editor, patch)\n          break\n        default:\n          debug('Unhandled patch', patch.type)\n      }\n    } catch (err) {\n      console.error(err)\n    }\n    previousPatch = patch\n    return changed\n  }\n}\n\nfunction isKeyedSegment(segment: PathSegment): segment is KeyedSegment {\n  return typeof segment === 'object' && '_key' in segment\n}\n\n// Helper function to find the last part of a patch path that has a known key\nfunction findLastKey(path: Path): string | null {\n  let key: string | null = null\n\n  path\n    .concat('')\n    .reverse()\n    .forEach((part) => {\n      if (isKeyedSegment(part)) {\n        key = part._key\n      }\n    })\n\n  return key\n}\n\nfunction debugState(editor: Editor, stateName: string) {\n  debug(`Children ${stateName}:`, JSON.stringify(editor.children, null, 2))\n  debug(`Selection ${stateName}: `, JSON.stringify(editor.selection, null, 2))\n}\n","import {EMPTY, Observable, OperatorFunction, defer, of, switchMap, tap} from 'rxjs'\n\nexport function bufferUntil<T>(\n  emitWhen: (currentBuffer: T[]) => boolean\n): OperatorFunction<T, T[]> {\n  return (source: Observable<T>) =>\n    defer(() => {\n      let buffer: T[] = [] // custom buffer\n      return source.pipe(\n        tap((v) => buffer.push(v)), // add values to buffer\n        switchMap(() => (emitWhen(buffer) ? of(buffer) : EMPTY)), // emit the buffer when the condition is met\n        tap(() => (buffer = [])) // clear the buffer\n      )\n    })\n}\n","/* eslint-disable complexity */\n/* eslint-disable no-eq-null */\n/* eslint-disable max-depth */\n/**\n * This plugin will make the editor support undo/redo on the local state only.\n * The undo/redo steps are rebased against incoming patches since the step occurred.\n */\n\nimport {isEqual, flatten} from 'lodash'\nimport {\n  Editor,\n  Element as SlateElement,\n  Operation,\n  Path,\n  SplitNodeOperation,\n  InsertTextOperation,\n  RemoveTextOperation,\n  SelectionOperation,\n} from 'slate'\nimport * as DMP from 'diff-match-patch'\nimport type {Patch} from '../../types/patch'\nimport {PatchObservable, PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {isPatching} from '../../utils/withoutPatching'\n\nconst debug = debugWithName('plugin:withUndoRedo')\n// eslint-disable-next-line new-cap\nconst dmp = new DMP.diff_match_patch()\n\nconst SAVING = new WeakMap<Editor, boolean | undefined>()\nconst MERGING = new WeakMap<Editor, boolean | undefined>()\nconst UNDO_STEP_LIMIT = 300\n\nconst isMerging = (editor: Editor): boolean | undefined => {\n  return MERGING.get(editor)\n}\n\nconst isSaving = (editor: Editor): boolean | undefined => {\n  if (!isPatching(editor)) {\n    return false\n  }\n  return SAVING.get(editor)\n}\n\nexport interface Options {\n  patches$?: PatchObservable\n  readOnly: boolean\n}\n\nexport function createWithUndoRedo(\n  options: Options\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const {readOnly, patches$} = options\n  const remotePatches: {patch: Patch; time: Date}[] = []\n  return (editor: PortableTextSlateEditor) => {\n    if (patches$) {\n      editor.subscriptions.push(() => {\n        debug('Subscribing to patches')\n        const sub = patches$.subscribe(({patches}) => {\n          patches.forEach((patch) => {\n            if (patch.origin !== 'local') {\n              remotePatches.push({patch: patch, time: new Date()})\n            }\n          })\n        })\n        return () => {\n          debug('Unsubscribing to patches')\n          sub.unsubscribe()\n        }\n      })\n    }\n    editor.history = {undos: [], redos: []}\n    const {apply} = editor\n    // Apply function for merging and saving local history inspired from 'slate-history' by Ian Storm Taylor\n    editor.apply = (op: Operation) => {\n      if (readOnly) {\n        apply(op)\n        return\n      }\n      const {operations, history} = editor\n      const {undos} = history\n      const step = undos[undos.length - 1]\n      const lastOp = step && step.operations && step.operations[step.operations.length - 1]\n      const overwrite = shouldOverwrite(op, lastOp)\n      let save = isSaving(editor)\n      let merge = isMerging(editor)\n\n      if (save == null) {\n        save = shouldSave(op, lastOp)\n      }\n\n      if (save) {\n        if (merge == null) {\n          if (step == null) {\n            merge = false\n            // eslint-disable-next-line no-negated-condition\n          } else if (operations.length !== 0) {\n            merge = true\n          } else {\n            merge = shouldMerge(op, lastOp) || overwrite\n          }\n        }\n\n        if (step && merge) {\n          if (overwrite) {\n            step.operations.pop()\n          }\n          step.operations.push(op)\n        } else {\n          const stp = {\n            operations: [...(editor.selection === null ? [] : [createSelectOperation(editor)]), op],\n            timestamp: new Date(),\n          }\n          undos.push(stp)\n          debug('Created new undo step', step)\n        }\n\n        while (undos.length > UNDO_STEP_LIMIT) {\n          undos.shift()\n        }\n\n        if (shouldClear(op)) {\n          history.redos = []\n        }\n      }\n      apply(op)\n    }\n\n    editor.undo = () => {\n      if (readOnly) {\n        return\n      }\n      const {undos} = editor.history\n      if (undos.length > 0) {\n        const step = undos[undos.length - 1]\n        debug('Undoing', step)\n        if (step.operations.length > 0) {\n          const otherPatches = [...remotePatches.filter((item) => item.time >= step.timestamp)]\n          let transformedOperations = step.operations\n          otherPatches.forEach((item) => {\n            transformedOperations = flatten(\n              transformedOperations.map((op) => transformOperation(editor, item.patch, op))\n            )\n          })\n          withoutSaving(editor, () => {\n            Editor.withoutNormalizing(editor, () => {\n              transformedOperations\n                .map(Operation.inverse)\n                .reverse()\n                .forEach((op) => {\n                  // Try this as the document could be changed from the outside,\n                  // and sometimes we can't perform the undo operation on the current doc.\n                  try {\n                    editor.apply(op)\n                  } catch (err) {\n                    debug('Could not perform undo step', err)\n                    editor.history.redos.push(step)\n                    editor.history.undos.pop()\n                  }\n                })\n            })\n          })\n        }\n        editor.history.redos.push(step)\n        editor.history.undos.pop()\n        editor.onChange()\n      }\n    }\n\n    editor.redo = () => {\n      if (readOnly) {\n        return\n      }\n      const {redos} = editor.history\n      if (redos.length > 0) {\n        const step = redos[redos.length - 1]\n        debug('Redoing', step)\n        if (step.operations.length > 0) {\n          const otherPatches = remotePatches.filter((item) => item.time > step.timestamp)\n          let transformedOperations = step.operations\n          otherPatches.forEach((item) => {\n            transformedOperations = flatten(\n              transformedOperations.map((op) => transformOperation(editor, item.patch, op))\n            )\n          })\n          withoutSaving(editor, () => {\n            Editor.withoutNormalizing(editor, () => {\n              transformedOperations.forEach((op) => {\n                try {\n                  editor.apply(op)\n                } catch (err) {\n                  debug('Could not perform redo step', err)\n                  editor.history.undos.push(step)\n                  editor.history.redos.pop()\n                }\n              })\n            })\n          })\n        }\n        editor.history.undos.push(step)\n        editor.history.redos.pop()\n        editor.onChange()\n      }\n    }\n\n    // Plugin return\n    return editor\n  }\n}\n\n// This will adjust the user selection according to patcehes done by others.\n// TODO: complete all necessary steps of the algorithm and write tests.\n\n// eslint-disable-next-line max-statements\nfunction transformOperation(editor: Editor, patch: Patch, operation: Operation): Operation[] {\n  // debug(`Rebasing selection for patch ${patch.type} against operation ${operation.type}`)\n\n  let transformedOperation = {...operation}\n\n  if (patch.type === 'insert' && patch.path.length === 1) {\n    return [adjustBlockPath(editor, patch, operation, patch.items.length)]\n  }\n  if (patch.type === 'unset' && patch.path.length === 1) {\n    return [adjustBlockPath(editor, patch, operation, -1)]\n  }\n\n  // Someone reset the whole value\n  if (patch.type === 'unset' && patch.path.length === 0) {\n    debug(`Adjusting selection for unset everything patch and ${operation.type} operation`)\n    return [operation]\n  }\n\n  if (patch.type === 'diffMatchPatch') {\n    const blockIndex = editor.children.findIndex((blk) => isEqual({_key: blk._key}, patch.path[0]))\n    const block = editor.children[blockIndex]\n    if (SlateElement.isElement(block) && Array.isArray(block.children)) {\n      const childIndex = block.children.findIndex((child) =>\n        isEqual({_key: child._key}, patch.path[2])\n      )\n      const parsed = dmp.patch_fromText(patch.value)[0]\n      if (!parsed) {\n        debug('Could not parse diffMatchPatch', patch)\n        return [operation]\n      }\n      const distance = parsed.length2 - parsed.length1\n      const patchIsRemovingText = parsed.diffs.some((diff) => diff[0] === -1)\n\n      if (operation.type === 'split_node' && operation.path.length > 1) {\n        const splitOperation = transformedOperation as SplitNodeOperation\n        if (patchIsRemovingText) {\n          splitOperation.position -= distance\n        } else {\n          splitOperation.position += distance\n        }\n        return [splitOperation]\n      }\n\n      if (\n        (operation.type === 'insert_text' || operation.type === 'remove_text') &&\n        Path.isPath(operation.path) &&\n        operation.path[0] !== undefined &&\n        operation.path[0] === blockIndex &&\n        operation.path[1] === childIndex\n      ) {\n        if (operation.type === 'insert_text') {\n          let insertOffset = 0\n          for (const diff of parsed.diffs) {\n            if (diff[0] === 0) {\n              insertOffset = diff[1].length\n            }\n            if (diff[0] === 1) {\n              break\n            }\n          }\n          if (parsed.start1 !== null && insertOffset + parsed.start1 <= operation.offset) {\n            const insertTextOperation = transformedOperation as InsertTextOperation\n            insertTextOperation.offset += distance\n            transformedOperation = insertTextOperation\n          }\n          // TODO: deal with overlapping ranges\n          return [transformedOperation]\n        }\n\n        if (operation.type === 'remove_text') {\n          let insertOffset = 0\n          for (const diff of parsed.diffs) {\n            if (diff[0] === 0) {\n              insertOffset = diff[1].length\n            }\n            if (diff[0] === -1) {\n              break\n            }\n          }\n          if (parsed.start1 !== null && insertOffset + parsed.start1 <= operation.offset) {\n            const removeTextOperation = transformedOperation as RemoveTextOperation\n            removeTextOperation.offset -= distance\n            transformedOperation = removeTextOperation\n          }\n          return [transformedOperation]\n        }\n      }\n      // // Selection operations with diffPatchMatch\n      // if (operation.type === 'set_selection') {\n      //   const newProperties = transformedOperation.newProperties\n      //   if (newProperties && patchIsRemovingText) {\n      //     newProperties.offset = newProperties.offset - distance\n      //   } else if (newProperties) {\n      //     newProperties.offset = newProperties.offset + distance\n      //   }\n      //   return [newProperties ? {...transformedOperation, newProperties} : transformedOperation]\n      // }\n    }\n    // TODO: transform this?\n    // if (operation.type === 'set_selection' && patch.type !== 'diffMatchPatch') {\n    //   console.log('set_selection other', JSON.stringify(patch))\n    // }\n  }\n  return [operation]\n}\n\nfunction adjustBlockPath(\n  editor: Editor,\n  patch: Patch,\n  operation: Operation,\n  level: number\n): Operation {\n  const myIndex = editor.children.findIndex((blk) => isEqual({_key: blk._key}, patch.path[0]))\n  if (\n    myIndex >= 0 &&\n    operation.type !== 'set_selection' &&\n    Array.isArray(operation.path) &&\n    operation.path[0] !== undefined &&\n    operation.path[0] >= myIndex + level\n  ) {\n    const transformedOperation = {...operation}\n    const newPath = [operation.path[0] + level, ...operation.path.slice(1)]\n    debug(`Adjusting ${operation.type} for block ${patch.type}`, operation.path, newPath)\n    transformedOperation.path = newPath\n    return transformedOperation\n  }\n  return operation\n}\n\n// Helper functions for editor.apply above\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  // Text input\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path) &&\n    op.text !== ' ' // Tokenize between words\n  ) {\n    return true\n  }\n\n  // Text deletion\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  // Don't merge\n  return false\n}\n\nconst shouldSave = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection' && op.newProperties === null) {\n    return false\n  }\n\n  return true\n}\n\nconst shouldOverwrite = (op: Operation, prev: Operation | undefined): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n\nexport function withoutSaving(editor: Editor, fn: () => void): void {\n  const prev = isSaving(editor)\n  SAVING.set(editor, false)\n  fn()\n  SAVING.set(editor, prev)\n}\n\nfunction createSelectOperation(editor: Editor): SelectionOperation {\n  return {\n    type: 'set_selection',\n    properties: {...editor.selection},\n    newProperties: {...editor.selection},\n  }\n}\n","/* eslint-disable max-nested-callbacks */\nimport {Subject, concatMap, tap} from 'rxjs'\nimport {\n  Descendant,\n  Editor,\n  InsertNodeOperation,\n  InsertTextOperation,\n  MergeNodeOperation,\n  MoveNodeOperation,\n  Operation,\n  RemoveNodeOperation,\n  RemoveTextOperation,\n  SetNodeOperation,\n  SplitNodeOperation,\n} from 'slate'\nimport {insert, setIfMissing, unset} from '../../patch/PatchEvent'\nimport type {Patch} from '../../types/patch'\n\nimport {fromSlateValue, isEqualToEmptyEditor} from '../../utils/values'\nimport {\n  EditorChange,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {PATCHING, isPatching, withoutPatching} from '../../utils/withoutPatching'\nimport {KEY_TO_VALUE_ELEMENT} from '../../utils/weakMaps'\nimport {createPatchToOperations} from '../../utils/patchToOperations'\nimport {withPreserveKeys} from '../../utils/withPreserveKeys'\nimport {bufferUntil} from '../../utils/bufferUntil'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPatches')\n\nexport interface PatchFunctions {\n  insertNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  insertTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  mergeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  moveNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  removeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  removeTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  setNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  splitNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n}\n\ninterface Options {\n  change$: Subject<EditorChange>\n  isPending: React.MutableRefObject<boolean | null>\n  keyGenerator: () => string\n  patches$?: PatchObservable\n  patchFunctions: PatchFunctions\n  readOnly: boolean\n  schemaTypes: PortableTextMemberSchemaTypes\n}\n\nexport function createWithPatches({\n  change$,\n  isPending,\n  patches$,\n  patchFunctions,\n  readOnly,\n  schemaTypes,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  // The previous editor children are needed to figure out the _key of deleted nodes\n  // The editor.children would no longer contain that information if the node is already deleted.\n  let previousChildren: Descendant[]\n\n  const patchToOperations = createPatchToOperations(schemaTypes)\n  return function withPatches(editor: PortableTextSlateEditor) {\n    PATCHING.set(editor, true)\n    previousChildren = [...editor.children]\n\n    const {apply} = editor\n\n    if (patches$) {\n      editor.subscriptions.push(() => {\n        debug('Subscribing to patches$')\n        const sub = patches$\n          .pipe(\n            tap(({patches}) => {\n              if (patches.every((p) => p.origin === 'local')) {\n                isPending.current = false\n              }\n            }),\n            bufferUntil(() => !isPending.current),\n            concatMap((incoming) => {\n              return incoming\n            })\n          )\n          .subscribe(({patches, snapshot}) => {\n            const remotePatches = patches.filter((p) => p.origin !== 'local')\n            if (remotePatches.length !== 0) {\n              debug('Remote patches', patches)\n              Editor.withoutNormalizing(editor, () => {\n                remotePatches.forEach((patch) => {\n                  debug(`Handling remote patch ${JSON.stringify(patch)}`)\n                  withoutPatching(editor, () => {\n                    withoutSaving(editor, () => {\n                      withPreserveKeys(editor, () => {\n                        try {\n                          patchToOperations(editor, patch, patches, snapshot)\n                        } catch (err) {\n                          debug('Got error trying to create operations from patch')\n                          console.error(err)\n                        }\n                      })\n                    })\n                  })\n                })\n              })\n            }\n          })\n        return () => {\n          debug('Unsubscribing to patches$')\n          sub.unsubscribe()\n        }\n      })\n    }\n    editor.apply = (operation: Operation): void | Editor => {\n      if (readOnly) {\n        apply(operation)\n        return editor\n      }\n      let patches: Patch[] = []\n\n      // Update previous children here before we apply\n      previousChildren = editor.children\n\n      const editorWasEmpty = isEqualToEmptyEditor(previousChildren, schemaTypes)\n\n      // Apply the operation\n      apply(operation)\n\n      const editorIsEmpty = isEqualToEmptyEditor(editor.children, schemaTypes)\n\n      if (!isPatching(editor)) {\n        debug(`Editor is not producing patch for operation ${operation.type}`, operation)\n        return editor\n      }\n\n      // If the editor was empty and now isn't, insert the placeholder into it.\n      if (editorWasEmpty && !editorIsEmpty && operation.type !== 'set_selection') {\n        patches.push(insert(previousChildren, 'before', [0]))\n      }\n\n      switch (operation.type) {\n        case 'insert_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertTextPatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'remove_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeTextPatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'remove_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'split_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.splitNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'insert_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'set_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.setNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'merge_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.mergeNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'move_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.moveNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'set_selection':\n        default:\n        // Do nothing\n      }\n\n      // Unset the value if a operation made the editor empty\n      if (\n        !editorWasEmpty &&\n        editorIsEmpty &&\n        ['merge_node', 'set_node', 'remove_text', 'remove_node'].includes(operation.type)\n      ) {\n        patches = [...patches, unset([])]\n        change$.next({\n          type: 'unset',\n          previousValue: fromSlateValue(\n            previousChildren,\n            schemaTypes.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor)\n          ),\n        })\n      }\n\n      // Prepend patches with setIfMissing if going from empty editor to something involving a patch.\n      if (editorWasEmpty && patches.length > 0) {\n        patches = [setIfMissing([], []), ...patches]\n      }\n\n      // Emit all patches\n      if (patches.length > 0) {\n        patches.forEach((patch) => {\n          change$.next({\n            type: 'patch',\n            patch: {...patch, origin: 'local'},\n          })\n        })\n      }\n      return editor\n    }\n    return editor\n  }\n}\n","import {Descendant} from 'slate'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withPlaceholderBlock')\n\ninterface Options {\n  schemaTypes: PortableTextMemberSchemaTypes\n  keyGenerator: () => string\n}\n/**\n * Keep a \"placeholder\" block present when the editor is empty\n *\n */\nexport function createWithPlaceholderBlock({\n  schemaTypes,\n  keyGenerator,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPlaceholderBlock(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    editor.createPlaceholderBlock = (): Descendant => {\n      debug('Creating placeholder block')\n      return {\n        _type: schemaTypes.block.name,\n        _key: keyGenerator(),\n        style: schemaTypes.styles[0].value || 'normal',\n        markDefs: [],\n        children: [\n          {\n            _type: 'span',\n            _key: keyGenerator(),\n            text: '',\n            marks: [],\n          },\n        ],\n      }\n    }\n    return editor\n  }\n}\n","import {Subject} from 'rxjs'\nimport {Editor, Transforms, Element, Path, Text as SlateText, Node} from 'slate'\nimport {\n  EditorChange,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {toPortableTextRange} from '../../utils/ranges'\nimport {fromSlateValue} from '../../utils/values'\n\nconst debug = debugWithName('plugin:withPortableTextBlockStyle')\n\nexport function createWithPortableTextBlockStyle(\n  types: PortableTextMemberSchemaTypes,\n  change$: Subject<EditorChange>\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const defaultStyle = types.styles[0].value\n  return function withPortableTextBlockStyle(\n    editor: PortableTextSlateEditor\n  ): PortableTextSlateEditor {\n    // Extend Slate's default normalization to reset split node to normal style\n    // if there is no text at the right end of the split.\n    const {normalizeNode} = editor\n    editor.normalizeNode = (nodeEntry) => {\n      normalizeNode(nodeEntry)\n      const [, path] = nodeEntry\n      for (const op of editor.operations) {\n        if (\n          op.type === 'split_node' &&\n          op.path.length === 1 &&\n          editor.isTextBlock(op.properties) &&\n          op.properties.style !== defaultStyle &&\n          op.path[0] === path[0] &&\n          !Path.equals(path, op.path)\n        ) {\n          const [child] = Editor.node(editor, [op.path[0] + 1, 0])\n          if (SlateText.isText(child) && child.text === '') {\n            debug(`Normalizing split node to ${defaultStyle} style`, op)\n            Transforms.setNodes(editor, {style: defaultStyle}, {at: [op.path[0] + 1], voids: false})\n            break\n          }\n        }\n      }\n    }\n    editor.pteHasBlockStyle = (style: string): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isTextBlock(node) && node.style === style,\n        }),\n      ]\n      if (selectedBlocks.length > 0) {\n        return true\n      }\n      return false\n    }\n\n    editor.pteToggleBlockStyle = (blockStyle: string): void => {\n      if (!editor.selection) {\n        return\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => Element.isElement(node) && node._type === types.block.name,\n        }),\n      ]\n      selectedBlocks.forEach(([node, path]) => {\n        if (editor.isTextBlock(node) && node.style === blockStyle) {\n          debug(`Unsetting block style '${blockStyle}'`)\n          Transforms.setNodes(editor, {...node, style: defaultStyle} as Partial<Node>, {\n            at: path,\n          })\n        } else {\n          if (blockStyle) {\n            debug(`Setting style '${blockStyle}'`)\n          } else {\n            debug('Setting default style', defaultStyle)\n          }\n          Transforms.setNodes(\n            editor,\n            {\n              ...node,\n              style: blockStyle || defaultStyle,\n            } as Partial<Node>,\n            {at: path}\n          )\n        }\n      })\n      editor.onChange()\n    }\n    return editor\n  }\n}\n","import {Editor, Transforms, Element, Text, Node} from 'slate'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withPortableTextLists')\nconst MAX_LIST_LEVEL = 10\n\nexport function createWithPortableTextLists(types: PortableTextMemberSchemaTypes) {\n  return function withPortableTextLists(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    editor.pteToggleListItem = (listItemStyle: string) => {\n      const isActive = editor.pteHasListStyle(listItemStyle)\n      if (isActive) {\n        debug(`Remove list item '${listItemStyle}'`)\n        editor.pteUnsetListItem(listItemStyle)\n      } else {\n        debug(`Add list item '${listItemStyle}'`)\n        editor.pteSetListItem(listItemStyle)\n      }\n    }\n\n    editor.pteUnsetListItem = (listItemStyle: string) => {\n      if (!editor.selection) {\n        return\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => Element.isElement(node) && node._type === types.block.name,\n        }),\n      ]\n      selectedBlocks.forEach(([node, path]) => {\n        if (editor.isListBlock(node)) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const {listItem, level, ...rest} = node\n          const newNode = {\n            ...rest,\n            listItem: undefined,\n            level: undefined,\n          } as Partial<Node>\n          debug(`Unsetting list '${listItemStyle}'`)\n          Transforms.setNodes(editor, newNode, {at: path})\n        }\n      })\n    }\n\n    editor.pteSetListItem = (listItemStyle: string) => {\n      if (!editor.selection) {\n        return\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isTextBlock(node),\n        }),\n      ]\n      selectedBlocks.forEach(([node, path]) => {\n        debug(`Setting list '${listItemStyle}'`)\n        Transforms.setNodes(\n          editor,\n          {\n            ...node,\n            level: 1,\n            listItem: listItemStyle || (types.lists[0] && types.lists[0].value),\n          } as Partial<Node>,\n          {at: path}\n        )\n      })\n    }\n\n    editor.pteEndList = () => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Element.isElement(node) &&\n            editor.isListBlock(node) &&\n            node.children.length === 1 &&\n            Text.isText(node.children[0]) &&\n            node.children[0].text === '',\n        }),\n      ]\n      if (selectedBlocks.length === 0) {\n        return false\n      }\n      selectedBlocks.forEach(([node, path]) => {\n        if (Element.isElement(node)) {\n          debug('Unset list')\n          Transforms.setNodes(\n            editor,\n            {\n              ...node,\n              level: undefined,\n              listItem: undefined,\n            },\n            {at: path}\n          )\n        }\n      })\n      return true // Note: we are exiting the plugin chain by not returning editor (or hotkey plugin 'enter' will fire)\n    }\n\n    editor.pteIncrementBlockLevels = (reverse?: boolean): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => !!editor.isListBlock(node),\n        }),\n      ]\n      if (selectedBlocks.length === 0) {\n        return false\n      }\n      selectedBlocks.forEach(([node, path]) => {\n        if (editor.isListBlock(node)) {\n          let level = node.level || 1\n          if (reverse) {\n            level--\n            debug('Decrementing list level', Math.min(MAX_LIST_LEVEL, Math.max(1, level)))\n          } else {\n            level++\n            debug('Incrementing list level', Math.min(MAX_LIST_LEVEL, Math.max(1, level)))\n          }\n          Transforms.setNodes(\n            editor,\n            {level: Math.min(MAX_LIST_LEVEL, Math.max(1, level))},\n            {at: path}\n          )\n        }\n      })\n      return true\n    }\n\n    editor.pteHasListStyle = (listStyle: string): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isListBlock(node) && node.listItem === listStyle,\n        }),\n      ]\n      if (selectedBlocks.length > 0) {\n        return true\n      }\n      return false\n    }\n\n    return editor\n  }\n}\n","/* eslint-disable complexity */\n/**\n *\n * This plugin will change Slate's default marks model (every prop is a mark) with the Portable Text model (marks is an array of strings on prop .marks).\n *\n */\n\nimport {isEqual, flatten, uniq} from 'lodash'\nimport {Editor, Range, Transforms, Text, Path, NodeEntry, Element} from 'slate'\n\nimport {debugWithName} from '../../utils/debug'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\n\nconst debug = debugWithName('plugin:withPortableTextMarkModel')\n\nexport function createWithPortableTextMarkModel(\n  types: PortableTextMemberSchemaTypes\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPortableTextMarkModel(editor: PortableTextSlateEditor) {\n    const {apply, normalizeNode} = editor\n    const decorators = types.decorators.map((t) => t.value)\n\n    // Extend Slate's default normalization. Merge spans with same set of .marks when doing merge_node operations, and clean up markDefs / marks\n    editor.normalizeNode = (nodeEntry) => {\n      normalizeNode(nodeEntry)\n      if (\n        editor.operations.some((op) =>\n          [\n            'insert_node',\n            'insert_text',\n            'merge_node',\n            'remove_node',\n            'remove_text',\n            'set_node',\n          ].includes(op.type)\n        )\n      ) {\n        mergeSpans(editor)\n      }\n      const [node, path] = nodeEntry\n      const isSpan = Text.isText(node) && node._type === types.span.name\n      const isTextBlock = editor.isTextBlock(node)\n      if (isSpan || isTextBlock) {\n        if (isSpan && !Array.isArray(node.marks)) {\n          debug('Adding .marks to span node')\n          Transforms.setNodes(editor, {marks: []}, {at: path})\n          editor.onChange()\n        }\n        for (const op of editor.operations) {\n          // Make sure markDefs are copied over when merging two blocks.\n          if (\n            op.type === 'merge_node' &&\n            op.path.length === 1 &&\n            'markDefs' in op.properties &&\n            op.properties._type === types.block.name &&\n            Array.isArray(op.properties.markDefs) &&\n            op.properties.markDefs.length > 0 &&\n            op.path[0] - 1 >= 0\n          ) {\n            const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] - 1])\n            debug(`Copying markDefs over to merged block`, op)\n            if (editor.isTextBlock(targetBlock)) {\n              const oldDefs = (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n              const newMarkDefs = uniq([...oldDefs, ...op.properties.markDefs])\n              const isNormalized = isEqual(newMarkDefs, targetBlock.markDefs)\n              // eslint-disable-next-line max-depth\n              if (!isNormalized) {\n                Transforms.setNodes(editor, {markDefs: newMarkDefs}, {at: targetPath, voids: false})\n                editor.onChange()\n              }\n            }\n          }\n          // Make sure markDefs are copied over to new block when splitting a block.\n          if (\n            op.type === 'split_node' &&\n            op.path.length === 1 &&\n            Element.isElementProps(op.properties) &&\n            op.properties._type === types.block.name &&\n            'markDefs' in op.properties &&\n            Array.isArray(op.properties.markDefs) &&\n            op.properties.markDefs.length > 0 &&\n            op.path[0] + 1 < editor.children.length\n          ) {\n            const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] + 1])\n            debug(`Copying markDefs over to split block`, op)\n            if (editor.isTextBlock(targetBlock)) {\n              const oldDefs = (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n              Transforms.setNodes(\n                editor,\n                {markDefs: uniq([...oldDefs, ...op.properties.markDefs])},\n                {at: targetPath, voids: false}\n              )\n              editor.onChange()\n            }\n          }\n          // Make sure marks are reset, if a block is split at the end.\n          if (\n            op.type === 'split_node' &&\n            op.path.length === 2 &&\n            op.properties._type === types.span.name &&\n            'marks' in op.properties &&\n            Array.isArray(op.properties.marks) &&\n            op.properties.marks.length > 0 &&\n            op.path[0] + 1 < editor.children.length\n          ) {\n            const [child, childPath] = Editor.node(editor, [op.path[0] + 1, 0])\n            if (\n              Text.isText(child) &&\n              child.text === '' &&\n              Array.isArray(child.marks) &&\n              child.marks.length > 0\n            ) {\n              Transforms.setNodes(editor, {marks: []}, {at: childPath, voids: false})\n              editor.onChange()\n            }\n          }\n          // Make sure markDefs are reset, if a block is split at start.\n          if (\n            op.type === 'split_node' &&\n            op.path.length === 1 &&\n            op.properties._type === types.block.name &&\n            'markDefs' in op.properties &&\n            Array.isArray(op.properties.markDefs) &&\n            op.properties.markDefs.length > 0\n          ) {\n            const [block, blockPath] = Editor.node(editor, [op.path[0]])\n            if (\n              editor.isTextBlock(block) &&\n              block.children.length === 1 &&\n              block.markDefs &&\n              block.markDefs.length > 0 &&\n              Text.isText(block.children[0]) &&\n              block.children[0].text === '' &&\n              (!block.children[0].marks || block.children[0].marks.length === 0)\n            ) {\n              Transforms.setNodes(editor, {markDefs: []}, {at: blockPath})\n              editor.onChange()\n            }\n          }\n        }\n        // Empty marks if text is empty\n        if (isSpan && Array.isArray(node.marks) && node.marks.length > 0 && node.text === '') {\n          Transforms.setNodes(editor, {marks: []}, {at: path, voids: false})\n          editor.onChange()\n        }\n      }\n      // Check consistency of markDefs\n      if (\n        isTextBlock &&\n        editor.operations.some((op) =>\n          ['split_node', 'remove_node', 'remove_text', 'merge_node'].includes(op.type)\n        )\n      ) {\n        normalizeMarkDefs(editor)\n      }\n    }\n\n    // Special hook before inserting text at the end of an annotation.\n    editor.apply = (op) => {\n      if (op.type === 'insert_text') {\n        const {selection} = editor\n        if (\n          selection &&\n          Range.isCollapsed(selection) &&\n          Editor.marks(editor)?.marks?.some((mark) => !decorators.includes(mark))\n        ) {\n          const [node] = Array.from(\n            Editor.nodes(editor, {\n              mode: 'lowest',\n              at: selection.focus,\n              match: (n) => n._type === types.span.name,\n              voids: false,\n            })\n          )[0] || [undefined]\n          if (\n            Text.isText(node) &&\n            node.text.length === selection.focus.offset &&\n            Array.isArray(node.marks) &&\n            node.marks.length > 0\n          ) {\n            apply(op)\n            Transforms.splitNodes(editor, {\n              match: Text.isText,\n              at: {...selection.focus, offset: selection.focus.offset},\n            })\n            const marksWithoutAnnotationMarks: string[] = (\n              {\n                ...(Editor.marks(editor) || {}),\n              }.marks || []\n            ).filter((mark) => decorators.includes(mark))\n            Transforms.setNodes(\n              editor,\n              {marks: marksWithoutAnnotationMarks},\n              {at: Path.next(selection.focus.path)}\n            )\n            return\n          }\n        }\n      }\n      apply(op)\n    }\n\n    // Override built in addMark function\n    editor.addMark = (mark: string) => {\n      if (editor.selection) {\n        if (Range.isExpanded(editor.selection)) {\n          // Split if needed\n          Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n          // Use new selection\n          const splitTextNodes = [\n            ...Editor.nodes(editor, {at: editor.selection, match: Text.isText}),\n          ]\n          const shouldRemoveMark = flatten(\n            splitTextNodes.map((item) => item[0]).map((node) => node.marks)\n          ).includes(mark)\n          if (shouldRemoveMark) {\n            editor.removeMark(mark)\n            return\n          }\n          Editor.withoutNormalizing(editor, () => {\n            splitTextNodes.forEach(([node, path]) => {\n              const marks = [\n                ...(Array.isArray(node.marks) ? node.marks : []).filter(\n                  (eMark: string) => eMark !== mark\n                ),\n                mark,\n              ]\n              Transforms.setNodes(\n                editor,\n                {marks},\n                {at: path, match: Text.isText, split: true, hanging: true}\n              )\n            })\n          })\n          Editor.normalize(editor)\n        } else {\n          const existingMarks: string[] =\n            {\n              ...(Editor.marks(editor) || {}),\n            }.marks || []\n          const marks = {\n            ...(Editor.marks(editor) || {}),\n            marks: [...existingMarks, mark],\n          }\n          editor.marks = marks as Text\n        }\n        editor.onChange()\n      }\n    }\n\n    // Override built in removeMark function\n    editor.removeMark = (mark: string) => {\n      const {selection} = editor\n      if (selection) {\n        if (Range.isExpanded(selection)) {\n          Editor.withoutNormalizing(editor, () => {\n            // Split if needed\n            Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n            if (editor.selection) {\n              const splitTextNodes = [\n                ...Editor.nodes(editor, {at: editor.selection, match: Text.isText}),\n              ]\n              splitTextNodes.forEach(([node, path]) => {\n                const block = editor.children[path[0]]\n                if (Element.isElement(block) && block.children.includes(node)) {\n                  Transforms.setNodes(\n                    editor,\n                    {\n                      marks: (Array.isArray(node.marks) ? node.marks : []).filter(\n                        (eMark: string) => eMark !== mark\n                      ),\n                    },\n                    {at: path}\n                  )\n                }\n              })\n            }\n          })\n          Editor.normalize(editor)\n        } else {\n          const existingMarks: string[] =\n            {\n              ...(Editor.marks(editor) || {}),\n            }.marks || []\n          const marks = {\n            ...(Editor.marks(editor) || {}),\n            marks: existingMarks.filter((eMark) => eMark !== mark),\n          }\n          editor.marks = marks as Text\n        }\n        editor.onChange()\n      }\n    }\n\n    editor.pteIsMarkActive = (mark: string): boolean => {\n      if (!editor.selection || editor.selection.focus.path.length < 2) {\n        return false\n      }\n      let existingMarks =\n        {\n          ...(Editor.marks(editor) || {}),\n        }.marks || []\n      if (Range.isExpanded(editor.selection)) {\n        Array.from(Editor.nodes(editor, {match: Text.isText, at: editor.selection})).forEach(\n          (n) => {\n            const [node] = n as NodeEntry<Text>\n            existingMarks = uniq([...existingMarks, ...((node.marks as string[]) || [])])\n          }\n        )\n      }\n      return existingMarks.includes(mark)\n    }\n\n    // Custom editor function to toggle a mark\n    editor.pteToggleMark = (mark: string) => {\n      const isActive = editor.pteIsMarkActive(mark)\n      if (isActive) {\n        debug(`Remove mark '${mark}'`)\n        Editor.removeMark(editor, mark)\n      } else {\n        debug(`Add mark '${mark}'`)\n        Editor.addMark(editor, mark, true)\n      }\n      editor.onChange()\n    }\n    return editor\n  }\n\n  /**\n   * Normalize re-marked spans in selection\n   */\n  function mergeSpans(editor: Editor) {\n    const {selection} = editor\n    if (selection) {\n      for (const [node, path] of Array.from(\n        Editor.nodes(editor, {\n          at: Editor.range(editor, [selection.anchor.path[0]], [selection.focus.path[0]]),\n        })\n      ).reverse()) {\n        const [parent] = path.length > 1 ? Editor.node(editor, Path.parent(path)) : [undefined]\n        const nextPath = [path[0], path[1] + 1]\n        if (Editor.isBlock(editor, parent)) {\n          const nextNode = parent.children[nextPath[1]]\n          if (Text.isText(node) && Text.isText(nextNode) && isEqual(nextNode.marks, node.marks)) {\n            debug('Merging spans')\n            Transforms.mergeNodes(editor, {at: nextPath, voids: true})\n            editor.onChange()\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Normalize markDefs\n   *\n   */\n  function normalizeMarkDefs(editor: Editor) {\n    const {selection} = editor\n    if (selection) {\n      const blocks = Editor.nodes(editor, {\n        at: selection,\n        match: (n) => n._type === types.block.name,\n      })\n      for (const [block, path] of blocks) {\n        if (editor.isTextBlock(block)) {\n          const newMarkDefs = (block.markDefs || []).filter((def) => {\n            return block.children.find((child) => {\n              return (\n                Text.isText(child) && Array.isArray(child.marks) && child.marks.includes(def._key)\n              )\n            })\n          })\n          if (!isEqual(newMarkDefs, block.markDefs)) {\n            debug('Removing markDef not in use')\n            Transforms.setNodes(\n              editor,\n              {\n                markDefs: newMarkDefs,\n              },\n              {at: path}\n            )\n            editor.onChange()\n          }\n        }\n      }\n    }\n  }\n}\n","import {Subject} from 'rxjs'\nimport {BaseRange} from 'slate'\nimport {\n  EditorChange,\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {ObjectWithKeyAndType, toPortableTextRange} from '../../utils/ranges'\nimport {SLATE_TO_PORTABLE_TEXT_RANGE} from '../../utils/weakMaps'\n\nconst debug = debugWithName('plugin:withPortableTextSelections')\n\n// This plugin will make sure that we emit a PT selection whenever the editor has changed.\nexport function createWithPortableTextSelections(\n  change$: Subject<EditorChange>,\n  types: PortableTextMemberSchemaTypes\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  let prevSelection: BaseRange | null = null\n  return function withPortableTextSelections(\n    editor: PortableTextSlateEditor\n  ): PortableTextSlateEditor {\n    const emitPortableTextSelection = () => {\n      if (prevSelection !== editor.selection) {\n        let ptRange: EditorSelection = null\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n          if (existing) {\n            ptRange = existing\n          } else {\n            const value = editor.children satisfies ObjectWithKeyAndType[]\n            ptRange = toPortableTextRange(value, editor.selection, types)\n            SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n          }\n        }\n        debug(`Emitting selection ${JSON.stringify(ptRange || null)}`)\n        if (ptRange) {\n          change$.next({type: 'selection', selection: ptRange})\n        } else {\n          change$.next({type: 'selection', selection: null})\n        }\n      }\n      prevSelection = editor.selection\n    }\n\n    const {onChange} = editor\n    editor.onChange = () => {\n      const hasChanges = editor.operations.length > 0\n      onChange()\n      if (hasChanges) {\n        emitPortableTextSelection()\n      }\n    }\n    return editor\n  }\n}\n","import {Element, Operation, InsertNodeOperation, Text as SlateText} from 'slate'\nimport {\n  isPortableTextTextBlock,\n  PortableTextTextBlock,\n  isPortableTextSpan,\n  PortableTextSpan,\n  PortableTextListBlock,\n  isPortableTextListBlock,\n} from '@sanity/types'\nimport {debugWithName} from '../../utils/debug'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\n\nconst debug = debugWithName('plugin:withSchemaTypes')\n/**\n * This plugin makes sure that schema types are recognized properly by Slate as blocks, voids, inlines\n *\n */\nexport function createWithSchemaTypes(types: PortableTextMemberSchemaTypes) {\n  return function withSchemaTypes(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    editor.isTextBlock = (value: unknown): value is PortableTextTextBlock => {\n      return isPortableTextTextBlock(value) && value._type === types.block.name\n    }\n    editor.isTextSpan = (value: unknown): value is PortableTextSpan => {\n      return isPortableTextSpan(value) && value._type == types.span.name\n    }\n    editor.isListBlock = (value: unknown): value is PortableTextListBlock => {\n      return isPortableTextListBlock(value) && value._type === types.block.name\n    }\n    editor.isVoid = (element: Element): boolean => {\n      return (\n        types.block.name !== element._type &&\n        (types.blockObjects.map((obj) => obj.name).includes(element._type) ||\n          types.inlineObjects.map((obj) => obj.name).includes(element._type))\n      )\n    }\n    editor.isInline = (element: Element): boolean => {\n      const inlineSchemaTypes = types.inlineObjects.map((obj) => obj.name)\n      return (\n        inlineSchemaTypes.includes(element._type) &&\n        '__inline' in element &&\n        element.__inline === true\n      )\n    }\n    // Extend Slate's default normalization to add _type span to span inserted after a inline void object\n    const {apply} = editor\n    editor.apply = (op: Operation) => {\n      const isInsertTextWithoutType =\n        op.type === 'insert_node' &&\n        op.path.length === 2 &&\n        SlateText.isText(op.node) &&\n        op.node._type === undefined\n      if (isInsertTextWithoutType) {\n        const insertNodeOperation = op as InsertNodeOperation\n        const newNode: SlateText = {\n          ...(insertNodeOperation.node as SlateText),\n          _type: 'span',\n        }\n        op.node = newNode\n        debug('Setting span type to child without a type', op)\n      }\n      apply(op)\n    }\n    return editor\n  }\n}\n","import {Editor, Range, Transforms, Text} from 'slate'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withUtils')\n\ninterface Options {\n  schemaTypes: PortableTextMemberSchemaTypes\n  keyGenerator: () => string\n}\n/**\n * This plugin makes various util commands available in the editor\n *\n */\nexport function createWithUtils({schemaTypes, keyGenerator}: Options) {\n  return function withUtils(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    // Expands the the selection to wrap around the word the focus is at\n    editor.pteExpandToWord = () => {\n      const {selection} = editor\n      if (selection && !Range.isExpanded(selection)) {\n        const [textNode] = Editor.node(editor, selection.focus, {depth: 2})\n        if (!textNode || !Text.isText(textNode) || textNode.text.length === 0) {\n          debug(`pteExpandToWord: Can't expand to word here`)\n          return\n        }\n        const {focus} = selection\n        const focusOffset = focus.offset\n        const charsBefore = textNode.text.slice(0, focusOffset)\n        const charsAfter = textNode.text.slice(focusOffset, -1)\n        const isEmpty = (str: string) => str.match(/\\s/g)\n        const whiteSpaceBeforeIndex = charsBefore\n          .split('')\n          .reverse()\n          .findIndex((str) => isEmpty(str))\n        const newStartOffset =\n          whiteSpaceBeforeIndex > -1 ? charsBefore.length - whiteSpaceBeforeIndex : 0\n        const whiteSpaceAfterIndex = charsAfter.split('').findIndex((obj) => isEmpty(obj))\n        const newEndOffset =\n          charsBefore.length +\n          (whiteSpaceAfterIndex > -1 ? whiteSpaceAfterIndex : charsAfter.length + 1)\n        if (!(newStartOffset === newEndOffset || isNaN(newStartOffset) || isNaN(newEndOffset))) {\n          debug('pteExpandToWord: Expanding to focused word')\n          Transforms.setSelection(editor, {\n            anchor: {...selection.anchor, offset: newStartOffset},\n            focus: {...selection.focus, offset: newEndOffset},\n          })\n          return\n        }\n        debug(`pteExpandToWord: Can't expand to word here`)\n      }\n    }\n    return editor\n  }\n}\n","/* eslint-disable max-statements */\n/* eslint-disable complexity */\nimport {Editor, Transforms, Path, Range} from 'slate'\nimport isHotkey from 'is-hotkey'\nimport {ReactEditor} from '@sanity/slate-react'\nimport {isPortableTextSpan, isPortableTextTextBlock} from '@sanity/types'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\nimport {HotkeyOptions} from '../../types/options'\nimport {debugWithName} from '../../utils/debug'\nimport {toSlateValue} from '../../utils/values'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\nconst DEFAULT_HOTKEYS: HotkeyOptions = {\n  marks: {\n    'mod+b': 'strong',\n    'mod+i': 'em',\n    'mod+u': 'underline',\n    \"mod+'\": 'code',\n  },\n  custom: {},\n}\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  types: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string,\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions || DEFAULT_HOTKEYS // TODO: Merge where possible? A union?\n  const createEmptyBlock = () =>\n    toSlateValue(\n      [\n        {\n          _type: types.block.name,\n          _key: keyGenerator(),\n          style: 'normal',\n          markDefs: [],\n          children: [\n            {\n              _type: 'span',\n              _key: keyGenerator(),\n              text: '',\n              marks: [],\n            },\n          ],\n        },\n      ],\n      portableTextEditor\n    )[0]\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: React.KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          // eslint-disable-next-line guard-for-in\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editor.pteToggleMark(mark)\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          // eslint-disable-next-line guard-for-in\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n\n      const isEnter = isHotkey('enter', event.nativeEvent)\n      const isTab = isHotkey('tab', event.nativeEvent)\n      const isShiftEnter = isHotkey('shift+enter', event.nativeEvent)\n      const isShiftTab = isHotkey('shift+tab', event.nativeEvent)\n      const isBackspace = isHotkey('backspace', event.nativeEvent)\n      const isDelete = isHotkey('delete', event.nativeEvent)\n\n      // Disallow deleting void blocks by backspace from another line.\n      // Otherwise it's so easy to delete the void block above when trying to delete text on\n      // the line below or above\n      if (\n        isBackspace &&\n        editor.selection &&\n        editor.selection.focus.path[0] > 0 &&\n        Range.isCollapsed(editor.selection)\n      ) {\n        const [prevBlock, prevPath] = Editor.node(\n          editor,\n          Path.previous(editor.selection.focus.path.slice(0, 1))\n        )\n        const [focusBlock] = Editor.node(editor, editor.selection.focus, {depth: 1})\n        if (\n          prevBlock &&\n          focusBlock &&\n          Editor.isVoid(editor, prevBlock) &&\n          editor.selection.focus.offset === 0\n        ) {\n          debug('Preventing deleting void block above')\n          event.preventDefault()\n          event.stopPropagation()\n          Transforms.removeNodes(editor, {match: (n) => n === focusBlock})\n          Transforms.select(editor, prevPath)\n          editor.onChange()\n          return\n        }\n      }\n      if (\n        isDelete &&\n        editor.selection &&\n        editor.selection.focus.offset === 0 &&\n        Range.isCollapsed(editor.selection) &&\n        editor.children[editor.selection.focus.path[0] + 1]\n      ) {\n        const [nextBlock] = Editor.node(editor, Path.next(editor.selection.focus.path.slice(0, 1)))\n        const [focusBlock, focusBlockPath] = Editor.node(editor, editor.selection.focus, {depth: 1})\n        if (\n          nextBlock &&\n          focusBlock &&\n          !Editor.isVoid(editor, focusBlock) &&\n          Editor.isVoid(editor, nextBlock)\n        ) {\n          debug('Preventing deleting void block below')\n          event.preventDefault()\n          event.stopPropagation()\n          Transforms.removeNodes(editor, {match: (n) => n === focusBlock})\n          Transforms.select(editor, focusBlockPath)\n          editor.onChange()\n          return\n        }\n      }\n\n      // Tab for lists\n      // Only steal tab when we are on a plain text span or we are at the start of the line (fallback if the whole block is annotated or contains a single inline object)\n      // Otherwise tab is reserved for accessability for buttons etc.\n      if ((isTab || isShiftTab) && editor.selection) {\n        const [focusChild] = Editor.node(editor, editor.selection.focus, {depth: 2})\n        const [focusBlock] = isPortableTextSpan(focusChild)\n          ? Editor.node(editor, editor.selection.focus, {depth: 1})\n          : []\n        const hasAnnotationFocus =\n          focusChild &&\n          isPortableTextTextBlock(focusBlock) &&\n          isPortableTextSpan(focusChild) &&\n          (focusChild.marks || ([] as string[])).filter((m) =>\n            (focusBlock.markDefs || []).map((def) => def._key).includes(m)\n          ).length > 0\n        const [start] = Range.edges(editor.selection)\n        const atStartOfNode = Editor.isStart(editor, start, start.path)\n\n        if (\n          focusChild &&\n          isPortableTextSpan(focusChild) &&\n          (!hasAnnotationFocus || atStartOfNode) &&\n          editor.pteIncrementBlockLevels(isShiftTab)\n        ) {\n          event.preventDefault()\n        }\n      }\n\n      // Deal with enter key combos\n      if (isEnter && !isShiftEnter && editor.selection) {\n        let focusBlock\n        try {\n          ;[focusBlock] = Editor.node(editor, editor.selection.focus, {depth: 1})\n        } catch (err) {\n          // Just ignore\n        }\n        // List item enter key\n        if (editor.isListBlock(focusBlock)) {\n          if (editor.pteEndList()) {\n            event.preventDefault()\n          }\n          return\n        }\n\n        // Enter from another style than the first (default one)\n        if (\n          editor.isTextBlock(focusBlock) &&\n          focusBlock.style &&\n          focusBlock.style !== types.styles[0].value\n        ) {\n          const [, end] = Range.edges(editor.selection)\n          const endAtEndOfNode = Editor.isEnd(editor, end, end.path)\n          if (endAtEndOfNode) {\n            Editor.insertNode(editor, createEmptyBlock())\n            event.preventDefault()\n            return\n          }\n        }\n        // Block object enter key\n        if (focusBlock && Editor.isVoid(editor, focusBlock)) {\n          Editor.insertNode(editor, createEmptyBlock())\n          event.preventDefault()\n          return\n        }\n      }\n\n      // Soft line breaks\n      if (isShiftEnter) {\n        event.preventDefault()\n        editor.insertText('\\n')\n        return\n      }\n\n      // Undo/redo\n      if (isHotkey('mod+z', event.nativeEvent)) {\n        event.preventDefault()\n        editor.undo()\n        return\n      }\n      if (isHotkey('mod+y', event.nativeEvent) || isHotkey('mod+shift+z', event.nativeEvent)) {\n        event.preventDefault()\n        editor.redo()\n      }\n    }\n    return editor\n  }\n}\n","import {PortableTextBlock, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {flatten, isObject, uniq} from 'lodash'\nimport {set, unset, insert} from '../patch/PatchEvent'\nimport {InvalidValueResolution, PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport interface Validation {\n  valid: boolean\n  resolution: InvalidValueResolution | null\n  value: PortableTextBlock[] | undefined\n}\n\nexport function validateValue(\n  value: PortableTextBlock[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string\n): Validation {\n  let resolution: InvalidValueResolution | null = null\n  let valid = true\n  const validChildTypes = [types.span.name, ...types.inlineObjects.map((t) => t.name)]\n  const validBlockTypes = [types.block.name, ...types.blockObjects.map((t) => t.name)]\n\n  // Undefined is allowed\n  if (value === undefined) {\n    return {valid: true, resolution: null, value}\n  }\n  // Only lengthy arrays are allowed in the editor.\n  if (!Array.isArray(value) || value.length === 0) {\n    return {\n      valid: false,\n      resolution: {\n        patches: [unset([])],\n        description: 'Editor value must be an array of Portable Text blocks, or undefined.',\n        action: 'Unset the value',\n        item: value,\n      },\n      value,\n    }\n  }\n  if (\n    value.some((blk: PortableTextBlock, index: number): boolean => {\n      // Is the block an object?\n      if (!isObject(blk)) {\n        resolution = {\n          patches: [unset([index])],\n          description: `Block must be an object, got ${String(blk)}`,\n          action: `Unset invalid item`,\n          item: blk,\n        }\n        return true\n      }\n      // Test that every block has a _key prop\n      if (!blk._key) {\n        resolution = {\n          patches: [set({...blk, _key: keyGenerator()}, [index])],\n          description: `Block at index ${index} is missing required _key.`,\n          action: 'Set the block with a random _key value',\n          item: blk,\n        }\n        return true\n      }\n      // Test that every block has valid _type\n      if (!blk._type || !validBlockTypes.includes(blk._type)) {\n        // Special case where block type is set to default 'block', but the block type is named something else according to the schema.\n        if (blk._type === 'block') {\n          const currentBlockTypeName = types.block.name\n          resolution = {\n            patches: [set({...blk, _type: currentBlockTypeName}, [{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n            action: `Use type '${currentBlockTypeName}'`,\n            item: blk,\n          }\n          return true\n        }\n        resolution = {\n          patches: [unset([{_key: blk._key}])],\n          description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n          action: 'Remove the block',\n          item: blk,\n        }\n        return true\n      }\n      // Test that every child in text block is valid\n      if (blk._type === types.block.name) {\n        const textBlock = blk as PortableTextTextBlock\n        // Test that it has children\n        if (!textBlock.children) {\n          resolution = {\n            patches: [unset([{_key: textBlock._key}])],\n            description: `Text block with _key '${textBlock._key}' is missing required key 'children'.`,\n            action: 'Remove the block',\n            item: textBlock,\n          }\n          return true\n        }\n        // Test that markDefs exists\n        if (!blk.markDefs) {\n          resolution = {\n            patches: [set({...textBlock, markDefs: []}, [{_key: textBlock._key}])],\n            description: `Block is missing required key 'markDefs'.`,\n            action: 'Add empty markDefs array',\n            item: textBlock,\n          }\n          return true\n        }\n        // NOTE: this is commented out as we want to allow the saved data to have optional .marks for spans (as specified by the schema)\n        // const spansWithUndefinedMarks = blk.children\n        //   .filter(cld => cld._type === types.span.name)\n        //   .filter(cld => typeof cld.marks === 'undefined')\n\n        // if (spansWithUndefinedMarks.length > 0) {\n        //   const first = spansWithUndefinedMarks[0]\n        //   resolution = {\n        //     patches: [\n        //       set({...first, marks: []}, [{_key: blk._key}, 'children', {_key: first._key}])\n        //     ],\n        //     description: `Span has no .marks array`,\n        //     action: 'Add empty marks array',\n        //     item: first\n        //   }\n        //   return true\n        // }\n        const allUsedMarks = uniq(\n          flatten(\n            textBlock.children\n              .filter((cld) => cld._type === types.span.name)\n              .map((cld) => cld.marks || [])\n          ) as string[]\n        )\n        // Note: this is commented out as it may be a bit too strict:\n        // // Test that all markDefs are in use\n        // if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n        //   const unusedMarkDefs: string[] = uniq(\n        //     blk.markDefs.map((def) => def._key).filter((key) => !allUsedMarks.includes(key))\n        //   )\n        //   if (unusedMarkDefs.length > 0) {\n        //     resolution = {\n        //       patches: unusedMarkDefs.map((key) =>\n        //         unset([{_key: blk._key}, 'markDefs', {_key: key}])\n        //       ),\n        //       description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\n        //         ', '\n        //       )}.`,\n        //       action: 'Remove unused mark definition item',\n        //       item: blk,\n        //     }\n        //     return true\n        //   }\n        // }\n\n        // Test that every annotation mark used has a definition\n        const annotationMarks = allUsedMarks.filter(\n          (mark) => !types.decorators.map((dec) => dec.value).includes(mark)\n        )\n        const orphanedMarks = annotationMarks.filter((mark) =>\n          textBlock.markDefs ? !textBlock.markDefs.find((def) => def._key === mark) : false\n        )\n        if (orphanedMarks.length > 0) {\n          const spanChildren = textBlock.children.filter(\n            (cld) =>\n              cld._type === types.span.name &&\n              Array.isArray(cld.marks) &&\n              cld.marks.some((mark) => orphanedMarks.includes(mark))\n          ) as PortableTextSpan[]\n          if (spanChildren) {\n            resolution = {\n              patches: spanChildren.map((child) => {\n                return set(\n                  (child.marks || []).filter((cMrk) => !orphanedMarks.includes(cMrk)),\n                  [{_key: blk._key}, 'children', {_key: child._key}, 'marks']\n                )\n              }),\n              description: `Block with _key '${blk._key}' contains marks (${orphanedMarks.join(\n                ', '\n              )}) not supported by the current content model.`,\n              action: 'Remove invalid marks',\n              item: blk,\n            }\n            return true\n          }\n        }\n\n        // Test that children is lengthy\n        if (textBlock.children && textBlock.children.length === 0) {\n          const newSpan = {\n            _type: types.span.name,\n            _key: keyGenerator(),\n            text: '',\n          }\n          resolution = {\n            patches: [insert([newSpan], 'after', [{_key: blk._key}, 'children', 0])],\n            description: `Children for text block with _key '${blk._key}' is empty.`,\n            action: 'Insert an empty text',\n            item: blk,\n          }\n          return true\n        }\n        // Test every child\n        if (\n          textBlock.children.some((child, cIndex: number) => {\n            if (!child._key) {\n              const newChild = {...child, _key: keyGenerator()}\n              resolution = {\n                patches: [set(newChild, [{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                action: 'Set a new random _key on the object',\n                item: blk,\n              }\n              return true\n            }\n            // Verify that children have valid types\n            if (!child._type || validChildTypes.includes(child._type) === false) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', {_key: child._key}])],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                action: 'Remove the object',\n                item: blk,\n              }\n              return true\n            }\n            // Verify that spans have .text\n            if (child._type === types.span.name && child.text === undefined) {\n              resolution = {\n                patches: [\n                  set({...child, text: ''}, [{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing text property!`,\n                action: `Write an empty .text to the object`,\n                item: blk,\n              }\n              return true\n            }\n            return false\n          })\n        ) {\n          valid = false\n        }\n      }\n      return false\n    })\n  ) {\n    valid = false\n  }\n  return {valid, resolution, value}\n}\n","import {Node, Transforms, Editor, Descendant, Range} from 'slate'\nimport {htmlToBlocks, normalizeBlock} from '@sanity/block-tools'\nimport {ReactEditor} from '@sanity/slate-react'\nimport {PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {\n  EditorChanges,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {fromSlateValue, isEqualToEmptyEditor, toSlateValue} from '../../utils/values'\nimport {validateValue} from '../../utils/validateValue'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withInsertData')\n\n/**\n * This plugin handles copy/paste in the editor\n *\n */\nexport function createWithInsertData(\n  change$: EditorChanges,\n  schemaTypes: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string\n) {\n  return function withInsertData(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    const blockTypeName = schemaTypes.block.name\n    const spanTypeName = schemaTypes.span.name\n\n    const toPlainText = (blocks: PortableTextBlock[]) => {\n      return blocks\n        .map((block) => {\n          if (editor.isTextBlock(block)) {\n            return block.children\n              .map((child: PortableTextChild) => {\n                if (child._type === spanTypeName) {\n                  return child.text\n                }\n                return `[${\n                  schemaTypes.inlineObjects.find((t) => t.name === child._type)?.title || 'Object'\n                }]`\n              })\n              .join('')\n          }\n          return `[${\n            schemaTypes.blockObjects.find((t) => t.name === block._type)?.title || 'Object'\n          }]`\n        })\n        .join('\\n\\n')\n    }\n\n    editor.setFragmentData = (data: DataTransfer, originEvent) => {\n      const {selection} = editor\n\n      if (!selection) {\n        return\n      }\n\n      const [start, end] = Range.edges(selection)\n      const startVoid = Editor.void(editor, {at: start.path})\n      const endVoid = Editor.void(editor, {at: end.path})\n\n      if (Range.isCollapsed(selection) && !startVoid) {\n        return\n      }\n\n      // Create a fake selection so that we can add a Base64-encoded copy of the\n      // fragment to the HTML, to decode on future pastes.\n      const domRange = ReactEditor.toDOMRange(editor, selection)\n      let contents = domRange.cloneContents()\n      // COMPAT: If the end node is a void node, we need to move the end of the\n      // range from the void node's spacer span, to the end of the void node's\n      // content, since the spacer is before void's content in the DOM.\n      if (endVoid) {\n        const [voidNode] = endVoid\n        const r = domRange.cloneRange()\n        const domNode = ReactEditor.toDOMNode(editor, voidNode)\n        r.setEndAfter(domNode)\n        contents = r.cloneContents()\n      }\n      // Remove any zero-width space spans from the cloned DOM so that they don't\n      // show up elsewhere when pasted.\n      Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach((zw) => {\n        const isNewline = zw.getAttribute('data-slate-zero-width') === 'n'\n        zw.textContent = isNewline ? '\\n' : ''\n      })\n      // Clean up the clipboard HTML for editor spesific attributes\n      Array.from(contents.querySelectorAll('*')).forEach((elm) => {\n        elm.removeAttribute('contentEditable')\n        elm.removeAttribute('data-slate-inline')\n        elm.removeAttribute('data-slate-leaf')\n        elm.removeAttribute('data-slate-node')\n        elm.removeAttribute('data-slate-spacer')\n        elm.removeAttribute('data-slate-string')\n        elm.removeAttribute('data-slate-zero-width')\n        elm.removeAttribute('draggable')\n        for (const key in elm.attributes) {\n          if (elm.hasAttribute(key)) {\n            elm.removeAttribute(key)\n          }\n        }\n      })\n      const div = contents.ownerDocument.createElement('div')\n      div.appendChild(contents)\n      div.setAttribute('hidden', 'true')\n      contents.ownerDocument.body.appendChild(div)\n      const asHTML = div.innerHTML\n      contents.ownerDocument.body.removeChild(div)\n      const fragment = editor.getFragment()\n      const portableText = fromSlateValue(fragment, blockTypeName)\n\n      const asJSON = JSON.stringify(portableText)\n      const asPlainText = toPlainText(portableText)\n      data.clearData()\n      data.setData('text/plain', asPlainText)\n      data.setData('text/html', asHTML)\n      data.setData('application/json', asJSON)\n      data.setData('application/x-portable-text', asJSON)\n      debug('text', asPlainText)\n      data.setData('application/x-portable-text-event-origin', originEvent || 'external')\n      debug('Set fragment data', asJSON, asHTML)\n    }\n\n    editor.insertPortableTextData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const pText = data.getData('application/x-portable-text')\n      const origin = data.getData('application/x-portable-text-event-origin')\n      debug(`Inserting portable text from ${origin} event`, pText)\n      if (pText) {\n        const parsed = JSON.parse(pText) as PortableTextBlock[]\n        if (Array.isArray(parsed) && parsed.length > 0) {\n          const slateValue = _regenerateKeys(\n            editor,\n            toSlateValue(parsed, {schemaTypes}),\n            keyGenerator,\n            spanTypeName\n          )\n          // Validate the result\n          const validation = validateValue(parsed, schemaTypes, keyGenerator)\n          // Bail out if it's not valid\n          if (!validation.valid) {\n            const errorDescription = `${validation.resolution?.description}`\n            change$.next({\n              type: 'error',\n              level: 'warning',\n              name: 'pasteError',\n              description: errorDescription,\n              data: validation,\n            })\n            debug('Invalid insert result', validation)\n            return false\n          }\n          _insertFragment(editor, slateValue, schemaTypes)\n          return true\n        }\n      }\n      return false\n    }\n\n    editor.insertTextOrHTMLData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        debug('No selection, not inserting')\n        return false\n      }\n      change$.next({type: 'loading', isLoading: true}) // This could potentially take some time\n      const html = data.getData('text/html')\n      const text = data.getData('text/plain')\n      if (html || text) {\n        debug('Inserting data', data)\n        let portableText: PortableTextBlock[]\n        let fragment: Node[]\n        let insertedType\n\n        if (html) {\n          portableText = htmlToBlocks(html, schemaTypes.portableText).map((block) =>\n            normalizeBlock(block, {blockTypeName})\n          ) as PortableTextBlock[]\n          fragment = toSlateValue(portableText, {schemaTypes})\n          insertedType = 'HTML'\n        } else {\n          // plain text\n          const blocks = escapeHtml(text)\n            .split(/\\n{2,}/)\n            .map((line) =>\n              line ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')}</p>` : '<p></p>'\n            )\n            .join('')\n          const textToHtml = `<html><body>${blocks}</body></html>`\n          portableText = htmlToBlocks(textToHtml, schemaTypes.portableText).map((block) =>\n            normalizeBlock(block, {blockTypeName})\n          ) as PortableTextBlock[]\n          fragment = toSlateValue(portableText, {\n            schemaTypes,\n          })\n          insertedType = 'text'\n        }\n\n        // Validate the result\n        const validation = validateValue(portableText, schemaTypes, keyGenerator)\n\n        // Bail out if it's not valid\n        if (!validation.valid) {\n          const errorDescription = `Could not validate the resulting portable text to insert.\\n${validation.resolution?.description}\\nTry to insert as plain text (shift-paste) instead.`\n          change$.next({\n            type: 'error',\n            level: 'warning',\n            name: 'pasteError',\n            description: errorDescription,\n            data: validation,\n          })\n          debug('Invalid insert result', validation)\n          return false\n        }\n        debug(`Inserting ${insertedType} fragment at ${JSON.stringify(editor.selection)}`)\n        _insertFragment(editor, fragment, schemaTypes)\n        change$.next({type: 'loading', isLoading: false})\n        return true\n      }\n      change$.next({type: 'loading', isLoading: false})\n      return false\n    }\n\n    editor.insertData = (data: DataTransfer) => {\n      if (!editor.insertPortableTextData(data)) {\n        editor.insertTextOrHTMLData(data)\n      }\n    }\n\n    editor.insertFragmentData = (data: DataTransfer): boolean => {\n      const fragment = data.getData('application/x-portable-text')\n      if (fragment) {\n        const parsed = JSON.parse(fragment)\n        editor.insertFragment(parsed)\n        return true\n      }\n      return false\n    }\n\n    return editor\n  }\n}\n\nconst entityMap: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;',\n}\nfunction escapeHtml(str: string) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s: string) => entityMap[s])\n}\n\n/**\n * Shared helper function to regenerate the keys on a fragment.\n *\n * @internal\n */\nfunction _regenerateKeys(\n  editor: PortableTextSlateEditor,\n  fragment: Descendant[],\n  keyGenerator: () => string,\n  spanTypeName: string\n): Descendant[] {\n  return fragment.map((node) => {\n    const newNode: Descendant = {...node}\n    // Ensure the copy has new keys\n    if (editor.isTextBlock(newNode)) {\n      newNode.markDefs = (newNode.markDefs || []).map((def) => {\n        const oldKey = def._key\n        const newKey = keyGenerator()\n        newNode.children = newNode.children.map((child) =>\n          child._type === spanTypeName && editor.isTextSpan(child)\n            ? {\n                ...child,\n                marks:\n                  child.marks && child.marks.includes(oldKey)\n                    ? // eslint-disable-next-line max-nested-callbacks\n                      [...child.marks].filter((mark) => mark !== oldKey).concat(newKey)\n                    : child.marks,\n              }\n            : child\n        )\n        return {...def, _key: newKey}\n      })\n    }\n    const nodeWithNewKeys = {...newNode, _key: keyGenerator()}\n    if (editor.isTextBlock(nodeWithNewKeys)) {\n      nodeWithNewKeys.children = nodeWithNewKeys.children.map((child) => ({\n        ...child,\n        _key: keyGenerator(),\n      }))\n    }\n    return nodeWithNewKeys as Descendant\n  })\n}\n\n/**\n * Shared helper function to insert the final fragment into the editor\n *\n * @internal\n */\nfunction _insertFragment(\n  editor: PortableTextSlateEditor,\n  fragment: Descendant[],\n  schemaTypes: PortableTextMemberSchemaTypes\n) {\n  if (!editor.selection) {\n    return\n  }\n\n  // Ensure that markDefs for any annotations inside this fragment are copied over to the focused text block.\n  const [focusBlock, focusPath] = Editor.node(editor, editor.selection, {depth: 1})\n  if (editor.isTextBlock(focusBlock) && editor.isTextBlock(fragment[0])) {\n    const {markDefs} = focusBlock\n    debug('Mixing markDefs of focusBlock and fragments[0] block', markDefs, fragment[0].markDefs)\n    if (!isEqual(markDefs, fragment[0].markDefs)) {\n      Transforms.setNodes(\n        editor,\n        {\n          markDefs: uniq([...(fragment[0].markDefs || []), ...(markDefs || [])]),\n        },\n        {at: focusPath, mode: 'lowest', voids: false}\n      )\n    }\n  }\n\n  const isPasteToEmptyEditor = isEqualToEmptyEditor(editor.children, schemaTypes)\n\n  if (isPasteToEmptyEditor) {\n    // Special case for pasting directly into an empty editor (a placeholder block).\n    // When pasting content starting with multiple empty blocks,\n    // `editor.insertFragment` can potentially duplicate the keys of\n    // the placeholder block because of operations that happen\n    // inside `editor.insertFragment` (involves an `insert_node` operation).\n    // However by splitting the placeholder block first in this situation we are good.\n    Transforms.splitNodes(editor, {at: [0, 0]})\n    editor.insertFragment(fragment)\n    Transforms.removeNodes(editor, {at: [0]})\n  } else {\n    // All other inserts\n    editor.insertFragment(fragment)\n  }\n  editor.onChange()\n}\n","import {BaseOperation, Editor, NodeEntry, Node} from 'slate'\nimport {noop} from 'lodash'\nimport {PortableTextSlateEditor} from '../../types/editor'\nimport {createEditorOptions} from '../../types/options'\nimport {createOperationToPatches} from '../../utils/operationToPatches'\nimport {createWithEditableAPI} from './createWithEditableAPI'\nimport {createWithMaxBlocks} from './createWithMaxBlocks'\nimport {createWithObjectKeys} from './createWithObjectKeys'\nimport {createWithPatches} from './createWithPatches'\nimport {createWithPlaceholderBlock} from './createWithPlaceholderBlock'\nimport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nimport {createWithPortableTextLists} from './createWithPortableTextLists'\nimport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nimport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nimport {createWithSchemaTypes} from './createWithSchemaTypes'\nimport {createWithUndoRedo} from './createWithUndoRedo'\nimport {createWithUtils} from './createWithUtils'\n\nexport {createWithEditableAPI} from './createWithEditableAPI'\nexport {createWithHotkeys} from './createWithHotKeys'\nexport {createWithInsertData} from './createWithInsertData'\nexport {createWithMaxBlocks} from './createWithMaxBlocks'\nexport {createWithObjectKeys} from './createWithObjectKeys'\nexport {createWithPatches} from './createWithPatches'\nexport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nexport {createWithPortableTextLists} from './createWithPortableTextLists'\nexport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nexport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nexport {createWithSchemaTypes} from './createWithSchemaTypes'\nexport {createWithUndoRedo} from './createWithUndoRedo'\nexport {createWithUtils} from './createWithUtils'\n\nexport interface OriginalEditorFunctions {\n  apply: (operation: BaseOperation) => void\n  onChange: () => void\n  normalizeNode: (entry: NodeEntry<Node>) => void\n}\n\nconst originalFnMap = new WeakMap<PortableTextSlateEditor, OriginalEditorFunctions>()\n\nexport const withPlugins = <T extends Editor>(\n  editor: T,\n  options: createEditorOptions\n): {editor: PortableTextSlateEditor; subscribe: () => () => void} => {\n  const e = editor as T & PortableTextSlateEditor\n  const {keyGenerator, portableTextEditor, patches$, readOnly, maxBlocks, isPending} = options\n  const {schemaTypes, change$} = portableTextEditor\n  e.subscriptions = []\n  if (e.destroy) {\n    e.destroy()\n  } else {\n    // Save a copy of the original editor functions here before they were changed by plugins.\n    // We will put them back when .destroy is called (see below).\n    originalFnMap.set(e, {\n      apply: e.apply,\n      onChange: e.onChange,\n      normalizeNode: e.normalizeNode,\n    })\n  }\n  const operationToPatches = createOperationToPatches(schemaTypes)\n  const withObjectKeys = createWithObjectKeys(schemaTypes, keyGenerator)\n  const withSchemaTypes = createWithSchemaTypes(schemaTypes)\n  const withEditableAPI = createWithEditableAPI(portableTextEditor, schemaTypes, keyGenerator)\n  const withPatches = createWithPatches({\n    change$,\n    isPending,\n    keyGenerator,\n    patches$,\n    patchFunctions: operationToPatches,\n    readOnly,\n    schemaTypes,\n  })\n  const withMaxBlocks = createWithMaxBlocks(maxBlocks || -1)\n  const withPortableTextLists = createWithPortableTextLists(schemaTypes)\n  const withUndoRedo = createWithUndoRedo({readOnly, patches$})\n  const withPortableTextMarkModel = createWithPortableTextMarkModel(schemaTypes)\n  const withPortableTextBlockStyle = createWithPortableTextBlockStyle(schemaTypes, change$)\n\n  const withPlaceholderBlock = createWithPlaceholderBlock({\n    keyGenerator,\n    schemaTypes,\n  })\n\n  const withUtils = createWithUtils({keyGenerator, schemaTypes})\n  const withPortableTextSelections = createWithPortableTextSelections(change$, schemaTypes)\n\n  e.destroy = () => {\n    const originalFunctions = originalFnMap.get(e)\n    if (!originalFunctions) {\n      throw new Error('Could not find pristine versions of editor functions')\n    }\n    e.onChange = originalFunctions.onChange\n    e.apply = originalFunctions.apply\n    e.normalizeNode = originalFunctions.normalizeNode\n  }\n  if (readOnly) {\n    return {\n      editor: withSchemaTypes(\n        withObjectKeys(\n          withPortableTextMarkModel(\n            withPortableTextBlockStyle(\n              withUtils(\n                withPlaceholderBlock(\n                  withPortableTextLists(withPortableTextSelections(withEditableAPI(e)))\n                )\n              )\n            )\n          )\n        )\n      ),\n      subscribe: () => noop,\n    }\n  }\n\n  // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.\n  return {\n    editor: withSchemaTypes(\n      withObjectKeys(\n        withPortableTextMarkModel(\n          withPortableTextBlockStyle(\n            withPortableTextLists(\n              withPlaceholderBlock(\n                withUtils(\n                  withMaxBlocks(\n                    withUndoRedo(withPatches(withPortableTextSelections(withEditableAPI(e))))\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    ),\n    subscribe: () => {\n      const unsubscribes: (() => void)[] = []\n      editor.subscriptions.forEach((subscribeFn) => {\n        unsubscribes.push(subscribeFn())\n      })\n      return () => {\n        unsubscribes.forEach((unsubscribeFn) => {\n          unsubscribeFn()\n        })\n      }\n    },\n  }\n}\n","import React, {PropsWithChildren, useEffect, useMemo} from 'react'\nimport {Slate, withReact} from '@sanity/slate-react'\nimport {createEditor} from 'slate'\nimport {KEY_TO_SLATE_ELEMENT, KEY_TO_VALUE_ELEMENT} from '../../utils/weakMaps'\nimport {debugWithName} from '../../utils/debug'\nimport {PatchObservable} from '../../types/editor'\nimport {PortableTextEditor} from '../PortableTextEditor'\nimport {withPlugins} from '../plugins'\n\nconst debug = debugWithName('component:PortableTextEditor:SlateContainer')\n\n/**\n * @internal\n */\nexport interface SlateContainerProps extends PropsWithChildren {\n  isPending: React.MutableRefObject<boolean | null>\n  keyGenerator: () => string\n  maxBlocks: number | undefined\n  patches$?: PatchObservable\n  portableTextEditor: PortableTextEditor\n  readOnly: boolean\n}\n\n/**\n * Sets up and encapsulates the Slate instance\n * @internal\n */\nexport function SlateContainer(props: SlateContainerProps) {\n  const {patches$, portableTextEditor, readOnly, maxBlocks, keyGenerator, isPending} = props\n\n  // Create the slate instance\n  const [slateEditor, subscribe] = useMemo(() => {\n    debug('Creating new Slate editor instance')\n    const {editor, subscribe: _sub} = withPlugins(withReact(createEditor()), {\n      isPending,\n      keyGenerator,\n      maxBlocks,\n      patches$,\n      portableTextEditor,\n      readOnly,\n    })\n    KEY_TO_VALUE_ELEMENT.set(editor, {})\n    KEY_TO_SLATE_ELEMENT.set(editor, {})\n    return [editor, _sub]\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []) // Only initial - empty deps here\n\n  useEffect(() => {\n    const unsubscribe = subscribe()\n    return () => {\n      unsubscribe()\n    }\n  }, [subscribe])\n\n  // Update the slate instance when plugin dependent props change.\n  useEffect(() => {\n    debug('Re-initializing plugin chain')\n    withPlugins(slateEditor, {\n      isPending,\n      keyGenerator,\n      maxBlocks,\n      patches$,\n      portableTextEditor,\n      readOnly,\n    })\n  }, [keyGenerator, portableTextEditor, maxBlocks, readOnly, patches$, slateEditor, isPending])\n\n  const initialValue = useMemo(() => {\n    return [slateEditor.createPlaceholderBlock()]\n  }, [slateEditor])\n\n  useEffect(() => {\n    return () => {\n      debug('Destroying Slate editor')\n      slateEditor.destroy()\n    }\n  }, [slateEditor])\n\n  return (\n    <Slate editor={slateEditor} value={initialValue}>\n      {props.children}\n    </Slate>\n  )\n}\n","/**\n * Debounce time for flushing local patches (ms since user haven't produced a patch)\n * (lower time for tests to speed them up)\n */\nexport const FLUSH_PATCHES_DEBOUNCE_MS = process.env.NODE_ENV === 'test' ? 100 : 1000\n","import {createContext, useContext} from 'react'\nimport {EditorSelection} from '../../types/editor'\n\n/**\n * A React context for sharing the editor selection.\n */\nexport const PortableTextEditorSelectionContext = createContext<EditorSelection | null>(null)\n\n/**\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorSelection = (): EditorSelection => {\n  const selection = useContext(PortableTextEditorSelectionContext)\n\n  if (selection === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorSelection\\` hook must be used inside the <PortableTextEditor> component's context.`\n    )\n  }\n  return selection\n}\n","import {createContext, useContext} from 'react'\n\nimport {PortableTextEditor} from '../PortableTextEditor'\n\n/**\n * A React context for sharing the editor object.\n */\nexport const PortableTextEditorContext = createContext<PortableTextEditor | null>(null)\n\n/**\n * Get the current editor object from the React context.\n */\nexport const usePortableTextEditor = (): PortableTextEditor => {\n  const editor = useContext(PortableTextEditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`usePortableTextEditor\\` hook must be used inside the <PortableTextEditor> component's context.`\n    )\n  }\n\n  return editor\n}\n","import {PortableTextBlock} from '@sanity/types'\nimport {createContext, useContext} from 'react'\n\n/**\n * A React context for sharing the editor value.\n */\nexport const PortableTextEditorValueContext = createContext<PortableTextBlock[] | undefined>(\n  undefined\n)\n\n/**\n * Get the current editor value from the React context.\n */\nexport const usePortableTextEditorValue = () => {\n  return useContext(PortableTextEditorValueContext)\n}\n","import {createContext, useContext} from 'react'\n\n/**\n * A React context for sharing the editor's readOnly status.\n */\nexport const PortableTextEditorReadOnlyContext = createContext<boolean>(false)\n\n/**\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorReadOnlyStatus = (): boolean => {\n  const readOnly = useContext(PortableTextEditorReadOnlyContext)\n\n  if (readOnly === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorReadOnly\\` hook must be used inside the <PortableTextEditor> component's context.`\n    )\n  }\n  return readOnly\n}\n","/* eslint-disable max-nested-callbacks */\nimport React, {useMemo, useRef} from 'react'\nimport {PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Editor, Transforms, Node, Descendant, Text} from 'slate'\nimport {useSlate} from '@sanity/slate-react'\nimport {PortableTextEditor} from '../PortableTextEditor'\nimport {EditorChange, PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {toSlateValue} from '../../utils/values'\nimport {KEY_TO_SLATE_ELEMENT} from '../../utils/weakMaps'\nimport {withoutSaving} from '../plugins/createWithUndoRedo'\nimport {withPreserveKeys} from '../../utils/withPreserveKeys'\nimport {withoutPatching} from '../../utils/withoutPatching'\nimport {validateValue} from '../../utils/validateValue'\n\nconst debug = debugWithName('hook:useSyncValue')\n\n/**\n * @internal\n */\nexport interface UseSyncValueProps {\n  isPending: React.MutableRefObject<boolean | null>\n  keyGenerator: () => string\n  onChange: (change: EditorChange) => void\n  portableTextEditor: PortableTextEditor\n  readOnly: boolean\n}\n\n/**\n * Sync value with the editor state\n *\n * Normally nothing here should apply, and the editor and the real world are perfectly aligned.\n *\n * Inconsistencies could happen though, so we need to check the editor state when the value changes.\n *\n * For performance reasons, it makes sense to also do the content validation here, as we already\n * iterate over the value and can validate only the new content that is actually changed.\n *\n * @internal\n */\nexport function useSyncValue(\n  props: UseSyncValueProps\n): (value: PortableTextBlock[] | undefined, userCallbackFn?: () => void) => void {\n  const {portableTextEditor, isPending, readOnly, keyGenerator} = props\n  const {change$, schemaTypes} = portableTextEditor\n  const previousValue = useRef<PortableTextBlock[] | undefined>()\n  const slateEditor = useSlate()\n  return useMemo(\n    () => (value: PortableTextBlock[] | undefined) => {\n      // Don't sync the value if there are pending local changes.\n      // The value will be synced again after the local changes are submitted.\n      if (isPending.current && !readOnly) {\n        debug('Has local patches')\n        return\n      }\n\n      if (previousValue.current === value) {\n        debug('Value is the same object')\n        change$.next({type: 'value', value})\n        return\n      }\n\n      if (value && value.length === 0) {\n        const validation = validateValue(value, schemaTypes, keyGenerator)\n        change$.next({\n          type: 'invalidValue',\n          resolution: validation.resolution,\n          value,\n        })\n        return\n      }\n\n      let isChanged = false\n      let isValid = true\n      previousValue.current = value\n\n      // If empty value, remove everything in the editor and insert a placeholder block\n      if (!value || value.length === 0) {\n        debug('Value is empty')\n        withoutSaving(slateEditor, () => {\n          withoutPatching(slateEditor, () => {\n            Editor.withoutNormalizing(slateEditor, () => {\n              const hadSelection = !!slateEditor.selection\n              if (hadSelection) {\n                Transforms.deselect(slateEditor)\n              }\n              const childrenLength = slateEditor.children.length\n              slateEditor.children.forEach((_, index) => {\n                Transforms.removeNodes(slateEditor, {\n                  at: [childrenLength - 1 - index],\n                })\n              })\n              Transforms.insertNodes(slateEditor, slateEditor.createPlaceholderBlock(), {at: [0]})\n              // Add a new selection in the top of the document\n              if (hadSelection) {\n                Transforms.select(slateEditor, [0, 0])\n              }\n            })\n          })\n        })\n        isChanged = true\n      }\n      // Remove, replace or add nodes according to what is changed.\n      if (value && value.length > 0) {\n        const slateValueFromProps = toSlateValue(\n          value,\n          {\n            schemaTypes,\n          },\n          KEY_TO_SLATE_ELEMENT.get(slateEditor)\n        )\n\n        withoutSaving(slateEditor, () => {\n          withoutPatching(slateEditor, () => {\n            Editor.withoutNormalizing(slateEditor, () => {\n              const childrenLength = slateEditor.children.length\n              // Remove blocks that have become superfluous\n              if (slateValueFromProps.length < childrenLength) {\n                for (let i = childrenLength - 1; i > slateValueFromProps.length - 1; i--) {\n                  Transforms.removeNodes(slateEditor, {\n                    at: [i],\n                  })\n                }\n                isChanged = true\n              }\n              // Go through all of the blocks and see if they need to be updated\n              slateValueFromProps.forEach((currentBlock, currentBlockIndex) => {\n                const oldBlock = slateEditor.children[currentBlockIndex]\n                const hasChanges = oldBlock && !isEqual(currentBlock, oldBlock)\n                if (hasChanges && isValid) {\n                  const validationValue = [value[currentBlockIndex]]\n                  const validation = validateValue(validationValue, schemaTypes, keyGenerator)\n                  if (validation.valid) {\n                    if (oldBlock._key === currentBlock._key) {\n                      debug('Updating block', oldBlock, currentBlock)\n                      _updateBlock(slateEditor, currentBlock, oldBlock, currentBlockIndex)\n                    } else {\n                      debug('Replacing block', oldBlock, currentBlock)\n                      _replaceBlock(slateEditor, currentBlock, currentBlockIndex)\n                    }\n                    isChanged = true\n                  } else {\n                    change$.next({\n                      type: 'invalidValue',\n                      resolution: validation.resolution,\n                      value,\n                    })\n                    isValid = false\n                  }\n                }\n                if (!oldBlock && isValid) {\n                  const validationValue = [value[currentBlockIndex]]\n                  const validation = validateValue(validationValue, schemaTypes, keyGenerator)\n                  debug('Validating and inserting new block in the end of the value', currentBlock)\n                  if (validation.valid) {\n                    withPreserveKeys(slateEditor, () => {\n                      Transforms.insertNodes(slateEditor, currentBlock, {\n                        at: [currentBlockIndex],\n                      })\n                    })\n                  } else {\n                    change$.next({\n                      type: 'invalidValue',\n                      resolution: validation.resolution,\n                      value,\n                    })\n                    isValid = false\n                  }\n                }\n              })\n            })\n          })\n        })\n      }\n      if (!isValid) {\n        debug('Invalid value, returning')\n        return\n      }\n      if (isChanged) {\n        debug('Server value changed, syncing editor')\n        Editor.normalize(slateEditor)\n        slateEditor.onChange()\n        change$.next({type: 'value', value})\n      } else {\n        debug('Server value and editor value is the same, no need to sync.')\n      }\n    },\n    [change$, isPending, keyGenerator, readOnly, schemaTypes, slateEditor]\n  )\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _replaceBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  currentBlockIndex: number\n) {\n  // While replacing the block and the current selection focus is on the replaced block,\n  // temporarily deselect the editor then optimistically try to restore the selection afterwards.\n  const currentSelection = slateEditor.selection\n  const selectionFocusOnBlock =\n    currentSelection && currentSelection.focus.path[0] === currentBlockIndex\n  if (selectionFocusOnBlock) {\n    Transforms.deselect(slateEditor)\n  }\n  Transforms.removeNodes(slateEditor, {at: [currentBlockIndex]})\n  withPreserveKeys(slateEditor, () => {\n    Transforms.insertNodes(slateEditor, currentBlock, {at: [currentBlockIndex]})\n  })\n  if (selectionFocusOnBlock) {\n    Transforms.select(slateEditor, currentSelection)\n  }\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _updateBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  oldBlock: Descendant,\n  currentBlockIndex: number\n) {\n  // Update the root props on the block\n  Transforms.setNodes(slateEditor, currentBlock as Partial<Node>, {\n    at: [currentBlockIndex],\n  })\n  // Text block's need to have their children updated as well (setNode does not target a node's children)\n  if (slateEditor.isTextBlock(currentBlock) && slateEditor.isTextBlock(oldBlock)) {\n    const oldBlockChildrenLength = oldBlock.children.length\n    if (currentBlock.children.length < oldBlockChildrenLength) {\n      // Remove any children that have become superfluous\n      Array.from(Array(oldBlockChildrenLength - currentBlock.children.length)).forEach(\n        (_, index) => {\n          const childIndex = oldBlockChildrenLength - 1 - index\n          if (childIndex > 0) {\n            debug('Removing child')\n            Transforms.removeNodes(slateEditor, {\n              at: [currentBlockIndex, childIndex],\n            })\n          }\n        }\n      )\n    }\n    currentBlock.children.forEach((currentBlockChild, currentBlockChildIndex) => {\n      const oldBlockChild = oldBlock.children[currentBlockChildIndex]\n      const isChildChanged = !isEqual(currentBlockChild, oldBlockChild)\n      const isTextChanged = !isEqual(currentBlockChild.text, oldBlockChild?.text)\n      const path = [currentBlockIndex, currentBlockChildIndex]\n      if (isChildChanged) {\n        // Update if this is the same child\n        if (currentBlockChild._key === oldBlockChild?._key) {\n          debug('Updating changed child', currentBlockChild, oldBlockChild)\n          Transforms.setNodes(slateEditor, currentBlockChild as Partial<Node>, {\n            at: path,\n          })\n          const isSpanNode =\n            Text.isText(currentBlockChild) &&\n            currentBlockChild._type === 'span' &&\n            Text.isText(oldBlockChild) &&\n            oldBlockChild._type === 'span'\n          if (isSpanNode && isTextChanged) {\n            Transforms.delete(slateEditor, {\n              at: {focus: {path, offset: 0}, anchor: {path, offset: oldBlockChild.text.length}},\n            })\n            Transforms.insertText(slateEditor, currentBlockChild.text, {\n              at: path,\n            })\n          } else if (!isSpanNode) {\n            // If it's a inline block, also update the void text node key\n            debug('Updating changed inline object child', currentBlockChild)\n            Transforms.setNodes(\n              slateEditor,\n              {_key: `${currentBlock._key}-void-child`},\n              {\n                at: [...path, 0],\n                voids: true,\n              }\n            )\n          }\n          // Replace the child if _key's are different\n        } else if (oldBlockChild) {\n          debug('Replacing child', currentBlockChild)\n          Transforms.removeNodes(slateEditor, {\n            at: [currentBlockIndex, currentBlockChildIndex],\n          })\n          withPreserveKeys(slateEditor, () => {\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n          })\n          // Insert it if it didn't exist before\n        } else if (!oldBlockChild) {\n          debug('Inserting new child', currentBlockChild)\n          withPreserveKeys(slateEditor, () => {\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n          })\n        }\n      }\n    })\n  }\n}\n","import React, {\n  PropsWithChildren,\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {PortableTextBlock} from '@sanity/types'\nimport {debounce} from 'lodash'\nimport {EditorChange, EditorChanges, EditorSelection} from '../../types/editor'\nimport {Patch} from '../../types/patch'\nimport {FLUSH_PATCHES_DEBOUNCE_MS} from '../../constants'\nimport {debugWithName} from '../../utils/debug'\nimport {PortableTextEditor} from '../PortableTextEditor'\nimport {PortableTextEditorSelectionContext} from '../hooks/usePortableTextEditorSelection'\nimport {PortableTextEditorContext} from '../hooks/usePortableTextEditor'\nimport {PortableTextEditorValueContext} from '../hooks/usePortableTextEditorValue'\nimport {PortableTextEditorReadOnlyContext} from '../hooks/usePortableTextReadOnly'\nimport {useSyncValue} from '../hooks/useSyncValue'\nimport {PortableTextEditorKeyGeneratorContext} from '../hooks/usePortableTextEditorKeyGenerator'\n\nconst debug = debugWithName('component:PortableTextEditor:Synchronizer')\n\n/**\n * @internal\n */\nexport interface SynchronizerProps extends PropsWithChildren {\n  change$: EditorChanges\n  portableTextEditor: PortableTextEditor\n  isPending: React.MutableRefObject<boolean | null>\n  keyGenerator: () => string\n  onChange: (change: EditorChange) => void\n  readOnly: boolean\n  value: PortableTextBlock[] | undefined\n}\n\n/**\n * Synchronizes the server value with the editor, and provides various contexts for the editor state.\n * @internal\n */\nexport function Synchronizer(props: SynchronizerProps) {\n  const {change$, portableTextEditor, isPending, onChange, keyGenerator, readOnly, value} = props\n  const [selection, setSelection] = useState<EditorSelection>(null)\n  const pendingPatches = useRef<Patch[]>([])\n\n  const syncValue = useSyncValue({\n    isPending,\n    keyGenerator,\n    onChange,\n    portableTextEditor,\n    readOnly,\n  })\n\n  const onFlushPendingPatches = useCallback(() => {\n    const finalPatches = [...pendingPatches.current]\n    debug('Flushing pending patches', finalPatches)\n    if (finalPatches.length > 0) {\n      pendingPatches.current = pendingPatches.current.splice(\n        finalPatches.length,\n        pendingPatches.current.length\n      )\n      const editorValue = PortableTextEditor.getValue(portableTextEditor)\n      onChange({type: 'mutation', patches: finalPatches, snapshot: editorValue})\n    }\n  }, [portableTextEditor, onChange])\n\n  // Debounced version of flush pending patches\n  const onFlushPendingPatchesDebounced = useMemo(\n    () =>\n      debounce(onFlushPendingPatches, FLUSH_PATCHES_DEBOUNCE_MS, {\n        leading: false,\n        trailing: true,\n      }),\n    [onFlushPendingPatches]\n  )\n\n  // Flush pending patches on unmount\n  useEffect(() => {\n    return () => {\n      onFlushPendingPatches()\n    }\n  }, [onFlushPendingPatches])\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to editor changes$')\n    const sub = change$.subscribe((next: EditorChange): void => {\n      switch (next.type) {\n        case 'patch':\n          isPending.current = true\n          pendingPatches.current.push(next.patch)\n          onChange(next)\n          onFlushPendingPatchesDebounced()\n          break\n        case 'selection':\n          // Set the selection state in a transition, we don't need the state immediately.\n          startTransition(() => {\n            debug('Setting selection')\n            setSelection(next.selection)\n          })\n          onChange(next) // Keep this out of the startTransition!\n          break\n        default:\n          onChange(next)\n      }\n    })\n    return () => {\n      debug('Unsubscribing to changes$')\n      sub.unsubscribe()\n    }\n  }, [change$, onFlushPendingPatchesDebounced, onChange, syncValue, isPending])\n\n  // This hook must be set up after setting up the subscription above, or it will not pick up validation errors from the useSyncValue hook.\n  // This will cause the editor to not be able to signal a validation error and offer invalid value resolution of the initial value.\n  const isInitialValueFromProps = useRef(true)\n  useEffect(() => {\n    debug('Value from props changed, syncing new value')\n    syncValue(value)\n    // Signal that we have our first value, and are ready to roll.\n    if (isInitialValueFromProps.current) {\n      change$.next({type: 'loading', isLoading: false})\n      change$.next({type: 'ready'})\n      isInitialValueFromProps.current = false\n    }\n  }, [change$, syncValue, value])\n\n  return (\n    <PortableTextEditorKeyGeneratorContext.Provider value={keyGenerator}>\n      <PortableTextEditorContext.Provider value={portableTextEditor}>\n        <PortableTextEditorValueContext.Provider value={value}>\n          <PortableTextEditorReadOnlyContext.Provider value={readOnly}>\n            <PortableTextEditorSelectionContext.Provider value={selection}>\n              {props.children}\n            </PortableTextEditorSelectionContext.Provider>\n          </PortableTextEditorReadOnlyContext.Provider>\n        </PortableTextEditorValueContext.Provider>\n      </PortableTextEditorContext.Provider>\n    </PortableTextEditorKeyGeneratorContext.Provider>\n  )\n}\n","import React, {PropsWithChildren, createRef} from 'react'\nimport {\n  ArrayDefinition,\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  SpanSchemaType,\n} from '@sanity/types'\nimport {Subject} from 'rxjs'\nimport {compileType} from '../utils/schema'\nimport {getPortableTextMemberSchemaTypes} from '../utils/getPortableTextMemberSchemaTypes'\nimport {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorChange,\n  EditorChanges,\n  EditorSelection,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {debugWithName} from '../utils/debug'\nimport {defaultKeyGenerator} from './hooks/usePortableTextEditorKeyGenerator'\nimport {SlateContainer} from './components/SlateContainer'\nimport {Synchronizer} from './components/Synchronizer'\n\nconst debug = debugWithName('component:PortableTextEditor')\n\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n */\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n */\nexport type PortableTextEditorProps = PropsWithChildren<{\n  /**\n   * Function that gets called when the editor changes the value\n   */\n  onChange: (change: EditorChange) => void\n\n  /**\n   * Schema type for the portable text field\n   */\n  schemaType: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n\n  /**\n   * Maximum number of blocks to allow within the editor\n   */\n  maxBlocks?: number | string\n\n  /**\n   * Whether or not the editor should be in read-only mode\n   */\n  readOnly?: boolean\n\n  /**\n   * The current value of the portable text field\n   */\n  value?: PortableTextBlock[]\n\n  /**\n   * Function used to generate keys for array items (`_key`)\n   */\n  keyGenerator?: () => string\n\n  /**\n   * Observable of local and remote patches for the edited value.\n   */\n  patches$?: PatchObservable\n\n  /**\n   * Backward compatibility (renamed to patches$).\n   */\n  incomingPatches$?: PatchObservable\n}>\n\n/**\n * The main Portable Text Editor component.\n * @public\n */\nexport class PortableTextEditor extends React.Component<PortableTextEditorProps> {\n  /**\n   * An observable of all the editor changes.\n   */\n  public change$: EditorChanges = new Subject()\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  public schemaTypes: PortableTextMemberSchemaTypes\n  /**\n   * The editor API (currently implemented with Slate).\n   */\n  private editable?: EditableAPI\n  /**\n   * This reference tracks if we are in a pending local edit state. If local changes are unsettled (patches yet not submitted and result returned),\n   * we use it to make sure we don't handle any new props.value or remote patches that can interfere with the user's typing until the local changes are solved.\n   */\n  private isPending: React.MutableRefObject<boolean | null>\n\n  constructor(props: PortableTextEditorProps) {\n    super(props)\n\n    if (!props.schemaType) {\n      throw new Error('PortableTextEditor: missing \"type\" property')\n    }\n\n    if (props.incomingPatches$) {\n      console.warn(`The prop 'incomingPatches$' is deprecated and renamed to 'patches$'`)\n    }\n\n    this.change$.next({type: 'loading', isLoading: true})\n\n    this.isPending = createRef()\n    this.isPending.current = false\n\n    this.schemaTypes = getPortableTextMemberSchemaTypes(\n      props.schemaType.hasOwnProperty('jsonType') ? props.schemaType : compileType(props.schemaType)\n    )\n  }\n\n  componentDidUpdate(prevProps: PortableTextEditorProps) {\n    // Set up the schema type lookup table again if the source schema type changes\n    if (this.props.schemaType !== prevProps.schemaType) {\n      this.schemaTypes = getPortableTextMemberSchemaTypes(\n        this.props.schemaType.hasOwnProperty('jsonType')\n          ? this.props.schemaType\n          : compileType(this.props.schemaType)\n      )\n    }\n  }\n\n  public setEditable = (editable: EditableAPI) => {\n    this.editable = {...this.editable, ...editable}\n  }\n\n  render() {\n    const {onChange, value, children, patches$, incomingPatches$} = this.props\n    const {change$, isPending} = this\n    const _patches$ = incomingPatches$ || patches$ // Backward compatibility\n\n    const maxBlocks =\n      typeof this.props.maxBlocks === 'undefined'\n        ? undefined\n        : parseInt(this.props.maxBlocks.toString(), 10) || undefined\n\n    const readOnly = Boolean(this.props.readOnly)\n    const keyGenerator = this.props.keyGenerator || defaultKeyGenerator\n    return (\n      <SlateContainer\n        isPending={isPending}\n        keyGenerator={keyGenerator}\n        maxBlocks={maxBlocks}\n        patches$={_patches$}\n        portableTextEditor={this}\n        readOnly={readOnly}\n      >\n        <Synchronizer\n          change$={change$}\n          isPending={isPending}\n          keyGenerator={keyGenerator}\n          onChange={onChange}\n          portableTextEditor={this}\n          readOnly={readOnly}\n          value={value}\n        >\n          {children}\n        </Synchronizer>\n      </SlateContainer>\n    )\n  }\n\n  // Static API methods\n  static activeAnnotations = (editor: PortableTextEditor): PortableTextObject[] => {\n    return editor && editor.editable ? editor.editable.activeAnnotations() : []\n  }\n  static addAnnotation = (\n    editor: PortableTextEditor,\n    type: ObjectSchemaType,\n    value?: {[prop: string]: unknown}\n  ): {spanPath: Path; markDefPath: Path} | undefined => editor.editable?.addAnnotation(type, value)\n  static blur = (editor: PortableTextEditor): void => {\n    debug('Host blurred')\n    editor.editable?.blur()\n  }\n  static delete = (\n    editor: PortableTextEditor,\n    selection: EditorSelection,\n    options?: EditableAPIDeleteOptions\n  ) => editor.editable?.delete(selection, options)\n  static findDOMNode = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild\n  ) => {\n    // eslint-disable-next-line react/no-find-dom-node\n    return editor.editable?.findDOMNode(element)\n  }\n  static findByPath = (editor: PortableTextEditor, path: Path) => {\n    return editor.editable?.findByPath(path) || []\n  }\n  static focus = (editor: PortableTextEditor): void => {\n    debug('Host requesting focus')\n    editor.editable?.focus()\n  }\n  static focusBlock = (editor: PortableTextEditor) => {\n    return editor.editable?.focusBlock()\n  }\n  static focusChild = (editor: PortableTextEditor): PortableTextChild | undefined => {\n    return editor.editable?.focusChild()\n  }\n  static getSelection = (editor: PortableTextEditor) => {\n    return editor.editable ? editor.editable.getSelection() : null\n  }\n  static getValue = (editor: PortableTextEditor) => {\n    return editor.editable?.getValue()\n  }\n  static hasBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    return editor.editable?.hasBlockStyle(blockStyle)\n  }\n  static hasListStyle = (editor: PortableTextEditor, listStyle: string) => {\n    return editor.editable?.hasListStyle(listStyle)\n  }\n  static isCollapsedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isCollapsedSelection()\n  static isExpandedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isExpandedSelection()\n  static isMarkActive = (editor: PortableTextEditor, mark: string) =>\n    editor.editable?.isMarkActive(mark)\n  static insertChild = (\n    editor: PortableTextEditor,\n    type: SpanSchemaType | ObjectSchemaType,\n    value?: {[prop: string]: unknown}\n  ): Path | undefined => {\n    debug(`Host inserting child`)\n    return editor.editable?.insertChild(type, value)\n  }\n  static insertBlock = (\n    editor: PortableTextEditor,\n    type: BlockSchemaType | ObjectSchemaType,\n    value?: {[prop: string]: unknown}\n  ): Path | undefined => {\n    return editor.editable?.insertBlock(type, value)\n  }\n  static insertBreak = (editor: PortableTextEditor): void => {\n    return editor.editable?.insertBreak()\n  }\n  static isVoid = (editor: PortableTextEditor, element: PortableTextBlock | PortableTextChild) => {\n    return editor.editable?.isVoid(element)\n  }\n  static isObjectPath = (editor: PortableTextEditor, path: Path): boolean => {\n    if (!path || !Array.isArray(path)) return false\n    const isChildObjectEditPath = path.length > 3 && path[1] === 'children'\n    const isBlockObjectEditPath = path.length > 1 && path[1] !== 'children'\n    return isBlockObjectEditPath || isChildObjectEditPath\n  }\n  static marks = (editor: PortableTextEditor) => {\n    return editor.editable?.marks()\n  }\n  static select = (editor: PortableTextEditor, selection: EditorSelection | null) => {\n    debug(`Host setting selection`, selection)\n    editor.editable?.select(selection)\n  }\n  static removeAnnotation = (editor: PortableTextEditor, type: ObjectSchemaType) =>\n    editor.editable?.removeAnnotation(type)\n  static toggleBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    debug(`Host is toggling block style`)\n    return editor.editable?.toggleBlockStyle(blockStyle)\n  }\n  static toggleList = (editor: PortableTextEditor, listStyle: string): void => {\n    return editor.editable?.toggleList(listStyle)\n  }\n  static toggleMark = (editor: PortableTextEditor, mark: string): void => {\n    debug(`Host toggling mark`, mark)\n    editor.editable?.toggleMark(mark)\n  }\n}\n","import {isEqual} from 'lodash'\nimport type {Patch} from '../types/patch'\n\n/**\n * Try to compact a set of patches\n *\n */\nexport function compactPatches(patches: Patch[]) {\n  // If the last patch is unsetting everything, just do that\n  const lastPatch = patches.slice(-1)[0]\n  if (lastPatch && lastPatch.type === 'unset' && lastPatch.path.length === 0) {\n    return [lastPatch]\n  }\n  let finalPatches = patches\n  // Run through the patches and remove any redundant ones.\n  finalPatches = finalPatches.filter((patch, index) => {\n    if (!patch) {\n      return false\n    }\n    const nextPatch = finalPatches[index + 1]\n    if (\n      nextPatch &&\n      nextPatch.type === 'set' &&\n      patch.type === 'set' &&\n      isEqual(patch.path, nextPatch.path)\n    ) {\n      return false\n    }\n    return true\n  })\n  if (finalPatches.length !== patches.length) {\n    return finalPatches\n  }\n  return patches\n}\n","import {isEqual} from 'lodash'\nimport {Path, PortableTextBlock} from '@sanity/types'\nimport {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[]\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: Path = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' && '_key' in point.path[0] && point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' && '_key' in point.path[2] && point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find((blk) => blk._key === blockKey)\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (!block.children || (Array.isArray(block.children) && block.children.length === 0)) {\n      return null\n    }\n    const child =\n      Array.isArray(block.children) && block.children.find((cld) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (anchor && value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus}\n  }\n  return null\n}\n","import {PortableTextObject} from '@sanity/types'\nimport React, {useCallback} from 'react'\n\ntype Props = {\n  annotation: PortableTextObject\n  children: React.ReactNode\n}\nexport function DefaultAnnotation(props: Props) {\n  // eslint-disable-next-line no-alert\n  const handleClick = useCallback(() => alert(JSON.stringify(props.annotation)), [props.annotation])\n  return (\n    <span style={{color: 'blue'}} onClick={handleClick}>\n      {props.children}\n    </span>\n  )\n}\n","import React, {\n  ReactElement,\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\nimport {Text} from 'slate'\nimport {RenderLeafProps, useSelected} from '@sanity/slate-react'\nimport {isEqual, uniq} from 'lodash'\nimport {Path, PortableTextObject, PortableTextTextBlock} from '@sanity/types'\nimport {\n  RenderChildFunction,\n  PortableTextMemberSchemaTypes,\n  RenderAnnotationFunction,\n  RenderDecoratorFunction,\n  BlockDecoratorRenderProps,\n  BlockAnnotationRenderProps,\n  BlockChildRenderProps,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {DefaultAnnotation} from '../nodes/DefaultAnnotation'\nimport {usePortableTextEditor} from '../hooks/usePortableTextEditor'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('components:Leaf')\n\nconst EMPTY_MARKS: string[] = []\n\n/**\n * @internal\n */\nexport interface LeafProps extends RenderLeafProps {\n  children: ReactElement\n  schemaTypes: PortableTextMemberSchemaTypes\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\n/**\n * Renders Portable Text span nodes in Slate\n * @internal\n */\nexport const Leaf = (props: LeafProps) => {\n  const {attributes, children, leaf, schemaTypes, renderChild, renderDecorator, renderAnnotation} =\n    props\n  const spanRef = React.useRef<HTMLElement>(null)\n  const portableTextEditor = usePortableTextEditor()\n  const blockSelected = useSelected()\n  const [focused, setFocused] = useState(false)\n  const [selected, setSelected] = useState(false)\n  const block = children.props.parent as PortableTextTextBlock | undefined\n  const path: Path = useMemo(\n    () => (block ? [{_key: block?._key}, 'children', {_key: leaf._key}] : []),\n    [block, leaf._key]\n  )\n  const decoratorValues = useMemo(\n    () => schemaTypes.decorators.map((dec) => dec.value),\n    [schemaTypes.decorators]\n  )\n  const marks: string[] = useMemo(\n    () => uniq((leaf.marks || EMPTY_MARKS).filter((mark) => decoratorValues.includes(mark))),\n    [decoratorValues, leaf.marks]\n  )\n  const annotationMarks = Array.isArray(leaf.marks) ? leaf.marks : EMPTY_MARKS\n  const annotations = useMemo(\n    () =>\n      annotationMarks\n        .map(\n          (mark) =>\n            !decoratorValues.includes(mark) && block?.markDefs?.find((def) => def._key === mark)\n        )\n        .filter(Boolean) as PortableTextObject[],\n    [annotationMarks, block, decoratorValues]\n  )\n\n  const shouldTrackSelectionAndFocus = annotations.length > 0 && blockSelected\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(false)\n      return\n    }\n    const sel = PortableTextEditor.getSelection(portableTextEditor)\n    if (\n      sel &&\n      isEqual(sel.focus.path, path) &&\n      PortableTextEditor.isCollapsedSelection(portableTextEditor)\n    ) {\n      startTransition(() => {\n        setFocused(true)\n      })\n    }\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor])\n\n  // Function to check if this leaf is currently inside the user's text selection\n  const setSelectedFromRange = useCallback(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return\n    }\n    debug('Setting selection and focus from range')\n    const winSelection = window.getSelection()\n    if (!winSelection) {\n      setSelected(false)\n      return\n    }\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0)\n      if (spanRef.current && range.intersectsNode(spanRef.current)) {\n        setSelected(true)\n      } else {\n        setSelected(false)\n      }\n    } else {\n      setSelected(false)\n    }\n  }, [shouldTrackSelectionAndFocus])\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return undefined\n    }\n    const sub = portableTextEditor.change$.subscribe((next) => {\n      if (next.type === 'blur') {\n        setFocused(false)\n        setSelected(false)\n        return\n      }\n      if (next.type === 'focus') {\n        const sel = PortableTextEditor.getSelection(portableTextEditor)\n        if (\n          sel &&\n          isEqual(sel.focus.path, path) &&\n          PortableTextEditor.isCollapsedSelection(portableTextEditor)\n        ) {\n          setFocused(true)\n        }\n        setSelectedFromRange()\n        return\n      }\n      if (next.type === 'selection') {\n        if (\n          next.selection &&\n          isEqual(next.selection.focus.path, path) &&\n          PortableTextEditor.isCollapsedSelection(portableTextEditor)\n        ) {\n          setFocused(true)\n        } else {\n          setFocused(false)\n        }\n        setSelectedFromRange()\n      }\n    })\n    return () => {\n      sub.unsubscribe()\n    }\n  }, [path, portableTextEditor, setSelectedFromRange, shouldTrackSelectionAndFocus])\n\n  useEffect(() => setSelectedFromRange(), [setSelectedFromRange])\n\n  const content = useMemo(() => {\n    let returnedChildren = children\n    // Render text nodes\n    if (Text.isText(leaf) && leaf._type === schemaTypes.span.name) {\n      marks.forEach((mark) => {\n        const schemaType = schemaTypes.decorators.find((dec) => dec.value === mark)\n        if (schemaType && renderDecorator) {\n          const _props: Omit<BlockDecoratorRenderProps, 'type'> = Object.defineProperty(\n            {\n              children: returnedChildren,\n              editorElementRef: spanRef,\n              focused,\n              path,\n              selected,\n              schemaType,\n              value: mark,\n            },\n            'type',\n            {\n              enumerable: false,\n              get() {\n                console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\")\n                return schemaType\n              },\n            }\n          )\n          returnedChildren = renderDecorator(_props as BlockDecoratorRenderProps)\n        }\n      })\n\n      if (block && annotations.length > 0) {\n        annotations.forEach((annotation) => {\n          const schemaType = schemaTypes.annotations.find((t) => t.name === annotation._type)\n          if (schemaType) {\n            if (renderAnnotation) {\n              const _props: Omit<BlockAnnotationRenderProps, 'type'> = Object.defineProperty(\n                {\n                  block,\n                  children: returnedChildren,\n                  editorElementRef: spanRef,\n                  focused,\n                  path,\n                  selected,\n                  schemaType,\n                  value: annotation,\n                },\n                'type',\n                {\n                  enumerable: false,\n                  get() {\n                    console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\")\n                    return schemaType\n                  },\n                }\n              )\n\n              returnedChildren = (\n                <span ref={spanRef}>{renderAnnotation(_props as BlockAnnotationRenderProps)}</span>\n              )\n            } else {\n              returnedChildren = (\n                <DefaultAnnotation annotation={annotation}>\n                  <span ref={spanRef}>{returnedChildren}</span>\n                </DefaultAnnotation>\n              )\n            }\n          }\n        })\n      }\n      if (block && renderChild) {\n        const child = block.children.find((_child) => _child._key === leaf._key) // Ensure object equality\n        if (child) {\n          const defaultRendered = <>{returnedChildren}</>\n          const _props: Omit<BlockChildRenderProps, 'type'> = Object.defineProperty(\n            {\n              annotations,\n              children: defaultRendered,\n              editorElementRef: spanRef,\n              focused,\n              path,\n              schemaType: schemaTypes.span,\n              selected,\n              value: child,\n            },\n            'type',\n            {\n              enumerable: false,\n              get() {\n                console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\")\n                return schemaTypes.span\n              },\n            }\n          )\n          returnedChildren = renderChild(_props as BlockChildRenderProps)\n        }\n      }\n    }\n    return returnedChildren\n  }, [\n    annotations,\n    block,\n    children,\n    focused,\n    leaf,\n    marks,\n    path,\n    renderAnnotation,\n    renderChild,\n    renderDecorator,\n    schemaTypes.annotations,\n    schemaTypes.decorators,\n    schemaTypes.span,\n    selected,\n  ])\n  return useMemo(\n    () => (\n      <span key={leaf._key} {...attributes} ref={spanRef}>\n        {content}\n      </span>\n    ),\n    [leaf, attributes, content]\n  )\n}\n","import {PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport React from 'react'\n\ntype Props = {\n  value: PortableTextBlock | PortableTextChild\n}\n\nconst DefaultObject = (props: Props): JSX.Element => {\n  return (\n    <div>\n      <pre>{JSON.stringify(props.value, null, 2)}</pre>\n    </div>\n  )\n}\n\nexport default DefaultObject\n","import styled from 'styled-components'\n\nexport const DefaultBlockObject = styled.div`\n  user-select: none;\n  border: ${(props: {selected: boolean}) => {\n    if (props.selected) {\n      return '1px solid blue'\n    }\n    return '1px solid transparent'\n  }};\n`\n\nexport const DefaultInlineObject = styled.span`\n  background: #999;\n  border: ${(props: {selected: boolean}) => {\n    if (props.selected) {\n      return '1px solid blue'\n    }\n    return '1px solid transparent'\n  }};\n`\n\ntype ListItemProps = {listLevel: number; listStyle: string}\n\nexport const DefaultListItem = styled.div<ListItemProps>`\n  &.pt-list-item {\n    width: fit-content;\n    position: relative;\n    display: block;\n\n    /* Important 'transform' in order to force refresh the ::before and ::after rules\n      in Webkit: https://stackoverflow.com/a/21947628/831480\n    */\n    transform: translateZ(0);\n    margin-left: ${(props: ListItemProps) => getLeftPositionForListLevel(props.listLevel)};\n  }\n  &.pt-list-item > .pt-list-item-inner {\n    display: flex;\n    margin: 0;\n    padding: 0;\n    &:before {\n      justify-content: flex-start;\n      vertical-align: top;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner:before {\n      content: '${(props: ListItemProps) =>\n        getContentForListLevelAndStyle(props.listLevel, props.listStyle)}';\n      font-size: 0.4375rem; /* 7px */\n      line-height: 1.5rem; /* Same as body text */\n      /* Optical alignment */\n      position: relative;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner {\n    &:before {\n      min-width: 1.5rem; /* Make sure space between bullet and text never shrinks */\n    }\n  }\n  &.pt-list-item-number {\n    counter-increment: ${(props: {listLevel: number}) =>\n      getCounterIncrementForListLevel(props.listLevel)};\n    counter-reset: ${(props: {listLevel: number}) => getCounterResetForListLevel(props.listLevel)};\n  }\n  & + :not(.pt-list-item-number) {\n    counter-reset: listItemNumber;\n  }\n  &.pt-list-item-number > .pt-list-item-inner:before {\n    content: ${(props) => getCounterContentForListLevel(props.listLevel)};\n    min-width: 1.5rem; /* Make sure space between number and text never shrinks */\n    /* Optical alignment */\n    position: relative;\n    top: 1px;\n  }\n`\n\nexport const DefaultListItemInner = styled.div``\n\nfunction getLeftPositionForListLevel(level: number) {\n  switch (Number(level)) {\n    case 1:\n      return '1.5em'\n    case 2:\n      return '3em'\n    case 3:\n      return '4.5em'\n    case 4:\n      return '6em'\n    case 5:\n      return '7.5em'\n    case 6:\n      return '9em'\n    case 7:\n      return '10.5em'\n    case 8:\n      return '12em'\n    case 9:\n      return '13.5em'\n    case 10:\n      return '15em'\n    default:\n      return '0em'\n  }\n}\n\nconst bullets = ['●', '○', '■']\n\nfunction getContentForListLevelAndStyle(level: number, style: string) {\n  const normalizedLevel = (level - 1) % 3\n  if (style === 'bullet') {\n    return bullets[normalizedLevel]\n  }\n  return '*'\n}\n\nfunction getCounterIncrementForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return 'listItemNumber'\n    case 2:\n      return 'listItemAlpha'\n    case 3:\n      return 'listItemRoman'\n    case 4:\n      return 'listItemNumberNext'\n    case 5:\n      return 'listItemLetterNext'\n    case 6:\n      return 'listItemRomanNext'\n    case 7:\n      return 'listItemNumberNextNext'\n    case 8:\n      return 'listItemAlphaNextNext'\n    case 9:\n      return 'listItemRomanNextNext'\n    default:\n      return 'listItemNumberNextNextNext'\n  }\n}\n\nfunction getCounterResetForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return 'listItemAlpha'\n    case 2:\n      return 'listItemRoman'\n    case 3:\n      return 'listItemNumberNext'\n    case 4:\n      return 'listItemLetterNext'\n    case 5:\n      return 'listItemRomanNext'\n    case 6:\n      return 'listItemNumberNextNext'\n    case 7:\n      return 'listItemAlphaNextNext'\n    case 8:\n      return 'listItemRomanNextNext'\n    case 9:\n      return 'listItemNumberNextNextNext'\n    default:\n      return 'listItemNumberNextNextNext'\n  }\n}\n\nfunction getCounterContentForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return `counter(listItemNumber) '. '`\n    case 2:\n      return `counter(listItemAlpha, lower-alpha) '. '`\n    case 3:\n      return `counter(listItemRoman, lower-roman) '. '`\n    case 4:\n      return `counter(listItemNumberNext) '. '`\n    case 5:\n      return `counter(listItemLetterNext, lower-alpha) '. '`\n    case 6:\n      return `counter(listItemRomanNext, lower-roman) '. '`\n    case 7:\n      return `counter(listItemNumberNextNext) '. '`\n    case 8:\n      return `counter(listItemAlphaNextNext, lower-alpha) '. '`\n    case 9:\n      return `counter(listItemRomanNextNext, lower-roman) '. '`\n    default:\n      return `counter(listItemNumberNextNextNext) '. '`\n  }\n}\n","import React, {useState, useRef, useMemo, useCallback, DragEvent, useEffect} from 'react'\nimport {Element as SlateElement, Transforms, Path, Editor} from 'slate'\nimport {ReactEditor, useSlateStatic} from '@sanity/slate-react'\nimport {debugWithName} from '../../utils/debug'\nimport {\n  IS_DRAGGING_ELEMENT_TARGET,\n  IS_DRAGGING_BLOCK_ELEMENT,\n  IS_DRAGGING,\n  IS_DRAGGING_BLOCK_TARGET_POSITION,\n} from '../../utils/weakMaps'\n\nconst debug = debugWithName('components:DraggableBlock')\nconst debugRenders = false\n\n/**\n * @internal\n */\nexport interface DraggableBlockProps {\n  children: React.ReactNode\n  element: SlateElement\n  readOnly: boolean\n  blockRef: React.MutableRefObject<HTMLDivElement | null>\n}\n\n/**\n * Implements drag and drop functionality on editor block nodes\n * @internal\n */\nexport const DraggableBlock = ({children, element, readOnly, blockRef}: DraggableBlockProps) => {\n  const editor = useSlateStatic()\n  const dragGhostRef: React.MutableRefObject<undefined | HTMLElement> = useRef()\n  const [isDragOver, setIsDragOver] = useState(false)\n  const isVoid = useMemo(() => Editor.isVoid(editor, element), [editor, element])\n  const isInline = useMemo(() => Editor.isInline(editor, element), [editor, element])\n\n  const [blockElement, setBlockElement] = useState<HTMLElement | null>(null)\n\n  useEffect(\n    () => setBlockElement(blockRef ? blockRef.current : ReactEditor.toDOMNode(editor, element)),\n    [editor, element, blockRef]\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragOver = useCallback(\n    (event: DragEvent) => {\n      const isMyDragOver = IS_DRAGGING_BLOCK_ELEMENT.get(editor)\n      // debug('Drag over', blockElement)\n      if (!isMyDragOver || !blockElement) {\n        return\n      }\n      event.preventDefault()\n      event.dataTransfer.dropEffect = 'move'\n      IS_DRAGGING_ELEMENT_TARGET.set(editor, element)\n      const elementRect = blockElement.getBoundingClientRect()\n      const offset = elementRect.top\n      const height = elementRect.height\n      const Y = event.pageY\n      const loc = Math.abs(offset - Y)\n      let position: 'top' | 'bottom' = 'bottom'\n      if (element === editor.children[0]) {\n        position = 'top'\n      } else if (loc < height / 2) {\n        position = 'top'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      } else {\n        position = 'bottom'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      }\n      if (isMyDragOver === element) {\n        event.dataTransfer.dropEffect = 'none'\n        return\n      }\n      setIsDragOver(true)\n    },\n    [blockElement, editor, element]\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragLeave = useCallback(() => {\n    setIsDragOver(false)\n  }, [])\n\n  // Note: this is called for the dragging block\n  const handleDragEnd = useCallback(\n    (event: DragEvent) => {\n      const targetBlock = IS_DRAGGING_ELEMENT_TARGET.get(editor)\n      if (targetBlock) {\n        IS_DRAGGING.set(editor, false)\n        event.preventDefault()\n        event.stopPropagation()\n        IS_DRAGGING_ELEMENT_TARGET.delete(editor)\n        if (dragGhostRef.current) {\n          debug('Removing drag ghost')\n          document.body.removeChild(dragGhostRef.current)\n        }\n        const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n        IS_DRAGGING_BLOCK_TARGET_POSITION.delete(editor)\n        let targetPath = ReactEditor.findPath(editor, targetBlock)\n        const myPath = ReactEditor.findPath(editor, element)\n        const isBefore = Path.isBefore(myPath, targetPath)\n        if (dragPosition === 'bottom' && !isBefore) {\n          // If it is already at the bottom, don't do anything.\n          if (targetPath[0] >= editor.children.length - 1) {\n            debug('target is already at the bottom, not moving')\n            return\n          }\n          const originalPath = targetPath\n          targetPath = Path.next(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath\n            )}`\n          )\n        }\n        if (dragPosition === 'top' && isBefore && targetPath[0] !== editor.children.length - 1) {\n          const originalPath = targetPath\n          targetPath = Path.previous(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath\n            )}`\n          )\n        }\n        if (Path.equals(targetPath, myPath)) {\n          event.preventDefault()\n          debug('targetPath and myPath is the same, not moving')\n          return\n        }\n        debug(\n          `Moving element ${element._key} from path ${JSON.stringify(myPath)} to ${JSON.stringify(\n            targetPath\n          )} (${dragPosition})`\n        )\n        Transforms.moveNodes(editor, {at: myPath, to: targetPath})\n        editor.onChange()\n        return\n      }\n      debug('No target element, not doing anything')\n    },\n    [editor, element]\n  )\n  // Note: this is called not for the dragging block, but for the drop target\n  const handleDrop = useCallback(\n    (event: DragEvent) => {\n      if (IS_DRAGGING_BLOCK_ELEMENT.get(editor)) {\n        debug('On drop (prevented)', element)\n        event.preventDefault()\n        event.stopPropagation()\n        setIsDragOver(false)\n      }\n    },\n    [editor, element]\n  )\n  // Note: this is called for the dragging block\n  const handleDrag = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid) {\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        return\n      }\n      IS_DRAGGING.set(editor, true)\n      IS_DRAGGING_BLOCK_ELEMENT.set(editor, element)\n      event.stopPropagation() // Stop propagation so that leafs don't get this and take focus/selection!\n\n      const target = event.target\n\n      if (target instanceof HTMLElement) {\n        target.style.opacity = '1'\n      }\n    },\n    [editor, element, isVoid]\n  )\n\n  // Note: this is called for the dragging block\n  const handleDragStart = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid || isInline) {\n        debug('Not dragging block')\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        IS_DRAGGING.set(editor, false)\n        return\n      }\n      debug('Drag start')\n      IS_DRAGGING.set(editor, true)\n      if (event.dataTransfer) {\n        event.dataTransfer.setData('application/portable-text', 'something')\n        event.dataTransfer.effectAllowed = 'move'\n      }\n      // Clone blockElement so that it will not be visually clipped by scroll-containers etc.\n      // The application that uses the portable-text-editor may indicate the element used as\n      // drag ghost by adding a truthy data attribute 'data-pt-drag-ghost-element' to a HTML element.\n      if (blockElement && blockElement instanceof HTMLElement) {\n        let dragGhost = blockElement.cloneNode(true) as HTMLElement\n        const customGhost = dragGhost.querySelector('[data-pt-drag-ghost-element]')\n        if (customGhost) {\n          dragGhost = customGhost as HTMLElement\n        }\n\n        // Set the `data-dragged` attribute so the consumer can style the element while it’s dragged\n        dragGhost.setAttribute('data-dragged', '')\n\n        if (document.body) {\n          dragGhostRef.current = dragGhost\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n          const rect = blockElement.getBoundingClientRect()\n          const x = event.clientX - rect.left\n          const y = event.clientY - rect.top\n          dragGhost.style.width = `${rect.width}px`\n          dragGhost.style.height = `${rect.height}px`\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        }\n      }\n      handleDrag(event)\n    },\n    [blockElement, editor, handleDrag, isInline, isVoid]\n  )\n\n  const isDraggingOverFirstBlock =\n    isDragOver && editor.children[0] === IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const isDraggingOverLastBlock =\n    isDragOver &&\n    editor.children[editor.children.length - 1] === IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n\n  const isDraggingOverTop =\n    isDraggingOverFirstBlock ||\n    (isDragOver && !isDraggingOverFirstBlock && !isDraggingOverLastBlock && dragPosition === 'top')\n  const isDraggingOverBottom =\n    isDraggingOverLastBlock ||\n    (isDragOver &&\n      !isDraggingOverFirstBlock &&\n      !isDraggingOverLastBlock &&\n      dragPosition === 'bottom')\n\n  const dropIndicator = useMemo(\n    () => (\n      <div\n        className=\"pt-drop-indicator\"\n        style={{\n          position: 'absolute',\n          width: '100%',\n          height: 1,\n          borderBottom: '1px solid currentColor',\n          zIndex: 5,\n        }}\n      />\n    ),\n    []\n  )\n\n  if (readOnly) {\n    return <>{children}</>\n  }\n\n  if (debugRenders) {\n    debug('render')\n  }\n\n  return (\n    <div\n      draggable={isVoid}\n      onDragStart={handleDragStart}\n      onDrag={handleDrag}\n      onDragOver={handleDragOver}\n      onDragLeave={handleDragLeave}\n      onDragEnd={handleDragEnd}\n      onDrop={handleDrop}\n    >\n      {isDraggingOverTop && dropIndicator}\n      {children}\n      {isDraggingOverBottom && dropIndicator}\n    </div>\n  )\n}\n","/* eslint-disable complexity */\n/* eslint-disable max-statements */\nimport React, {ReactElement, FunctionComponent, useRef, useMemo} from 'react'\nimport {Element as SlateElement, Editor, Range} from 'slate'\nimport {Path, PortableTextChild, PortableTextObject, PortableTextTextBlock} from '@sanity/types'\nimport {useSelected, useSlateStatic, ReactEditor, RenderElementProps} from '@sanity/slate-react'\nimport {\n  BlockRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {fromSlateValue} from '../../utils/values'\nimport {debugWithName} from '../../utils/debug'\nimport {KEY_TO_VALUE_ELEMENT} from '../../utils/weakMaps'\nimport ObjectNode from '../nodes/DefaultObject'\nimport {DefaultBlockObject, DefaultListItem, DefaultListItemInner} from '../nodes/index'\nimport {DraggableBlock} from './DraggableBlock'\n\nconst debug = debugWithName('components:Element')\nconst debugRenders = false\nconst EMPTY_ANNOTATIONS: PortableTextObject[] = []\n\n/**\n * @internal\n */\nexport interface ElementProps {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  schemaTypes: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n}\n\nconst inlineBlockStyle = {display: 'inline-block'}\n\n/**\n * Renders Portable Text block and inline object nodes in Slate\n * @internal\n */\nexport const Element: FunctionComponent<ElementProps> = ({\n  attributes,\n  children,\n  element,\n  schemaTypes,\n  readOnly,\n  renderBlock,\n  renderChild,\n  renderListItem,\n  renderStyle,\n  spellCheck,\n}) => {\n  const editor = useSlateStatic()\n  const selected = useSelected()\n  const blockRef = useRef<HTMLDivElement | null>(null)\n  const inlineBlockObjectRef = useRef(null)\n  const focused = (selected && editor.selection && Range.isCollapsed(editor.selection)) || false\n\n  const value = useMemo(\n    () => fromSlateValue([element], schemaTypes.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0],\n    [editor, element, schemaTypes.block.name]\n  )\n\n  let renderedBlock = children\n\n  let className\n\n  const blockPath: Path = useMemo(() => [{_key: element._key}], [element])\n\n  if (typeof element._type !== 'string') {\n    throw new Error(`Expected element to have a _type property`)\n  }\n\n  if (typeof element._key !== 'string') {\n    throw new Error(`Expected element to have a _key property`)\n  }\n\n  // Test for inline objects first\n  if (editor.isInline(element)) {\n    const path = ReactEditor.findPath(editor, element)\n    const [block] = Editor.node(editor, path, {depth: 1})\n    const schemaType = schemaTypes.inlineObjects.find((_type) => _type.name === element._type)\n    if (!schemaType) {\n      throw new Error('Could not find type for inline block element')\n    }\n    if (SlateElement.isElement(block)) {\n      const elmPath: Path = [{_key: block._key}, 'children', {_key: element._key}]\n      if (debugRenders) {\n        debug(`Render ${element._key} (inline object)`)\n      }\n      return (\n        <span {...attributes}>\n          {/* Note that children must follow immediately or cut and selections will not work properly in Chrome. */}\n          {children}\n          <span\n            draggable={!readOnly}\n            className=\"pt-inline-object\"\n            ref={inlineBlockObjectRef}\n            key={element._key}\n            style={inlineBlockStyle}\n            contentEditable={false}\n          >\n            {renderChild &&\n              renderChild({\n                annotations: EMPTY_ANNOTATIONS, // These inline objects currently doesn't support annotations. This is a limitation of the current PT spec/model.\n                children: <ObjectNode value={value} />,\n                editorElementRef: inlineBlockObjectRef,\n                focused,\n                path: elmPath,\n                schemaType,\n                selected,\n                type: schemaType,\n                value: value as PortableTextChild,\n              })}\n            {!renderChild && <ObjectNode value={value} />}\n          </span>\n        </span>\n      )\n    }\n    throw new Error('Block not found!')\n  }\n\n  // If not inline, it's either a block (text) or a block object (non-text)\n  // NOTE: text blocks aren't draggable with DraggableBlock (yet?)\n  if (element._type === schemaTypes.block.name) {\n    className = `pt-block pt-text-block`\n    const isListItem = 'listItem' in element\n    if (debugRenders) {\n      debug(`Render ${element._key} (text block)`)\n    }\n    const style = ('style' in element && element.style) || 'normal'\n    className = `pt-block pt-text-block pt-text-block-style-${style}`\n    const blockStyleType = schemaTypes.styles.find((item) => item.value === style)\n    if (renderStyle && blockStyleType) {\n      renderedBlock = renderStyle({\n        block: element as PortableTextTextBlock,\n        children,\n        focused,\n        selected,\n        value: style,\n        path: blockPath,\n        schemaType: blockStyleType,\n        editorElementRef: blockRef,\n      })\n    }\n    let level\n    if (isListItem) {\n      if (typeof element.level === 'number') {\n        level = element.level\n      }\n      className += ` pt-list-item pt-list-item-${element.listItem} pt-list-item-level-${level || 1}`\n    }\n    if (editor.isListBlock(value) && isListItem && element.listItem) {\n      const listType = schemaTypes.lists.find((item) => item.value === element.listItem)\n      if (renderListItem && listType) {\n        renderedBlock = renderListItem({\n          block: value,\n          children: renderedBlock,\n          focused,\n          selected,\n          value: element.listItem,\n          path: blockPath,\n          schemaType: listType,\n          level: value.level || 1,\n          editorElementRef: blockRef,\n        })\n      } else {\n        renderedBlock = (\n          <DefaultListItem\n            listStyle={value.listItem || schemaTypes.lists[0].value}\n            listLevel={value.level || 1}\n          >\n            <DefaultListItemInner>{renderedBlock}</DefaultListItemInner>\n          </DefaultListItem>\n        )\n      }\n    }\n    const renderProps: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: renderedBlock,\n        editorElementRef: blockRef,\n        focused,\n        level,\n        listItem: isListItem ? element.listItem : undefined,\n        path: blockPath,\n        selected,\n        style,\n        schemaType: schemaTypes.block,\n        value,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\")\n          return schemaTypes.block\n        },\n      }\n    )\n\n    const propsOrDefaultRendered = renderBlock\n      ? renderBlock(renderProps as BlockRenderProps)\n      : children\n    return (\n      <div key={element._key} {...attributes} className={className} spellCheck={spellCheck}>\n        <DraggableBlock element={element} readOnly={readOnly} blockRef={blockRef}>\n          <div ref={blockRef}>{propsOrDefaultRendered}</div>\n        </DraggableBlock>\n      </div>\n    )\n  }\n  const schemaType = schemaTypes.blockObjects.find((_type) => _type.name === element._type)\n  if (!schemaType) {\n    throw new Error(`Could not find schema type for block element of _type ${element._type}`)\n  }\n  if (debugRenders) {\n    debug(`Render ${element._key} (object block)`)\n  }\n  className = 'pt-block pt-object-block'\n  const block = fromSlateValue(\n    [element],\n    schemaTypes.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor)\n  )[0]\n  let renderedBlockFromProps\n  if (renderBlock) {\n    const _props: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: <ObjectNode value={value} />,\n        editorElementRef: blockRef,\n        focused,\n        path: blockPath,\n        schemaType,\n        selected,\n        value: block,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\")\n          return schemaType\n        },\n      }\n    )\n    renderedBlockFromProps = renderBlock(_props as BlockRenderProps)\n  }\n  return (\n    <div key={element._key} {...attributes} className={className}>\n      {children}\n      <DraggableBlock element={element} readOnly={readOnly} blockRef={blockRef}>\n        {renderedBlockFromProps && (\n          <div ref={blockRef} contentEditable={false}>\n            {renderedBlockFromProps}\n          </div>\n        )}\n        {!renderedBlockFromProps && (\n          <DefaultBlockObject selected={selected}>\n            <ObjectNode value={value} />\n          </DefaultBlockObject>\n        )}\n      </DraggableBlock>\n    </div>\n  )\n}\n","import React, {useRef, useLayoutEffect, useEffect} from 'react'\n\nconst useIsomorphicEffect = typeof window === 'undefined' ? useEffect : useLayoutEffect\n\nexport function useForwardedRef<T>(ref: React.ForwardedRef<T>): React.MutableRefObject<T | null> {\n  const innerRef = useRef<T | null>(null)\n\n  useIsomorphicEffect(() => {\n    if (!ref) return\n\n    if (typeof ref === 'function') {\n      ref(innerRef.current)\n    } else {\n      ref.current = innerRef.current\n    }\n  })\n\n  return innerRef\n}\n","import {BaseRange, Transforms, Text} from 'slate'\nimport React, {useCallback, useMemo, useEffect, forwardRef, useState} from 'react'\nimport {\n  Editable as SlateEditable,\n  ReactEditor,\n  RenderElementProps,\n  RenderLeafProps,\n  useSlate,\n} from '@sanity/slate-react'\nimport {noop} from 'lodash'\nimport {PortableTextBlock} from '@sanity/types'\nimport {\n  EditorChange,\n  EditorSelection,\n  OnBeforeInputFn,\n  OnCopyFn,\n  OnPasteFn,\n  OnPasteResult,\n  RenderAnnotationFunction,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n  ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport {HotkeyOptions} from '../types/options'\nimport {fromSlateValue, isEqualToEmptyEditor, toSlateValue} from '../utils/values'\nimport {normalizeSelection} from '../utils/selection'\nimport {toPortableTextRange, toSlateRange} from '../utils/ranges'\nimport {debugWithName} from '../utils/debug'\nimport {usePortableTextEditorReadOnlyStatus} from './hooks/usePortableTextReadOnly'\nimport {usePortableTextEditorKeyGenerator} from './hooks/usePortableTextEditorKeyGenerator'\nimport {Leaf} from './components/Leaf'\nimport {Element} from './components/Element'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {PortableTextEditor} from './PortableTextEditor'\nimport {createWithInsertData, createWithHotkeys} from './plugins'\nimport {useForwardedRef} from './hooks/useForwardedRef'\n\nconst debug = debugWithName('component:Editable')\n\nconst PLACEHOLDER_STYLE: React.CSSProperties = {\n  opacity: 0.5,\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n}\n\nconst EMPTY_DECORATORS: BaseRange[] = []\n\n/**\n * @public\n */\nexport type PortableTextEditableProps = {\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: OnBeforeInputFn\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderListItem?: RenderListItemFunction\n  renderPlaceholder?: () => React.ReactNode\n  renderStyle?: RenderStyleFunction\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\n/**\n * @public\n */\nexport const PortableTextEditable = forwardRef(function PortableTextEditable(\n  props: PortableTextEditableProps & Omit<React.HTMLProps<HTMLDivElement>, 'as' | 'onPaste'>,\n  forwardedRef: React.ForwardedRef<HTMLDivElement>\n) {\n  const {\n    hotkeys,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const readOnly = usePortableTextEditorReadOnlyStatus()\n  const keyGenerator = usePortableTextEditorKeyGenerator()\n  const ref = useForwardedRef(forwardedRef)\n  const [hasInvalidValue, setHasInvalidValue] = useState(false)\n\n  const {change$, schemaTypes} = portableTextEditor\n  const slateEditor = useSlate()\n\n  const blockTypeName = schemaTypes.block.name\n\n  // React/UI-specific plugins\n  const withInsertData = useMemo(\n    () => createWithInsertData(change$, schemaTypes, keyGenerator),\n    [change$, keyGenerator, schemaTypes]\n  )\n  const withHotKeys = useMemo(\n    () => createWithHotkeys(schemaTypes, keyGenerator, portableTextEditor, hotkeys),\n    [hotkeys, keyGenerator, portableTextEditor, schemaTypes]\n  )\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    if (readOnly) {\n      debug('Editable is in read only mode')\n      return withInsertData(slateEditor)\n    }\n    debug('Editable is in edit mode')\n    return withInsertData(withHotKeys(slateEditor))\n  }, [readOnly, slateEditor, withHotKeys, withInsertData])\n\n  const renderElement = useCallback(\n    (eProps: RenderElementProps) => (\n      <Element\n        {...eProps}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        renderListItem={renderListItem}\n        renderStyle={renderStyle}\n        schemaTypes={schemaTypes}\n        spellCheck={spellCheck}\n      />\n    ),\n    [schemaTypes, spellCheck, readOnly, renderBlock, renderChild, renderListItem, renderStyle]\n  )\n\n  const renderLeaf = useCallback(\n    (lProps: RenderLeafProps & {leaf: Text & {placeholder?: boolean}}) => {\n      const rendered = (\n        <Leaf\n          {...lProps}\n          schemaTypes={schemaTypes}\n          renderAnnotation={renderAnnotation}\n          renderChild={renderChild}\n          renderDecorator={renderDecorator}\n          readOnly={readOnly}\n        />\n      )\n      if (renderPlaceholder && lProps.leaf.placeholder && lProps.text.text === '') {\n        return (\n          <>\n            <div style={PLACEHOLDER_STYLE} contentEditable={false}>\n              {renderPlaceholder()}\n            </div>\n            {rendered}\n          </>\n        )\n      }\n      return rendered\n    },\n    [readOnly, renderAnnotation, renderChild, renderDecorator, renderPlaceholder, schemaTypes]\n  )\n\n  const restoreSelectionFromProps = useCallback(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(slateEditor.children, blockTypeName)\n      )\n      if (normalizedSelection !== null) {\n        debug(`Normalized selection from props ${JSON.stringify(normalizedSelection)}`)\n        const slateRange = toSlateRange(normalizedSelection, slateEditor)\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set_selection operations made.\n          // The selection is usually automatically emitted to change$ by the withPortableTextSelections plugin whenever there is a set_selection operation applied.\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            change$.next({type: 'selection', selection: normalizedSelection})\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [propsSelection, slateEditor, blockTypeName, change$])\n\n  // Subscribe to change$ and restore selection from props when the editor has been initialized properly with it's value\n  useEffect(() => {\n    debug('Subscribing to editor changes$')\n    const sub = change$.subscribe((next: EditorChange): void => {\n      switch (next.type) {\n        case 'ready':\n          restoreSelectionFromProps()\n          break\n        case 'invalidValue':\n          setHasInvalidValue(true)\n          break\n        case 'value':\n          setHasInvalidValue(false)\n          break\n        default:\n      }\n    })\n    return () => {\n      debug('Unsubscribing to changes$')\n      sub.unsubscribe()\n    }\n  }, [change$, restoreSelectionFromProps])\n\n  // Restore selection from props when it changes\n  useEffect(() => {\n    if (propsSelection && !hasInvalidValue) {\n      restoreSelectionFromProps()\n    }\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps])\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: React.ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      }\n    },\n    [onCopy]\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: React.ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      event.preventDefault()\n      if (!slateEditor.selection) {\n        return\n      }\n      if (!onPaste) {\n        debug('Pasting normally')\n        slateEditor.insertData(event.clipboardData)\n        return\n      }\n      // Resolve it as promise (can be either async promise or sync return value)\n      new Promise<OnPasteResult>((resolve) => {\n        const value = PortableTextEditor.getValue(portableTextEditor)\n        const ptRange = toPortableTextRange(value, slateEditor.selection, schemaTypes)\n        const path = ptRange?.focus.path || []\n        resolve(\n          onPaste({\n            event,\n            value,\n            path,\n            schemaTypes,\n          })\n        )\n      })\n        .then((result) => {\n          debug('Custom paste function from client resolved', result)\n          change$.next({type: 'loading', isLoading: true})\n          if (!result || !result.insert) {\n            debug('No result from custom paste handler, pasting normally')\n            slateEditor.insertData(event.clipboardData)\n            return\n          }\n          if (result && result.insert) {\n            slateEditor.insertFragment(\n              toSlateValue(result.insert as PortableTextBlock[], {schemaTypes})\n            )\n            change$.next({type: 'loading', isLoading: false})\n            return\n          }\n          console.warn('Your onPaste function returned something unexpected:', result)\n        })\n        .catch((error) => {\n          change$.next({type: 'loading', isLoading: false})\n          console.error(error) // eslint-disable-line no-console\n          return error\n        })\n    },\n    [change$, onPaste, portableTextEditor, schemaTypes, slateEditor]\n  )\n\n  const handleOnFocus: React.FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      const selection = PortableTextEditor.getSelection(portableTextEditor)\n      change$.next({type: 'focus', event})\n      const newSelection = PortableTextEditor.getSelection(portableTextEditor)\n      // If the selection is the same, emit it explicitly here as there is no actual onChange event triggered.\n      if (selection === newSelection) {\n        change$.next({\n          type: 'selection',\n          selection,\n        })\n      }\n    },\n    [change$, portableTextEditor]\n  )\n\n  const handleOnBlur: React.FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      change$.next({type: 'blur', event})\n    },\n    [change$]\n  )\n\n  const handleOnBeforeInput = useCallback(\n    (event: Event) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput]\n  )\n\n  const handleKeyDown = slateEditor.pteWithHotKeys\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return noop\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  const decorate = useCallback(() => {\n    if (isEqualToEmptyEditor(slateEditor.children, schemaTypes)) {\n      return [\n        {\n          anchor: {\n            path: [0, 0],\n            offset: 0,\n          },\n          focus: {\n            path: [0, 0],\n            offset: 0,\n          },\n          placeholder: true,\n        },\n      ]\n    }\n    return EMPTY_DECORATORS\n  }, [schemaTypes, slateEditor])\n\n  // The editor\n  const slateEditable = useMemo(\n    () => (\n      <SlateEditable\n        autoFocus={false}\n        className=\"pt-editable\"\n        decorate={decorate}\n        onBlur={handleOnBlur}\n        onCopy={handleCopy}\n        onDOMBeforeInput={handleOnBeforeInput}\n        onFocus={handleOnFocus}\n        onKeyDown={handleKeyDown}\n        onPaste={handlePaste}\n        readOnly={readOnly}\n        renderElement={renderElement}\n        renderLeaf={renderLeaf}\n        scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n      />\n    ),\n    [\n      decorate,\n      handleCopy,\n      handleKeyDown,\n      handleOnBeforeInput,\n      handleOnBlur,\n      handleOnFocus,\n      handlePaste,\n      readOnly,\n      renderElement,\n      renderLeaf,\n      scrollSelectionIntoViewToSlate,\n    ]\n  )\n\n  if (!portableTextEditor) {\n    return null\n  }\n  return (\n    <div ref={ref} {...restProps}>\n      {hasInvalidValue ? null : slateEditable}\n    </div>\n  )\n})\n"],"names":["compileType","rawType","Schema","compile","name","types","get","getPortableTextMemberSchemaTypes","portableTextType","_a","_b","_c","Error","blockType","of","find","findBlockType","childrenField","fields","field","ofType","type","spanType","memberType","inlineObjectTypes","filter","blockObjectTypes","styles","resolveEnabledStyles","decorators","resolveEnabledDecorators","lists","resolveEnabledListItems","block","span","portableText","inlineObjects","blockObjects","annotations","styleField","btField","textStyles","options","list","style","value","length","listField","listItems","rootName","debug","debugWithName","namespace","concat","enabled","defaultKeyGenerator","randomKey","PortableTextEditorKeyGeneratorContext","createContext","usePortableTextEditorKeyGenerator","keyGenerator","useContext","IS_DRAGGING","WeakMap","IS_DRAGGING_BLOCK_ELEMENT","IS_DRAGGING_ELEMENT_TARGET","IS_DRAGGING_BLOCK_TARGET_POSITION","KEY_TO_SLATE_ELEMENT","KEY_TO_VALUE_ELEMENT","SLATE_TO_PORTABLE_TEXT_RANGE","diff_match_patch","Diff_Timeout","Diff_EditCost","Match_Threshold","Match_Distance","Patch_DeleteThreshold","Patch_Margin","Match_MaxBits","DIFF_DELETE","DIFF_INSERT","DIFF_EQUAL","Diff","op","text","prototype","diff_main","text1","text2","opt_checklines","opt_deadline","Number","MAX_VALUE","Date","getTime","deadline","checklines","commonlength","diff_commonPrefix","commonprefix","substring","diff_commonSuffix","commonsuffix","diffs","diff_compute_","unshift","push","diff_cleanupMerge","longtext","shorttext","i","indexOf","hm","diff_halfMatch_","text1_a","text1_b","text2_a","text2_b","mid_common","diffs_a","diffs_b","diff_lineMode_","diff_bisect_","a","diff_linesToChars_","chars1","chars2","linearray","lineArray","diff_charsToLines_","diff_cleanupSemantic","pointer","count_delete","count_insert","text_delete","text_insert","splice","subDiff","j","pop","text1_length","text2_length","max_d","Math","ceil","v_offset","v_length","v1","Array","v2","x","delta","front","k1start","k1end","k2start","k2end","d","k1","k1_offset","x1","y1","charAt","k2_offset","x2","diff_bisectSplit_","k2","y2","y","text1a","text2a","text1b","text2b","diffsb","lineHash","diff_linesToCharsMunge_","chars","lineStart","lineEnd","lineArrayLength","line","hasOwnProperty","undefined","String","fromCharCode","maxLines","charCodeAt","join","pointermin","pointermax","min","pointermid","pointerstart","floor","pointerend","diff_commonOverlap_","text_length","best","pattern","found","dmp","diff_halfMatchI_","seed","best_common","best_longtext_a","best_longtext_b","best_shorttext_a","best_shorttext_b","prefixLength","suffixLength","hm1","hm2","changes","equalities","equalitiesLength","lastEquality","length_insertions1","length_deletions1","length_insertions2","length_deletions2","max","diff_cleanupSemanticLossless","deletion","insertion","overlap_length1","overlap_length2","diff_cleanupSemanticScore_","one","two","char1","char2","nonAlphaNumeric1","match","nonAlphaNumericRegex_","nonAlphaNumeric2","whitespace1","whitespaceRegex_","whitespace2","lineBreak1","linebreakRegex_","lineBreak2","blankLine1","blanklineEndRegex_","blankLine2","blanklineStartRegex_","equality1","edit","equality2","commonOffset","commonString","bestEquality1","bestEdit","bestEquality2","bestScore","score","diff_cleanupEfficiency","pre_ins","pre_del","post_ins","post_del","diff_xIndex","loc","last_chars1","last_chars2","diff_prettyHtml","html","pattern_amp","pattern_lt","pattern_gt","pattern_para","data","replace","diff_text1","diff_text2","diff_levenshtein","levenshtein","insertions","deletions","diff_toDelta","encodeURI","diff_fromDelta","diffsLength","tokens","split","param","decodeURI","ex","n","parseInt","isNaN","match_main","match_bitap_","s","match_alphabet_","match_bitapScore_","e","accuracy","proximity","abs","score_threshold","best_loc","lastIndexOf","matchmask","bin_min","bin_mid","bin_max","last_rd","start","finish","rd","charMatch","patch_addContext_","patch","start2","length1","padding","prefix","suffix","start1","length2","patch_make","opt_b","opt_c","patches","patch_obj","patchDiffLength","char_count1","char_count2","prepatch_text","postpatch_text","diff_type","diff_text","patch_deepCopy","patchesCopy","patchCopy","patch_apply","nullPadding","patch_addPadding","patch_splitMax","results","expected_loc","start_loc","end_loc","index1","index2","mod","paddingLength","extraLength","patch_size","bigpatch","precontext","empty","shift","postcontext","patch_toText","patch_fromText","textline","textPointer","patchHeader","m","sign","toString","coords1","coords2","module","exports","setIfMissing","path","arguments","DMP.diff_match_patch","diffMatchPatch","currentValue","nextValue","map","_patch","insert","insert$1","items","position","set","unset","EMPTY_MARKDEFS","keepObjectEquality","object","keyMap","_key","isEqual","toSlateValue","_ref","schemaTypes","isArray","_type","rest","voidChildren","marks","isPortableText","textBlock","hasInlines","hasMissingStyle","hasMissingMarkDefs","markDefs","children","child","cType","cKey","cRest","__inline","Element","isElement","fromSlateValue","textBlockType","_cType","v","k","t","_i","blockValue","isEqualToEmptyEditor","Text","isText","createOperationToPatches","textBlockName","insertTextPatch","editor","operation","beforeValue","JSON","stringify","isTextBlock","textChild","isTextSpan","prevBlock","prevChild","prevText","removeTextPatch","beforeBlock","prevTextChild","setNodePatch","setNode","omitBy","default","newProperties","isUndefined","blockKey","childKey","Object","keys","forEach","keyName","val","insertNodePatch","targetKey","node","blk","splitNodePatch","splitBlock","oldBlock","targetValue","spansToUnset","slice","splitSpan","targetSpans","removeNodePatch","spanToRemove","mergeNodePatch","targetBlock","newBlock","mergedSpan","targetSpan","moveNodePatch","newPath","targetChild","childToInsert","createKeyedPath","point","blockPath","keyedBlockPath","keyedChildPath","childPath","createArrayedPath","from","Editor","nodes","at","isKeySegment","isVoid","childIndex","findIndex","toPortableTextRange","range","anchor","focus","anchorPath","offset","focusPath","toSlateRange","selection","createWithEditableAPI","portableTextEditor","withEditableAPI","setEditable","Transforms","select","onChange","ReactEditor","blur","toggleMark","mark","pteToggleMark","toggleList","listStyle","pteToggleListItem","toggleBlockStyle","blockStyle","pteToggleBlockStyle","isMarkActive","pteIsMarkActive","err","console","warn","undo","redo","slateSelection","deselect","focusBlock","isBlock","focusChild","mode","voids","pseudoBlock","blocks","insertChild","insertNode","insertBlock","hasBlockStyle","pteHasBlockStyle","hasListStyle","pteHasListStyle","element","includes","findByPath","slatePath","ptBlock","ptChild","findDOMNode","item","toDOMNode","activeAnnotations","spans","depth","def","addAnnotation","SlateElement","annotationKey","setNodes","Range","isCollapsed","pteExpandToWord","textNode","withoutNormalizing","normalize","newSelection","insertNodes","end","spanPath","markDefPath","delete","hanging","nodeAndPaths","_ref2","p","removeNodes","removeAnnotation","nodePath","isExpanded","_ref3","newMarks","getSelection","ptRange","existing","getValue","isCollapsedSelection","isExpandedSelection","insertBreak","createWithMaxBlocks","maxBlocks","withMaxBlocks","apply","rows","PRESERVE_KEYS","withPreserveKeys","fn","isPreservingKeys","createWithObjectKeys","withKeys","normalizeNode","properties","withNewKey","isEditor","entry","Node","PATCHING","withoutPatching","prev","isPatching","BEFORE","AFTER","array","index","_len","args","_key2","flatten","len","idx","normalizedIdx","copy","_len2","values","_key3","reduce","hasOwn","call","bind","move","arr","to","findTargetIndex","pathSegment","apply$3","head","tail","applyPatch","apply$2","clone","isObject","omit","OPERATIONS","_currentValue","_nextValue","inc","dec","SUPPORTED_PATCH_TYPES","apply$1","func","applyAll","_apply","applyArrayPatch","isString","applyStringPatch","applyObjectPatch","applyPrimitivePatch","res","createPatchToOperations","findLastKey","blockIndex","indx","parsed","isSpanTextDiffMatchPatch","distance","debugState","insertPatch","blocksToInsert","posKey","isKeyedSegment","childrenToInsert","targetPath","setPatch","nextRest","prevChildren","prevRest","c","cIndex","prevSel","onSamePath","newVal","unsetPatch","previousPatch","previousSelection","createPlaceholderBlock","lastKey","unit","needToAdjust","isMergeUnset","mergedChild","changed","error","segment","key","reverse","part","stateName","bufferUntil","emitWhen","source","defer","buffer","pipe","tap","switchMap","EMPTY","SAVING","MERGING","UNDO_STEP_LIMIT","isMerging","isSaving","createWithUndoRedo","readOnly","patches$","remotePatches","subscriptions","sub","subscribe","_ref4","origin","time","unsubscribe","history","undos","redos","operations","step","lastOp","overwrite","shouldOverwrite","save","merge","shouldSave","shouldMerge","stp","createSelectOperation","timestamp","shouldClear","otherPatches","transformedOperations","transformOperation","withoutSaving","Operation","inverse","transformedOperation","adjustBlockPath","patchIsRemovingText","some","diff","splitOperation","Path","isPath","insertOffset","insertTextOperation","removeTextOperation","level","myIndex","equals","createWithPatches","_ref5","change$","isPending","patchFunctions","previousChildren","patchToOperations","withPatches","_ref6","every","current","concatMap","incoming","_ref7","snapshot","editorWasEmpty","editorIsEmpty","next","previousValue","createWithPlaceholderBlock","_ref8","withPlaceholderBlock","createWithPortableTextBlockStyle","defaultStyle","withPortableTextBlockStyle","nodeEntry","SlateText","selectedBlocks","_ref9","MAX_LIST_LEVEL","createWithPortableTextLists","withPortableTextLists","listItemStyle","isActive","pteUnsetListItem","pteSetListItem","_ref10","isListBlock","listItem","newNode","_ref11","pteEndList","_ref12","pteIncrementBlockLevels","_ref13","createWithPortableTextMarkModel","withPortableTextMarkModel","mergeSpans","isSpan","oldDefs","newMarkDefs","uniq","isNormalized","isElementProps","normalizeMarkDefs","splitNodes","marksWithoutAnnotationMarks","addMark","splitTextNodes","shouldRemoveMark","removeMark","_ref14","eMark","existingMarks","_ref15","parent","nextPath","nextNode","mergeNodes","createWithPortableTextSelections","prevSelection","withPortableTextSelections","emitPortableTextSelection","hasChanges","createWithSchemaTypes","withSchemaTypes","isPortableTextTextBlock","isPortableTextSpan","isPortableTextListBlock","obj","isInline","inlineSchemaTypes","isInsertTextWithoutType","insertNodeOperation","createWithUtils","_ref16","withUtils","focusOffset","charsBefore","charsAfter","isEmpty","str","whiteSpaceBeforeIndex","newStartOffset","whiteSpaceAfterIndex","newEndOffset","setSelection","DEFAULT_HOTKEYS","custom","createWithHotkeys","hotkeysFromOptions","reservedHotkeys","activeHotkeys","createEmptyBlock","withHotKeys","pteWithHotKeys","event","cat","hotkey","isHotkey","nativeEvent","preventDefault","possibleMark","possibleCommand","command","isEnter","isTab","isShiftEnter","isShiftTab","isBackspace","isDelete","prevPath","previous","stopPropagation","nextBlock","focusBlockPath","hasAnnotationFocus","edges","atStartOfNode","isStart","endAtEndOfNode","isEnd","insertText","validateValue","resolution","valid","validChildTypes","validBlockTypes","description","action","currentBlockTypeName","allUsedMarks","cld","annotationMarks","orphanedMarks","spanChildren","cMrk","newSpan","newChild","createWithInsertData","withInsertData","blockTypeName","spanTypeName","toPlainText","title","setFragmentData","originEvent","startVoid","void","endVoid","domRange","toDOMRange","contents","cloneContents","voidNode","r","cloneRange","domNode","setEndAfter","querySelectorAll","zw","isNewline","getAttribute","textContent","elm","removeAttribute","attributes","hasAttribute","div","ownerDocument","createElement","appendChild","setAttribute","body","asHTML","innerHTML","removeChild","fragment","getFragment","asJSON","asPlainText","clearData","setData","insertPortableTextData","pText","getData","parse","slateValue","_regenerateKeys","validation","errorDescription","_insertFragment","insertTextOrHTMLData","isLoading","insertedType","htmlToBlocks","normalizeBlock","escapeHtml","textToHtml","insertData","insertFragmentData","insertFragment","entityMap","oldKey","newKey","nodeWithNewKeys","isPasteToEmptyEditor","originalFnMap","withPlugins","destroy","operationToPatches","withObjectKeys","withUndoRedo","originalFunctions","noop","unsubscribes","subscribeFn","unsubscribeFn","SlateContainer","props","slateEditor","useMemo","_sub","withReact","createEditor","useEffect","initialValue","Slate","FLUSH_PATCHES_DEBOUNCE_MS","process","env","NODE_ENV","PortableTextEditorSelectionContext","usePortableTextEditorSelection","PortableTextEditorContext","usePortableTextEditor","PortableTextEditorValueContext","PortableTextEditorReadOnlyContext","usePortableTextEditorReadOnlyStatus","useSyncValue","useRef","useSlate","isChanged","isValid","hadSelection","childrenLength","_","slateValueFromProps","currentBlock","currentBlockIndex","validationValue","_updateBlock","_replaceBlock","currentSelection","selectionFocusOnBlock","oldBlockChildrenLength","currentBlockChild","currentBlockChildIndex","oldBlockChild","isChildChanged","isTextChanged","isSpanNode","Synchronizer","useState","pendingPatches","syncValue","onFlushPendingPatches","useCallback","finalPatches","editorValue","PortableTextEditor","onFlushPendingPatchesDebounced","debounce","leading","trailing","startTransition","isInitialValueFromProps","jsx","Provider","React","Component","constructor","Subject","editable","schemaType","incomingPatches$","createRef","componentDidUpdate","prevProps","render","_patches$","Boolean","isObjectPath","isChildObjectEditPath","isBlockObjectEditPath","compactPatches","lastPatch","nextPatch","normalizePoint","newOffset","normalizeSelection","newAnchor","newFocus","DefaultAnnotation","handleClick","alert","annotation","color","onClick","EMPTY_MARKS","Leaf","leaf","renderChild","renderDecorator","renderAnnotation","spanRef","blockSelected","useSelected","focused","setFocused","selected","setSelected","decoratorValues","shouldTrackSelectionAndFocus","sel","setSelectedFromRange","winSelection","window","rangeCount","getRangeAt","intersectsNode","content","returnedChildren","_props","defineProperty","editorElementRef","enumerable","ref","_child","defaultRendered","DefaultObject","DefaultBlockObject","styled","_templateObject","_taggedTemplateLiteral","_templateObject2","DefaultListItem","_templateObject3","getLeftPositionForListLevel","listLevel","getContentForListLevelAndStyle","getCounterIncrementForListLevel","getCounterResetForListLevel","getCounterContentForListLevel","DefaultListItemInner","_templateObject4","bullets","normalizedLevel","DraggableBlock","_ref17","blockRef","useSlateStatic","dragGhostRef","isDragOver","setIsDragOver","blockElement","setBlockElement","handleDragOver","isMyDragOver","dataTransfer","dropEffect","elementRect","getBoundingClientRect","top","height","Y","pageY","handleDragLeave","handleDragEnd","document","dragPosition","findPath","myPath","isBefore","originalPath","moveNodes","handleDrop","handleDrag","target","HTMLElement","opacity","handleDragStart","effectAllowed","dragGhost","cloneNode","customGhost","querySelector","left","boxSizing","rect","clientX","clientY","width","setDragImage","isDraggingOverFirstBlock","isDraggingOverLastBlock","isDraggingOverTop","isDraggingOverBottom","dropIndicator","className","borderBottom","zIndex","jsxs","draggable","onDragStart","onDrag","onDragOver","onDragLeave","onDragEnd","onDrop","EMPTY_ANNOTATIONS","inlineBlockStyle","display","_ref18","renderBlock","renderListItem","renderStyle","spellCheck","inlineBlockObjectRef","renderedBlock","elmPath","contentEditable","ObjectNode","isListItem","blockStyleType","listType","renderProps","propsOrDefaultRendered","renderedBlockFromProps","useIsomorphicEffect","useLayoutEffect","useForwardedRef","innerRef","PLACEHOLDER_STYLE","userSelect","pointerEvents","EMPTY_DECORATORS","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBeforeInput","onPaste","onCopy","renderPlaceholder","propsSelection","scrollSelectionIntoView","restProps","hasInvalidValue","setHasInvalidValue","renderElement","eProps","renderLeaf","lProps","rendered","placeholder","Fragment","restoreSelectionFromProps","normalizedSelection","slateRange","o","handleCopy","result","handlePaste","clipboardData","Promise","resolve","then","catch","handleOnFocus","handleOnBlur","handleOnBeforeInput","handleKeyDown","scrollSelectionIntoViewToSlate","decorate","slateEditable","SlateEditable","Editable","autoFocus","onBlur","onDOMBeforeInput","onFocus","onKeyDown"],"mappings":"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","x_google_ignoreList":[5]}