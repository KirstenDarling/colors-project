{"version":3,"file":"GroqStoreProvider-eb0390a9.cjs","sources":["../../src/groq-store/GroqStoreProvider.tsx"],"sourcesContent":["import type { QueryParams } from '@sanity/client'\nimport DefaultEventSource from '@sanity/eventsource'\nimport { type Config, groqStore } from '@sanity/groq-store'\nimport { memo, useEffect, useMemo, useState } from 'react'\n\nimport {\n  defineListenerContext as ListenerContext,\n  LoadedListenersContext,\n} from '../context'\nimport type {\n  DefineListenerContext,\n  ListenerGetSnapshot,\n  ListenerSubscribe,\n  Logger,\n} from '../types'\nimport {\n  DEFAULT_MAX_DOCUMENTS,\n  getQueryCacheKey,\n  type QueryCacheKey,\n  useLoadingListenersContext,\n} from '../utils'\n\n/**\n * @public\n */\nexport interface GroqStoreProviderProps extends Config {\n  children: React.ReactNode\n  /**\n   * @defaultValue true\n   */\n  listen?: boolean\n  /**\n   * @defaultValue true\n   */\n  overlayDrafts?: boolean\n  /**\n   * @defaultValue 3000\n   */\n  documentLimit?: number\n  logger?: Logger\n}\n/**\n * Caches the store instance, if the config changes you need to pass a new `key` prop to apply it and trigger a re-render\n * @public\n */\nexport const GroqStoreProvider = memo(function GroqStoreProvider(\n  props: GroqStoreProviderProps\n) {\n  const {\n    children,\n    logger,\n    // The rest is the store config\n    ...config\n  } = props\n\n  const [ready] = useState(() => new Set<QueryCacheKey>())\n  const [loadedListenersContext, updateLoadedListeners] =\n    useLoadingListenersContext(ready)\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const [snapshots] = useState(() => new Map<QueryCacheKey, any>())\n  const [store] = useState(() =>\n    groqStore({\n      // Override some of the store defaults\n      EventSource: props.token ? DefaultEventSource : undefined,\n      listen: true,\n      overlayDrafts: true,\n      documentLimit: DEFAULT_MAX_DOCUMENTS,\n      // Spread in the rest\n      ...config,\n    })\n  )\n\n  const report = useMemo(() => {\n    if (config.listen) {\n      return `Updates are applied in real-time. The cache is set to max ${config.documentLimit} documents.`\n    }\n    return `Updates require a manual refresh. The cache is set to max ${config.documentLimit} documents.`\n  }, [config.documentLimit, config.listen])\n  useEffect(() => {\n    if (logger) {\n      logger.log(\n        `[@sanity/preview-kit]: With the current configuration you can expect that: ${report}`\n      )\n    }\n  }, [logger, report])\n\n  // Make sure any async errors bubble up to the nearest error boundary\n  const [error, setError] = useState<unknown>(null)\n  // eslint-disable-next-line no-warning-comments\n  // @TODO can we just re throw inside the subscription itself?\n  if (error) throw error\n\n  const [listenerContext] = useState<DefineListenerContext>(() => {\n    return function defineListener<QueryResult>(\n      initialSnapshot: QueryResult,\n      query: string,\n      params: QueryParams\n    ) {\n      const key = getQueryCacheKey(query, params)\n\n      // groq-store returns on subscriptions when the dataset haven't finished loading yet.\n      // We workaround this by setting the initial value as the one provided by the hook\n      if (!snapshots.has(key)) {\n        snapshots.set(key, initialSnapshot)\n      }\n\n      const subscribe: ListenerSubscribe = (onStoreChange) => {\n        if (!ready.has(key)) {\n          store.query(query, params).then((result) => {\n            if (!ready.has(key)) {\n              snapshots.set(key, result)\n\n              ready.add(key)\n              updateLoadedListeners()\n\n              onStoreChange()\n            }\n          }, setError)\n        }\n\n        const subscription = store.subscribe(query, params, (err, result) => {\n          if (err) {\n            setError(err)\n            // Hold off on calling `onStoreChange` until we have a snapshot\n          } else if (ready.has(key)) {\n            snapshots.set(key, result)\n            onStoreChange()\n          }\n        })\n        return () => subscription.unsubscribe()\n      }\n      const getSnapshot: ListenerGetSnapshot<QueryResult> = () =>\n        snapshots.get(key)\n\n      return { subscribe, getSnapshot }\n    } satisfies DefineListenerContext\n  })\n\n  return (\n    <ListenerContext.Provider value={listenerContext}>\n      <LoadedListenersContext.Provider value={loadedListenersContext}>\n        {children}\n      </LoadedListenersContext.Provider>\n    </ListenerContext.Provider>\n  )\n})\n"],"names":["GroqStoreProvider","memo","props","children","logger","config","ready","useState","Set","loadedListenersContext","updateLoadedListeners","useLoadingListenersContext","snapshots","Map","store","groqStore","EventSource","token","DefaultEventSource","listen","overlayDrafts","documentLimit","DEFAULT_MAX_DOCUMENTS","report","useMemo","concat","useEffect","log","error","setError","listenerContext","defineListener","initialSnapshot","query","params","key","getQueryCacheKey","has","set","subscribe","onStoreChange","then","result","add","subscription","err","unsubscribe","getSnapshot","get","jsx","ListenerContext","Provider","value","LoadedListenersContext"],"mappings":"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"}