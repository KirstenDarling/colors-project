{"version":3,"file":"context-13c019e1.js","sources":["../../src/utils.ts","../../src/no-store.ts","../../src/context.ts"],"sourcesContent":["import type { QueryParams } from '@sanity/client'\nimport {\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n} from 'react'\n\n/**\n * @internal\n */\nexport type QueryCacheKey = `${string}-${string}`\n/**\n * @internal\n */\nexport function getQueryCacheKey(\n  query: string,\n  params: QueryParams\n): QueryCacheKey {\n  return `${query}-${JSON.stringify(params)}`\n}\n\n/**\n * @internal\n */\nexport function useLoadingListenersContext(\n  ready: Set<QueryCacheKey>\n): [QueryCacheKey[], () => void] {\n  const [tick, forceUpdate] = useReducer((x) => x + 1, 0)\n  const mountedRef = useRef(true)\n  const scheduleUpdate = useCallback(() => {\n    if (mountedRef.current) {\n      startTransition(() => forceUpdate())\n    }\n  }, [])\n  useEffect(() => {\n    mountedRef.current = true\n    scheduleUpdate()\n    return () => {\n      mountedRef.current = false\n    }\n  }, [scheduleUpdate])\n  const loadedListenersContext = useMemo(\n    () => (tick ? [...ready] : []),\n    [ready, tick]\n  )\n\n  return [loadedListenersContext, scheduleUpdate]\n}\n\nexport const DEFAULT_MAX_DOCUMENTS = 3000\n","// This is the default, fallback store, that allows using useListeningQuery without a provider.\nimport type { QueryParams } from '@sanity/client'\n\nimport type {\n  DefineListenerContext,\n  ListenerGetSnapshot,\n  ListenerSubscribe,\n} from './types'\nimport { getQueryCacheKey, type QueryCacheKey } from './utils'\n\nconst snapshots = new Map<QueryCacheKey, unknown>()\nconst deps = new Map<QueryCacheKey, number>()\n\n/**\n * @internal\n */\nexport const NoStoreContext = function defineListener<QueryResult>(\n  initialSnapshot: QueryResult,\n  query: string,\n  params: QueryParams\n) {\n  const key = getQueryCacheKey(query, params)\n\n  // Always update the snapshot, to ensure that we have the latest value\n  snapshots.set(key, initialSnapshot)\n  // Keep track of how many dependencies are using this query, so we can know when it's safe to cleanup\n  if (!deps.has(key)) {\n    deps.set(key, 0)\n  }\n\n  const subscribe: ListenerSubscribe = () => {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    deps.set(key, deps.get(key)! + 1)\n\n    return () => {\n      // Bookkeeping on how many dependencies are using this query\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      deps.set(key, deps.get(key)! - 1)\n\n      // If nothing cares about this snapshot, clean it up and free memory\n      if (deps.get(key) === 0) {\n        snapshots.delete(key)\n      }\n    }\n  }\n  const getSnapshot: ListenerGetSnapshot<QueryResult> = () =>\n    snapshots.has(key) ? (snapshots.get(key) as QueryResult) : initialSnapshot\n\n  return { subscribe, getSnapshot }\n} satisfies DefineListenerContext\n","import { createContext } from 'react'\n\nimport { NoStoreContext } from './no-store'\nimport { DefineListenerContext } from './types'\nimport { QueryCacheKey } from './utils'\n\n/**\n * @internal\n */\nexport const defineListenerContext =\n  createContext<DefineListenerContext>(NoStoreContext)\n\n/**\n * If it's `null` then the listener should be treated as `success`, otherwise if a listener isn't in the array it should be considered as `loading`\n * @internal\n */\nexport const LoadedListenersContext = createContext<QueryCacheKey[] | null>(\n  null\n)\n"],"names":["getQueryCacheKey","query","params","concat","JSON","stringify","useLoadingListenersContext","ready","tick","forceUpdate","useReducer","x","mountedRef","useRef","scheduleUpdate","useCallback","current","startTransition","useEffect","loadedListenersContext","useMemo","DEFAULT_MAX_DOCUMENTS","snapshots","Map","deps","NoStoreContext","defineListener","initialSnapshot","key","set","has","subscribe","get","delete","getSnapshot","defineListenerContext","createContext","LoadedListenersContext"],"mappings":";AAiBgB,SAAAA,gBAAAA,CACdC,OACAC,MACe,EAAA;EACf,UAAAC,MAAA,CAAUF,KAAA,OAAAE,MAAA,CAASC,IAAK,CAAAC,SAAA,CAAUH,MAAM,CAAA;AAC1C;AAKO,SAASI,2BACdC,KAC+B,EAAA;EACzB,MAAA,CAACC,MAAMC,WAAW,CAAA,GAAIC,WAAYC,CAAA,IAAMA,CAAI,GAAA,CAAA,EAAG,CAAC,CAAA;EAChD,MAAAC,UAAA,GAAaC,OAAO,IAAI,CAAA;EACxB,MAAAC,cAAA,GAAiBC,YAAY,MAAM;IACvC,IAAIH,WAAWI,OAAS,EAAA;MACNC,eAAA,CAAA,MAAMR,aAAa,CAAA;IACrC;EACF,CAAA,EAAG,EAAE,CAAA;EACLS,SAAA,CAAU,MAAM;IACdN,UAAA,CAAWI,OAAU,GAAA,IAAA;IACNF,cAAA,EAAA;IACf,OAAO,MAAM;MACXF,UAAA,CAAWI,OAAU,GAAA,KAAA;IAAA,CACvB;EAAA,CACF,EAAG,CAACF,cAAc,CAAC,CAAA;EACnB,MAAMK,sBAAyB,GAAAC,OAAA,CAC7B,MAAOZ,IAAO,GAAA,CAAC,GAAGD,KAAK,IAAI,EAAC,EAC5B,CAACA,OAAOC,IAAI,CAAA,CACd;EAEO,OAAA,CAACW,wBAAwBL,cAAc,CAAA;AAChD;AAEO,MAAMO,qBAAwB,GAAA,GAAA;AC1CrC,MAAMC,SAAA,GAAA,mBAAgBC,GAA4B,EAAA;AAClD,MAAMC,IAAA,GAAA,mBAAWD,GAA2B,EAAA;AAKrC,MAAME,cAAiB,GAAA,SAASC,cACrCA,CAAAC,eAAA,EACA1B,OACAC,MACA,EAAA;EACM,MAAA0B,GAAA,GAAM5B,gBAAiB,CAAAC,KAAA,EAAOC,MAAM,CAAA;EAGhCoB,SAAA,CAAAO,GAAA,CAAID,KAAKD,eAAe,CAAA;EAElC,IAAI,CAACH,IAAA,CAAKM,GAAI,CAAAF,GAAG,CAAG,EAAA;IACbJ,IAAA,CAAAK,GAAA,CAAID,KAAK,CAAC,CAAA;EACjB;EAEA,MAAMG,YAA+BA,CAAA,KAAM;IAEzCP,IAAA,CAAKK,IAAID,GAAK,EAAAJ,IAAA,CAAKQ,GAAI,CAAAJ,GAAG,IAAK,CAAC,CAAA;IAEhC,OAAO,MAAM;MAGXJ,IAAA,CAAKK,IAAID,GAAK,EAAAJ,IAAA,CAAKQ,GAAI,CAAAJ,GAAG,IAAK,CAAC,CAAA;MAGhC,IAAIJ,IAAK,CAAAQ,GAAA,CAAIJ,GAAG,CAAA,KAAM,CAAG,EAAA;QACvBN,SAAA,CAAUW,OAAOL,GAAG,CAAA;MACtB;IAAA,CACF;EAAA,CACF;EACM,MAAAM,WAAA,GAAgDA,CAAA,KACpDZ,SAAU,CAAAQ,GAAA,CAAIF,GAAG,CAAK,GAAAN,SAAA,CAAUU,GAAI,CAAAJ,GAAG,CAAoB,GAAAD,eAAA;EAEtD,OAAA;IAAEI;IAAWG;GAAY;AAClC,CAAA;ACxCa,MAAAC,qBAAA,GACXC,cAAqCX,cAAc,CAAA;AAM9C,MAAMY,sBAAyB,GAAAD,aAAA,CACpC,IACF,CAAA;"}