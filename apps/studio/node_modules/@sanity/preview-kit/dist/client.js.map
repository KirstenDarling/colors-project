{"version":3,"file":"client.js","sources":["../src/client/editIntent.ts","../src/client/transcode.ts","../src/client/request.ts","../src/client/mapToEditLinks.ts","../src/client/createClient.ts"],"sourcesContent":["import {\n  ContentSourceMapDocument,\n  ContentSourceMapDocuments,\n} from '@sanity/client'\n\nimport { parseNormalisedJsonPath } from './jsonpath'\nimport type { PathSegment, StudioUrl } from './types'\n\n/** @alpha */\nexport type EditLink = `/intent/edit/id=${string};path=${string}`\n/** @alpha */\nexport interface EditLinkProps {\n  studioUrl: StudioUrl\n  document: ContentSourceMapDocument\n}\n/** @alpha */\nexport type DefineEditLink = (\n  studioUrl: StudioUrl\n) => (\n  sourceDocument: ContentSourceMapDocuments[number]\n) => `${StudioUrl}${EditLink}`\n\n/** @alpha */\nexport function defineEditLink(\n  _studioUrl: StudioUrl\n): (\n  sourceDocument: ContentSourceMapDocuments[number],\n  path: string | PathSegment[]\n) => string {\n  const studioUrl = _studioUrl.replace(/\\/$/, '')\n  return (sourceDocument, path) =>\n    `${studioUrl}/intent/edit/id=${\n      sourceDocument._id\n    };path=${encodeJsonPathToUriComponent(path)}`\n}\n\n/** @alpha */\nexport function encodeJsonPathToUriComponent(\n  path: string | PathSegment[]\n): string {\n  const sourcePath = Array.isArray(path) ? path : parseNormalisedJsonPath(path)\n  return encodeURIComponent(\n    sourcePath\n      .map((key, i) =>\n        // eslint-disable-next-line no-nested-ternary\n        typeof key === 'number' ? `[${key}]` : i > 0 ? `.${key}` : key\n      )\n      .join('')\n  )\n}\n","/* eslint-disable no-nested-ternary */\nimport type { ContentSourceMapDocuments } from '@sanity/client'\nimport { vercelStegaCombine } from '@vercel/stega'\n\nimport { defineEditLink } from './editIntent'\nimport { parseNormalisedJsonPath } from './jsonpath'\nimport { encode } from './sourcemap'\nimport type {\n  ContentSourceMapQueryResponse,\n  Logger,\n  PathSegment,\n} from './types'\nimport type { FilterDefault, PreviewKitClientConfig } from './types'\n\nconst filterDefault: FilterDefault = ({ path }) => {\n  const endPath = path.at(-1)\n  // Never encode slugs\n  if (path.at(-2) === 'slug' && endPath === 'current') {\n    return false\n  }\n\n  // Skip underscored keys, needs better heuristics but it works for now\n  if (typeof endPath === 'string' && endPath.startsWith('_')) {\n    return false\n  }\n\n  /**\n   * Best effort infer Portable Text paths that should not be encoded.\n   * Nothing is for certain, and the below implementation may cause paths that aren't Portable Text and otherwise be safe to encode to be skipped.\n   * However, that's ok as userland can always opt-in with the `encodeSourceMapAtPath` option and mark known safe paths as such, which will override this heuristic.\n   */\n  // If the path ends in [number].children[number].marks[number] it's likely a PortableTextSpan: https://github.com/portabletext/types/blob/e54eb24f136d8efd51a46c6a190e7c46e79b5380/src/portableText.ts#LL154C16-L154C16\n  if (\n    typeof endPath === 'number' &&\n    path.at(-2) === 'marks' &&\n    typeof path.at(-3) === 'number' &&\n    path.at(-4) === 'children' &&\n    typeof path.at(-5) === 'number'\n  ) {\n    return false\n  }\n  // Or if it's [number].markDefs[number].href it's likely a PortableTextLink: https://github.com/portabletext/types/blob/e54eb24f136d8efd51a46c6a190e7c46e79b5380/src/portableText.ts#L163\n  if (\n    endPath === 'href' &&\n    typeof path.at(-2) === 'number' &&\n    path.at(-3) === 'markDefs' &&\n    typeof path.at(-4) === 'number'\n  ) {\n    return false\n  }\n  // Otherwise we have to deal with special properties of PortableTextBlock, and we can't confidently know if it's actually a `_type: 'block'` array item or not.\n  // All we know is that if it is indeed a block, and we encode the strings on these keys it'll for sure break the PortableText rendering and thus we skip encoding.\n  if (typeof endPath === 'string' && typeof path.at(-2) === 'number') {\n    // https://github.com/portabletext/types/blob/e54eb24f136d8efd51a46c6a190e7c46e79b5380/src/portableText.ts#L48-L58\n    if (endPath === 'style' || endPath === 'listItem') {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport type Transcoder = (\n  input: string,\n  sourceDocument: ContentSourceMapDocuments[number],\n  sourcePath: PathSegment[]\n) => string\n\nconst TRUNCATE_LENGTH = 20\n\n/**\n * @internal\n */\nexport function createTranscoder(\n  studioUrl: PreviewKitClientConfig['studioUrl'],\n  encodeSourceMapAtPath?: PreviewKitClientConfig['encodeSourceMapAtPath'],\n  logger?: Logger\n): {\n  report: Record<\n    'encoded' | 'skipped',\n    { path: string; length: number; value: string }[]\n  >\n  transcode: Transcoder\n  walk: (input: ContentSourceMapQueryResponse) => ContentSourceMapQueryResponse\n} {\n  const createEditLink = defineEditLink(studioUrl)\n  const report: Record<\n    'encoded' | 'skipped',\n    { path: string; length: number; value: string }[]\n  > = { encoded: [], skipped: [] }\n\n  const transcode = (\n    input: string,\n    sourceDocument: ContentSourceMapDocuments[number],\n    sourcePath: PathSegment[]\n  ): string => {\n    // Allow userland to control when to opt-out of encoding\n    if (\n      (typeof encodeSourceMapAtPath === 'function'\n        ? encodeSourceMapAtPath({ path: sourcePath, filterDefault })\n        : filterDefault({ path: sourcePath, filterDefault })) === false\n    ) {\n      if (logger) {\n        report.skipped.push({\n          path: prettyPathForLogging(sourcePath),\n          value: `${input.slice(0, TRUNCATE_LENGTH)}${\n            input.length > TRUNCATE_LENGTH ? '...' : ''\n          }`,\n          length: input.length,\n        })\n      }\n      return input\n    }\n\n    if (logger) {\n      report.encoded.push({\n        path: prettyPathForLogging(sourcePath),\n        value: `${input.slice(0, TRUNCATE_LENGTH)}${\n          input.length > TRUNCATE_LENGTH ? '...' : ''\n        }`,\n        length: input.length,\n      })\n    }\n\n    return vercelStegaCombine(\n      input,\n      {\n        origin: 'sanity.io',\n        href: createEditLink(sourceDocument, sourcePath),\n      },\n      'auto'\n    )\n  }\n  return {\n    report,\n    transcode,\n    walk: (input: ContentSourceMapQueryResponse) => {\n      // Clear previous reports\n      report.encoded.length = 0\n      report.skipped.length = 0\n      // Start the recursive machinery\n      return encode(input, (value, sourceDocument, path) =>\n        transcode(value, sourceDocument, parseNormalisedJsonPath(path))\n      )\n    },\n  }\n}\n\nfunction prettyPathForLogging(path: PathSegment[]): string {\n  return path\n    .map((segment, index) =>\n      typeof segment === 'number'\n        ? `[${segment}]`\n        : index > 0\n        ? `.${segment}`\n        : segment\n    )\n    .join('')\n}\n","/**\n * Creates a custom `httpRequest` handler for `SanityClient`, that\n * includes a middleware that handles source maps and stega encoding.\n */\nimport {\n  type HttpRequest,\n  requester as originalRequester,\n  type RequestOptions,\n} from '@sanity/client'\nimport isPlainObject from 'lodash.isplainobject'\nimport invariant from 'tiny-invariant'\n\nimport { createTranscoder } from './transcode'\nimport type {\n  ContentSourceMapQueryResponse,\n  PreviewKitClientConfig,\n} from './types'\n\ntype TranscodeResponseConfig = Pick<\n  PreviewKitClientConfig,\n  'studioUrl' | 'encodeSourceMapAtPath' | 'logger'\n>\n\nfunction transcodeResponse({\n  studioUrl,\n  encodeSourceMapAtPath,\n  logger,\n}: TranscodeResponseConfig) {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const transcoder = createTranscoder(studioUrl, encodeSourceMapAtPath, logger!)\n  return {\n    onResponse: (response: unknown) => {\n      if (!isBodyResponse(response)) {\n        return response\n      }\n\n      if (\n        Array.isArray(response.body) ||\n        typeof response.body === 'string' ||\n        isPlainObject(response.body)\n      ) {\n        if (!isContentSourceMapBody(response.body)) {\n          if (logger) {\n            logger?.error(\n              '[@sanity/preview-kit]: Missing Content Source Map from response body',\n              response.body\n            )\n          }\n          return response\n        }\n\n        const body = transcoder.walk(response.body)\n\n        if (logger) {\n          const isSkipping = transcoder.report.skipped.length\n          const isEncoding = transcoder.report.encoded.length\n          if (isSkipping || isEncoding) {\n            logger?.groupCollapsed(\n              '[@sanity/preview-kit]: Stega encoding source map into result'\n            )\n            logger?.log(\n              `[@sanity/preview-kit]: Paths encoded: ${transcoder.report.encoded.length}, skipped: ${transcoder.report.skipped.length}`\n            )\n          }\n          if (transcoder.report.encoded.length > 0) {\n            logger?.log(`[@sanity/preview-kit]: Table of encoded paths`)\n            logger?.table(transcoder.report.encoded)\n          }\n          if (transcoder.report.skipped.length > 0) {\n            const skipped = new Set<string>()\n            for (const { path } of transcoder.report.skipped) {\n              skipped.add(path.replace(/\\[\\d+\\]/g, '[]'))\n            }\n            logger?.log(`[@sanity/preview-kit]: List of skipped paths`, [\n              ...skipped.values(),\n            ])\n          }\n\n          if (isSkipping || isEncoding) {\n            logger?.groupEnd()\n          }\n        }\n\n        return { ...response, body }\n      }\n\n      return response\n    },\n  }\n}\n\n/** @internal */\nexport function createHttpRequest({\n  studioUrl,\n  encodeSourceMapAtPath,\n  logger,\n}: PreviewKitClientConfig): HttpRequest {\n  invariant(studioUrl, 'Missing studioUrl in client config')\n  const superRequester = originalRequester.clone()\n\n  // Apply the transcoder middleware\n  superRequester.use(\n    transcodeResponse({ studioUrl, encodeSourceMapAtPath, logger })\n  )\n\n  function httpRequest(\n    options: RequestOptions,\n    requester = superRequester\n  ): HttpRequest {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return requester({ maxRedirects: 0, ...options } as any)\n  }\n\n  httpRequest.defaultRequester = superRequester\n\n  return httpRequest\n}\n\nfunction isBodyResponse(response: unknown): response is { body?: unknown } {\n  return typeof response === 'object' && response !== null\n}\n\n/** @alpha */\nexport function isContentSourceMapBody(\n  body: unknown\n): body is ContentSourceMapQueryResponse {\n  return typeof body === 'object' && body !== null && 'resultSourceMap' in body\n}\n","import { defineEditLink } from './editIntent'\nimport { encodeIntoResult } from './sourcemap'\nimport type { ContentSourceMapQueryResponse } from './types'\n\n/** @alpha */\nexport function mapToEditLinks(\n  response: ContentSourceMapQueryResponse,\n  studioUrl: string\n): unknown {\n  const createEditLink = defineEditLink(studioUrl)\n  return encodeIntoResult(response, (_, sourceDocument, path) => {\n    return createEditLink(sourceDocument, path)\n  })\n}\n","import { createClient as _createClient, SanityClient } from '@sanity/client'\n\nimport { createHttpRequest } from './request'\nimport type { PreviewKitClientConfig } from './types'\n\nexport type * from './mapToEditLinks'\nexport { mapToEditLinks } from './mapToEditLinks'\nexport type * from './types'\nexport type * from '@sanity/client'\n\n/**\n * @alpha\n */\nexport const createClient = (config: PreviewKitClientConfig): SanityClient => {\n  const {\n    encodeSourceMap = detectEnableSourceMap(),\n    studioUrl = detectStudioUrl(),\n    logger,\n  } = config\n\n  let shouldEncodeSourceMap = encodeSourceMap === true\n\n  // If encodeSourceMap is set to 'auto', then we need to check if we're running on Vercel and on a preview deployment\n  if (encodeSourceMap === 'auto') {\n    shouldEncodeSourceMap = isVercelPreviewEnvironment()\n  }\n\n  try {\n    if (shouldEncodeSourceMap && config.resultSourceMap !== false) {\n      logger?.debug('[@sanity/preview-kit]: Creating source map enabled client')\n      const httpRequest = createHttpRequest({ ...config, studioUrl })\n      return new SanityClient(httpRequest, {\n        ...config,\n        // Source maps by Content Lake are required in order to know where to insert the encoded source maps into strings\n        resultSourceMap: true,\n      })\n    }\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(\n      '[@sanity/preview-kit]: Error creating client',\n      err,\n      'falling back to non-embedded sourcemap mode'\n    )\n  }\n  return _createClient(config)\n}\n\nfunction isVercelPreviewEnvironment() {\n  try {\n    // @ts-expect-error -- VERCEL_ENV is not a declared import.meta.env variable\n    return import.meta.env.VERCEL_ENV === 'preview'\n  } catch {\n    // ignore\n  }\n  try {\n    // eslint-disable-next-line no-process-env\n    return process.env.VERCEL_ENV === 'preview'\n  } catch {\n    // ignore\n  }\n  return false\n}\n\nfunction detectEnableSourceMap(): PreviewKitClientConfig['encodeSourceMap'] {\n  try {\n    // @ts-expect-error -- SANITY_SOURCE_MAP is not a declared import.meta.env variable\n    return import.meta.env.SANITY_SOURCE_MAP === 'true' || 'auto'\n  } catch {\n    // ignore\n  }\n  try {\n    // eslint-disable-next-line no-process-env\n    return process.env.SANITY_SOURCE_MAP === 'true' || 'auto'\n  } catch {\n    // ignore\n  }\n  return 'auto'\n}\n\n// eslint-disable-next-line consistent-return\nfunction detectStudioUrl() {\n  try {\n    // @ts-expect-error -- SANITY_STUDIO_URL is not a declared import.meta.env variable\n    return import.meta.env.SANITY_STUDIO_URL\n  } catch {\n    // ignore\n  }\n  try {\n    // eslint-disable-next-line no-process-env\n    return process.env.SANITY_STUDIO_URL\n  } catch {\n    // ignore\n  }\n}\n"],"names":["defineEditLink","_studioUrl","studioUrl","replace","sourceDocument","path","concat","_id","encodeJsonPathToUriComponent","sourcePath","Array","isArray","parseNormalisedJsonPath","encodeURIComponent","map","key","i","join","filterDefault","_ref","endPath","at","startsWith","TRUNCATE_LENGTH","createTranscoder","encodeSourceMapAtPath","logger","createEditLink","report","encoded","skipped","transcode","input","push","prettyPathForLogging","value","slice","length","vercelStegaCombine","origin","href","walk","encode","segment","index","transcodeResponse","_ref2","transcoder","onResponse","response","isBodyResponse","body","isPlainObject","isContentSourceMapBody","error","isSkipping","isEncoding","groupCollapsed","log","table","Set","add","values","groupEnd","createHttpRequest","_ref3","invariant","superRequester","originalRequester","clone","use","httpRequest","options","requester","arguments","undefined","maxRedirects","defaultRequester","mapToEditLinks","encodeIntoResult","_","createClient","config","encodeSourceMap","detectEnableSourceMap","detectStudioUrl","shouldEncodeSourceMap","isVercelPreviewEnvironment","resultSourceMap","debug","SanityClient","err","console","_createClient","import","meta","env","VERCEL_ENV","process","SANITY_SOURCE_MAP","SANITY_STUDIO_URL"],"mappings":"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"}