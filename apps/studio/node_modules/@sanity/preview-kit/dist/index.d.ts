/// <reference types="react" />

import type { QueryParams as ClientQueryParams } from '@sanity/client'
import { NamedExoticComponent } from 'react'
import type { SanityClient } from '@sanity/client'

/** @public */
export declare interface CacheOptions {
  /**
   * Uses a `Listen` API call with EventSource to stream updates in real-time to the documents cache
   * @defaultValue true
   */
  listen?: boolean
  /**
   * The maximum number of documents to keep in the in-memory
   * @defaultValue 3000
   */
  maxDocuments?: number
  /**
   * Set it to an array over document `_type` names to filter the cache to, set it to an empty array to cache any type
   * @defaultValue []
   */
  includeTypes?: string[]
}

export { ClientQueryParams }

/**
 * By default 'react-fast-compare' is used to check if the query result has changed.
 * It's reasonably fast, but you can make it even faster by providing your own function as you know which
 * part of the query result is visible to the user, and which parts can skip rendering.
 * @public
 */
export declare type isEqualFn<QueryResult> = (
  a: QueryResult,
  b: QueryResult
) => boolean

/**
 * @public
 */
export declare type ListenerStatus = 'loading' | 'success'

/**
 * @public
 * @deprecated use `LiveQueryHookOptions` instead
 */
export declare interface ListeningQueryHookOptions<QueryResult> {
  isEqual?: isEqualFn<QueryResult>
}

/** @public */
export declare interface LiveQueryHookOptions<QueryResult> {
  isEqual?: isEqualFn<QueryResult>
}

export declare const LiveQueryProvider: NamedExoticComponent<LiveQueryProviderProps>

/** @public */
export declare interface LiveQueryProviderProps {
  children: React.ReactNode
  client: SanityClient
  cache?: CacheOptions
  /**
   * @defaultValue false
   * @alpha Highly experimental, may have breaking changes in minor releases
   */
  experimental__turboSourceMap?: boolean
  /**
   * The interval in millieseconds to refetch in the background, when the tab is active.
   * Set it to `0` to disable background refresh.
   * @defaultValue experimental__turboSourceMap ? 10000 : 0
   * @alpha Highly experimental, may have breaking changes in minor releases
   */
  experimental__refreshInterval?: number
  logger?: Logger
}

/**
 * Specify a `console.log` compatible logger to aid debugging
 * @public
 */
export declare type Logger =
  | typeof console
  | Pick<typeof console, 'warn' | 'error' | 'log'>

/** @public */
export declare type QueryLoading = boolean

/**
 * @public
 * @deprecated use `useLiveQuery` instead
 */
export declare function useListeningQuery<
  QueryResult,
  QueryParams extends ClientQueryParams = ClientQueryParams
>(
  initialSnapshot: QueryResult,
  query: string,
  queryParams?: QueryParams,
  options?: ListeningQueryHookOptions<QueryResult>
): QueryResult

/**
 * Wether a particular query is loading or not.
 * @public
 * @deprecated use `useLiveQuery` instead
 */
export declare function useListeningQueryStatus<
  QueryParams extends ClientQueryParams = ClientQueryParams
>(query: string, queryParams?: QueryParams): ListenerStatus

/** @public */
export declare function useLiveQuery<
  QueryResult,
  QueryParams extends ClientQueryParams = ClientQueryParams
>(
  initialData: QueryResult,
  query: string,
  queryParams?: QueryParams,
  options?: LiveQueryHookOptions<QueryResult>
): [QueryResult, QueryLoading]

export {}
