var _templateObject;
function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
import { jsx, jsxs } from 'react/jsx-runtime';
import { useState, createElement, isValidElement } from 'react';
import { isValidElementType } from 'react-is';
import 'sanity';
import { Button, Box } from '@sanity/ui';
import { PaneHeader, PaneHeaderActions, BackLink, usePane, Pane } from './desk-c925d322.js';
import { ArrowLeftIcon } from '@sanity/icons';
import 'sanity/router';
import '@sanity/types';
import 'lodash/omit.js';
import '@sanity/util/paths';
import 'lodash/isNumber.js';
import 'lodash/isString.js';
import 'react-rx';
import { useDeskTool } from './index-37eb7c2e.js';
import styled from 'styled-components';
function UserComponentPaneHeader(props) {
  const {
    actionHandlers,
    index,
    menuItems,
    menuItemGroups,
    title
  } = props;
  const {
    features
  } = useDeskTool();
  if (!(menuItems == null ? void 0 : menuItems.length) && !title) {
    return null;
  }
  return /* @__PURE__ */jsx(PaneHeader, {
    actions: /* @__PURE__ */jsx(PaneHeaderActions, {
      menuItems,
      menuItemGroups,
      actionHandlers
    }),
    backButton: features.backButton && index > 0 && /* @__PURE__ */jsx(Button, {
      as: BackLink,
      "data-as": "a",
      icon: ArrowLeftIcon,
      mode: "bleed"
    }),
    title
  });
}
const Root = styled(Box)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: relative;\n"])));
function UserComponentPaneContent(props) {
  const {
    children
  } = props;
  const {
    collapsed
  } = usePane();
  return /* @__PURE__ */jsx(Root, {
    hidden: collapsed,
    height: "fill",
    overflow: "auto",
    children
  });
}
function UserComponentPane(props) {
  const {
    index,
    pane,
    paneKey,
    ...restProps
  } = props;
  const {
    child,
    component,
    menuItems,
    menuItemGroups,
    title = "",
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    type: _unused,
    ...restPane
  } = pane;
  const [ref, setRef] = useState(null);
  return /* @__PURE__ */jsxs(Pane, {
    id: paneKey,
    minWidth: 320,
    selected: restProps.isSelected,
    children: [/* @__PURE__ */jsx(UserComponentPaneHeader, {
      actionHandlers: ref == null ? void 0 : ref.actionHandlers,
      index,
      menuItems,
      menuItemGroups,
      title
    }), /* @__PURE__ */jsxs(UserComponentPaneContent, {
      children: [isValidElementType(component) && createElement(component, {
        ...restProps,
        ...restPane,
        // NOTE: here we're utilizing the function form of refs so setting
        // the ref causes a re-render for `UserComponentPaneHeader`
        ...{
          ref: setRef
        },
        child,
        // @todo: Fix typings
        paneKey
      }), isValidElement(component) && component]
    })]
  });
}
export { UserComponentPane as default };
//# sourceMappingURL=index-0938a916.js.map
