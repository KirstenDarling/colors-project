'use strict';

var _templateObject;
function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var reactIs = require('react-is');
require('sanity');
var ui = require('@sanity/ui');
var desk = require('./desk-5bf1efda.js');
var icons = require('@sanity/icons');
require('sanity/router');
require('@sanity/types');
require('lodash/omit.js');
require('@sanity/util/paths');
require('lodash/isNumber.js');
require('lodash/isString.js');
require('react-rx');
var index = require('./index-09ced463.js');
var styled = require('styled-components');
function _interopDefaultCompat(e) {
  return e && typeof e === 'object' && 'default' in e ? e : {
    default: e
  };
}
var styled__default = /*#__PURE__*/_interopDefaultCompat(styled);
function UserComponentPaneHeader(props) {
  const {
    actionHandlers,
    index: index$1,
    menuItems,
    menuItemGroups,
    title
  } = props;
  const {
    features
  } = index.useDeskTool();
  if (!(menuItems == null ? void 0 : menuItems.length) && !title) {
    return null;
  }
  return /* @__PURE__ */jsxRuntime.jsx(desk.PaneHeader, {
    actions: /* @__PURE__ */jsxRuntime.jsx(desk.PaneHeaderActions, {
      menuItems,
      menuItemGroups,
      actionHandlers
    }),
    backButton: features.backButton && index$1 > 0 && /* @__PURE__ */jsxRuntime.jsx(ui.Button, {
      as: desk.BackLink,
      "data-as": "a",
      icon: icons.ArrowLeftIcon,
      mode: "bleed"
    }),
    title
  });
}
const Root = styled__default.default(ui.Box)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: relative;\n"])));
function UserComponentPaneContent(props) {
  const {
    children
  } = props;
  const {
    collapsed
  } = desk.usePane();
  return /* @__PURE__ */jsxRuntime.jsx(Root, {
    hidden: collapsed,
    height: "fill",
    overflow: "auto",
    children
  });
}
function UserComponentPane(props) {
  const {
    index,
    pane,
    paneKey,
    ...restProps
  } = props;
  const {
    child,
    component,
    menuItems,
    menuItemGroups,
    title = "",
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    type: _unused,
    ...restPane
  } = pane;
  const [ref, setRef] = React.useState(null);
  return /* @__PURE__ */jsxRuntime.jsxs(desk.Pane, {
    id: paneKey,
    minWidth: 320,
    selected: restProps.isSelected,
    children: [/* @__PURE__ */jsxRuntime.jsx(UserComponentPaneHeader, {
      actionHandlers: ref == null ? void 0 : ref.actionHandlers,
      index,
      menuItems,
      menuItemGroups,
      title
    }), /* @__PURE__ */jsxRuntime.jsxs(UserComponentPaneContent, {
      children: [reactIs.isValidElementType(component) && React.createElement(component, {
        ...restProps,
        ...restPane,
        // NOTE: here we're utilizing the function form of refs so setting
        // the ref causes a re-render for `UserComponentPaneHeader`
        ...{
          ref: setRef
        },
        child,
        // @todo: Fix typings
        paneKey
      }), React.isValidElement(component) && component]
    })]
  });
}
exports.default = UserComponentPane;
//# sourceMappingURL=index-211c04d3.js.map
