{"version":3,"file":"_internal-15cd4024.js","sources":["../../src/_internal/cli/commands/build/buildCommand.ts","../../src/_internal/cli/commands/check/checkCommand.ts","../../src/_internal/cli/commands/config/configCheckCommand.ts","../../src/_internal/cli/commands/dataset/datasetGroup.ts","../../src/_internal/cli/commands/deploy/deployCommand.ts","../../src/_internal/cli/commands/deploy/undeployCommand.ts","../../src/_internal/cli/actions/dataset/alias/validateDatasetAliasName.ts","../../src/_internal/cli/commands/dataset/alias/datasetAliasesClient.ts","../../src/_internal/cli/commands/dataset/alias/listAliasesHandler.ts","../../src/_internal/cli/commands/dataset/listDatasetsCommand.ts","../../src/_internal/cli/debug.ts","../../src/_internal/cli/actions/dataset/validateDatasetName.ts","../../src/_internal/cli/actions/dataset/datasetNamePrompt.ts","../../src/_internal/cli/commands/dataset/createDatasetCommand.ts","../../src/_internal/cli/commands/dataset/datasetVisibilityCommand.ts","../../src/_internal/cli/commands/dataset/deleteDatasetCommand.ts","../../src/_internal/cli/actions/dataset/chooseDatasetPrompt.ts","../../src/_internal/cli/commands/dataset/exportDatasetCommand.ts","../../src/_internal/cli/commands/dataset/importDatasetCommand.ts","../../src/_internal/cli/actions/dataset/listDatasetCopyJobs.ts","../../src/_internal/cli/util/getClientUrl.ts","../../src/_internal/cli/commands/dataset/copyDatasetCommand.ts","../../src/_internal/cli/actions/dataset/alias/promptForDatasetAliasName.ts","../../src/_internal/cli/commands/dataset/alias/createAliasHandler.ts","../../src/_internal/cli/commands/dataset/alias/deleteAliasHandler.ts","../../src/_internal/cli/commands/dataset/alias/unlinkAliasHandler.ts","../../src/_internal/cli/commands/dataset/alias/linkAliasHandler.ts","../../src/_internal/cli/commands/dataset/alias/aliasCommands.ts","../../src/_internal/cli/commands/documents/documentsGroup.ts","../../src/_internal/cli/util/colorizeJson.ts","../../src/_internal/cli/commands/documents/getDocumentsCommand.ts","../../src/_internal/cli/commands/documents/queryDocumentsCommand.ts","../../src/_internal/cli/commands/documents/deleteDocumentsCommand.ts","../../src/_internal/cli/commands/documents/createDocumentsCommand.ts","../../src/_internal/cli/commands/dev/devCommand.ts","../../src/_internal/cli/util/isInteractive.ts","../../src/_internal/cli/commands/start/startCommand.ts","../../src/_internal/cli/commands/preview/previewCommand.ts","../../src/_internal/cli/commands/uninstall/uninstallCommand.ts","../../src/_internal/cli/commands/hook/hookGroup.ts","../../src/_internal/cli/commands/hook/createHookCommand.ts","../../src/_internal/cli/commands/hook/deleteHookCommand.ts","../../src/_internal/cli/commands/hook/listHooksCommand.ts","../../src/_internal/cli/commands/hook/printHookAttemptCommand.ts","../../src/_internal/cli/commands/hook/listHookLogsCommand.ts","../../src/_internal/cli/commands/exec/execCommand.ts","../../src/_internal/cli/commands/cors/corsGroup.ts","../../src/_internal/cli/actions/cors/addCorsOrigin.ts","../../src/_internal/cli/commands/cors/addCorsOriginCommand.ts","../../src/_internal/cli/commands/cors/listCorsOriginsCommand.ts","../../src/_internal/cli/commands/cors/deleteCorsOriginCommand.ts","../../src/_internal/cli/commands/graphql/graphqlGroup.ts","../../src/_internal/cli/commands/graphql/listGraphQLAPIsCommand.ts","../../src/_internal/cli/commands/graphql/deployGraphQLAPICommand.ts","../../src/_internal/cli/commands/graphql/deleteGraphQLAPICommand.ts","../../src/_internal/cli/commands/users/usersGroup.ts","../../src/_internal/cli/util/prettifyQuotaError.ts","../../src/_internal/cli/commands/users/inviteUserCommand.ts","../../src/_internal/cli/commands/users/listUsersCommand.ts","../../src/_internal/cli/commands/index.ts"],"sourcesContent":["import type {CliCommandArguments, CliCommandContext, CliCommandDefinition} from '@sanity/cli'\nimport {BuildSanityStudioCommandFlags} from '../../actions/build/buildAction'\n\nconst helpText = `\nOptions\n  --source-maps Enable source maps for built bundles (increases size of bundle)\n  --no-minify Skip minifying built JavaScript (speeds up build, increases size of bundle)\n  -y, --yes Use unattended mode, accepting defaults and using only flags for choices\n\nExamples\n  sanity build\n  sanity build --no-minify --source-maps\n`\n\nconst buildCommand: CliCommandDefinition = {\n  name: 'build',\n  signature: '[OUTPUT_DIR]',\n  description: 'Builds the current Sanity configuration to a static bundle',\n  action: async (\n    args: CliCommandArguments<BuildSanityStudioCommandFlags>,\n    context: CliCommandContext,\n    overrides?: {basePath?: string}\n  ) => {\n    const buildAction = await getBuildAction()\n\n    return buildAction(args, context, overrides)\n  },\n  helpText,\n}\n\nasync function getBuildAction() {\n  // NOTE: in dev-mode we want to include from `src` so we need to use `.ts` extension\n  // NOTE: this `if` statement is not included in the output bundle\n  if (__DEV__) {\n    // eslint-disable-next-line import/extensions\n    const mod: typeof import('../../actions/build/buildAction') = require('../../actions/build/buildAction.ts')\n\n    return mod.default\n  }\n\n  const mod = await import('../../actions/build/buildAction')\n\n  return mod.default\n}\n\nexport default buildCommand\n","import type {CliCommandDefinition} from '@sanity/cli'\n\nconst checkCommand: CliCommandDefinition = {\n  name: 'check',\n  signature: '',\n  description: '[deprecated]',\n  helpText: '',\n  hideFromHelp: true,\n  action: (_args, context) => {\n    const {output} = context\n    output.print('`sanity check` is deprecated and no longer has any effect')\n    return Promise.resolve()\n  },\n}\n\nexport default checkCommand\n","import type {CliCommandDefinition} from '@sanity/cli'\n\nconst configCheckCommand: CliCommandDefinition = {\n  name: 'configcheck',\n  signature: '',\n  description: 'Checks if the required configuration files for plugins exists and are up to date',\n  helpText: '',\n  hideFromHelp: true,\n  action: async (args, context) => {\n    context.output.error('`sanity configcheck` is no longer required/used')\n    return Promise.resolve()\n  },\n}\n\nexport default configCheckCommand\n","export default {\n  name: 'dataset',\n  signature: '[COMMAND]',\n  isGroupRoot: true,\n  description: 'Interact with datasets in your project',\n}\n","import type {CliCommandArguments, CliCommandContext, CliCommandDefinition} from '@sanity/cli'\nimport type {DeployStudioActionFlags} from '../../actions/deploy/deployAction'\n\nconst helpText = `\nOptions\n  --source-maps Enable source maps for built bundles (increases size of bundle)\n  --no-minify Skip minifying built JavaScript (speeds up build, increases size of bundle)\n  --no-build Don't build the studio prior to deploy, instead deploying the version currently in \\`dist/\\`\n\nExamples\n  sanity deploy\n  sanity deploy --no-minify --source-maps\n`\n\nconst deployCommand: CliCommandDefinition = {\n  name: 'deploy',\n  signature: '[SOURCE_DIR] [--no-build]  [--source-maps] [--no-minify]',\n  description: 'Deploys a statically built Sanity studio',\n  action: async (\n    args: CliCommandArguments<DeployStudioActionFlags>,\n    context: CliCommandContext\n  ) => {\n    const mod = await import('../../actions/deploy/deployAction')\n\n    return mod.default(args, context)\n  },\n  helpText,\n}\n\nexport default deployCommand\n","import type {CliCommandArguments, CliCommandContext, CliCommandDefinition} from '@sanity/cli'\n\nconst helpText = `\nExamples\n  sanity undeploy\n`\n\nconst undeployCommand: CliCommandDefinition = {\n  name: 'undeploy',\n  signature: '',\n  description: 'Removes the deployed studio from <hostname>.sanity.studio',\n  action: async (\n    args: CliCommandArguments<Record<string, unknown>>,\n    context: CliCommandContext\n  ) => {\n    const mod = await import('../../actions/deploy/undeployAction')\n\n    return mod.default(args, context)\n  },\n  helpText,\n}\n\nexport default undeployCommand\n","const MAX_DATASET_NAME_LENGTH = 64\n\nexport function validateDatasetAliasName(datasetName: string): false | string {\n  if (!datasetName) {\n    return 'Alias name is missing'\n  }\n\n  const name = `${datasetName}`\n\n  if (name.toLowerCase() !== name) {\n    return 'Alias name must be all lowercase characters'\n  }\n\n  if (name.length < 2) {\n    return 'Alias name must be at least two characters long'\n  }\n\n  if (name.length > MAX_DATASET_NAME_LENGTH) {\n    return `Alias name must be at most ${MAX_DATASET_NAME_LENGTH} characters`\n  }\n\n  if (!/^[a-z0-9~]/.test(name)) {\n    return 'Alias name must start with a letter or a number'\n  }\n\n  if (!/^[a-z0-9~][-_a-z0-9]+$/.test(name)) {\n    return 'Alias name must only contain letters, numbers, dashes and underscores'\n  }\n\n  if (/[-_]$/.test(name)) {\n    return 'Alias name must not end with a dash or an underscore'\n  }\n\n  return false\n}\n","import type {SanityClient} from '@sanity/client'\nimport {validateDatasetAliasName} from '../../../actions/dataset/alias/validateDatasetAliasName'\nimport type {DatasetAliasDefinition, DatasetModificationResponse} from './types'\n\nexport const ALIAS_PREFIX = '~'\n\nexport function listAliases(client: SanityClient): Promise<DatasetAliasDefinition[]> {\n  return client.request<DatasetAliasDefinition[]>({uri: '/aliases'})\n}\n\nexport function createAlias(\n  client: SanityClient,\n  aliasName: string,\n  datasetName: string | null\n): Promise<DatasetModificationResponse> {\n  return modify(client, 'PUT', aliasName, datasetName ? {datasetName} : undefined)\n}\n\nexport function updateAlias(\n  client: SanityClient,\n  aliasName: string,\n  datasetName: string | null\n): Promise<DatasetModificationResponse> {\n  return modify(client, 'PATCH', aliasName, datasetName ? {datasetName} : undefined)\n}\n\nexport function unlinkAlias(\n  client: SanityClient,\n  aliasName: string\n): Promise<DatasetModificationResponse> {\n  validateDatasetAliasName(aliasName)\n  return modify(client, 'PATCH', `${aliasName}/unlink`, {})\n}\n\nexport function removeAlias(client: SanityClient, aliasName: string): Promise<{deleted: boolean}> {\n  return modify(client, 'DELETE', aliasName)\n}\n\nfunction modify(\n  client: SanityClient,\n  method: string,\n  aliasName: string,\n  body?: {datasetName?: string}\n) {\n  return client.request({method, uri: `/aliases/${aliasName}`, body})\n}\n","import type {CliCommandAction} from '@sanity/cli'\nimport * as aliasClient from './datasetAliasesClient'\nimport {ALIAS_PREFIX} from './datasetAliasesClient'\n\nexport const listAliasesHandler: CliCommandAction = async (args, context) => {\n  const {apiClient, output} = context\n  const client = apiClient()\n\n  const aliases = await aliasClient.listAliases(client)\n  output.print(\n    aliases\n      .map((set) => `${ALIAS_PREFIX}${set.name} -> ${set.datasetName || '<unlinked>'}`)\n      .join('\\n')\n  )\n}\n","import type {CliCommandDefinition} from '@sanity/cli'\nimport {listAliasesHandler} from './alias/listAliasesHandler'\n\nconst listDatasetsCommand: CliCommandDefinition = {\n  name: 'list',\n  group: 'dataset',\n  helpText: '',\n  signature: '',\n  description: 'List datasets of your project',\n  action: async (args, context) => {\n    const {apiClient, output} = context\n    const client = apiClient()\n    const datasets = await client.datasets.list()\n    output.print(datasets.map((set) => set.name).join('\\n'))\n\n    // Print alias list\n    await listAliasesHandler(args, context)\n  },\n}\n\nexport default listDatasetsCommand\n","import debugIt from 'debug'\n\nexport const debug = debugIt('sanity:core')\n","const MAX_DATASET_NAME_LENGTH = 64\n\nexport function validateDatasetName(datasetName: string): false | string {\n  if (!datasetName) {\n    return 'Dataset name is missing'\n  }\n\n  const name = `${datasetName}`\n\n  if (name.toLowerCase() !== name) {\n    return 'Dataset name must be all lowercase characters'\n  }\n\n  if (name.length < 2) {\n    return 'Dataset name must be at least two characters long'\n  }\n\n  if (name.length > MAX_DATASET_NAME_LENGTH) {\n    return `Dataset name must be at most ${MAX_DATASET_NAME_LENGTH} characters`\n  }\n\n  if (!/^[a-z0-9]/.test(name)) {\n    return 'Dataset name must start with a letter or a number'\n  }\n\n  if (!/^[a-z0-9][-_a-z0-9]+$/.test(name)) {\n    return 'Dataset name must only contain letters, numbers, dashes and underscores'\n  }\n\n  if (/[-_]$/.test(name)) {\n    return 'Dataset name must not end with a dash or an underscore'\n  }\n\n  return false\n}\n","import type {CliPrompter} from '@sanity/cli'\nimport {validateDatasetName} from './validateDatasetName'\n\nexport function promptForDatasetName(\n  prompt: CliPrompter,\n  options: {message?: string; default?: string} = {}\n): Promise<string> {\n  return prompt.single({\n    type: 'input',\n    message: 'Dataset name:',\n    validate: (name) => {\n      const err = validateDatasetName(name)\n      if (err) {\n        return err\n      }\n\n      return true\n    },\n    ...options,\n  })\n}\n","import type {CliCommandDefinition, CliOutputter, CliPrompter} from '@sanity/cli'\nimport {debug} from '../../debug'\nimport {promptForDatasetName} from '../../actions/dataset/datasetNamePrompt'\nimport {validateDatasetName} from '../../actions/dataset/validateDatasetName'\n\nconst helpText = `\nOptions\n  --visibility <mode> Set visibility for this dataset (public/private)\n\nExamples\n  sanity dataset create\n  sanity dataset create <name>\n  sanity dataset create <name> --visibility private\n`\n\nconst allowedModes = ['private', 'public', 'custom']\n\ninterface CreateFlags {\n  visibility?: 'private' | 'public' | 'custom'\n}\n\nconst createDatasetCommand: CliCommandDefinition<CreateFlags> = {\n  name: 'create',\n  group: 'dataset',\n  signature: '[NAME]',\n  helpText,\n  description: 'Create a new dataset within your project',\n  action: async (args, context) => {\n    const {apiClient, output, prompt} = context\n    const flags = args.extOptions\n    const [dataset] = args.argsWithoutOptions\n    const client = apiClient()\n\n    const nameError = dataset && validateDatasetName(dataset)\n    if (nameError) {\n      throw new Error(nameError)\n    }\n\n    const [datasets, projectFeatures] = await Promise.all([\n      client.datasets.list().then((sets) => sets.map((ds) => ds.name)),\n      client.request({uri: '/features'}),\n    ])\n\n    if (flags.visibility && !allowedModes.includes(flags.visibility)) {\n      throw new Error(`Visibility mode \"${flags.visibility}\" not allowed`)\n    }\n\n    const datasetName = await (dataset || promptForDatasetName(prompt))\n    if (datasets.includes(datasetName)) {\n      throw new Error(`Dataset \"${datasetName}\" already exists`)\n    }\n\n    const canCreatePrivate = projectFeatures.includes('privateDataset')\n    debug('%s create private datasets', canCreatePrivate ? 'Can' : 'Cannot')\n\n    const defaultAclMode = canCreatePrivate ? flags.visibility : 'public'\n    const aclMode = await (defaultAclMode || promptForDatasetVisibility(prompt, output))\n\n    try {\n      await client.datasets.create(datasetName, {aclMode})\n      output.print('Dataset created successfully')\n    } catch (err) {\n      throw new Error(`Dataset creation failed:\\n${err.message}`)\n    }\n  },\n}\n\nasync function promptForDatasetVisibility(prompt: CliPrompter, output: CliOutputter) {\n  const mode = await prompt.single<'public' | 'private'>({\n    type: 'list',\n    message: 'Dataset visibility',\n    choices: [\n      {\n        value: 'public',\n        name: 'Public (world readable)',\n      },\n      {\n        value: 'private',\n        name: 'Private (Authenticated user or token needed)',\n      },\n    ],\n  })\n\n  if (mode === 'private') {\n    output.print(\n      'Please note that while documents are private, assets (files and images) are still public\\n'\n    )\n  }\n\n  return mode\n}\n\nexport default createDatasetCommand\n","import type {CliCommandDefinition} from '@sanity/cli'\nimport {validateDatasetName} from '../../actions/dataset/validateDatasetName'\n\nconst datasetVisibilityCommand: CliCommandDefinition = {\n  name: 'visibility',\n  group: 'dataset',\n  helpText: '',\n  signature: 'get/set [dataset] [mode]',\n  description: 'Set visibility of a dataset',\n  action: async (args, context) => {\n    const {apiClient, output} = context\n    const [action, ds, aclMode] = args.argsWithoutOptions\n    const client = apiClient()\n\n    if (!client.datasets.edit) {\n      throw new Error('@sanity/cli must be upgraded first:\\n  npm install -g @sanity/cli')\n    }\n\n    if (!action) {\n      throw new Error('Action must be provided (get/set)')\n    }\n\n    if (!['set', 'get'].includes(action)) {\n      throw new Error('Invalid action (only get/set allowed)')\n    }\n\n    if (!ds) {\n      throw new Error('Dataset name must be provided')\n    }\n\n    if (action === 'set' && !aclMode) {\n      throw new Error('Please provide a visibility mode (public/private)')\n    }\n\n    const dataset = `${ds}`\n    const dsError = validateDatasetName(dataset)\n    if (dsError) {\n      throw new Error(dsError)\n    }\n\n    const current = (await client.datasets.list()).find((curr) => curr.name === dataset)\n\n    if (!current) {\n      throw new Error('Dataset not found')\n    }\n\n    if (action === 'get') {\n      output.print(current.aclMode)\n      return\n    }\n\n    if (current.aclMode === aclMode) {\n      output.print(`Dataset already in \"${aclMode}\"-mode`)\n      return\n    }\n\n    if (aclMode === 'private') {\n      output.print(\n        'Please note that while documents are private, assets (files and images) are still public\\n'\n      )\n    }\n\n    await client.datasets.edit(dataset, {aclMode: aclMode as 'public' | 'private'})\n    output.print('Dataset visibility changed')\n  },\n}\n\nexport default datasetVisibilityCommand\n","import yargs from 'yargs/yargs'\nimport {hideBin} from 'yargs/helpers'\nimport type {CliCommandDefinition} from '@sanity/cli'\nimport {validateDatasetName} from '../../actions/dataset/validateDatasetName'\n\nconst helpText = `\nOptions\n  --force Do not prompt for delete confirmation - forcefully delete\n\nExamples\n  sanity dataset delete\n  sanity dataset delete my-dataset\n  sanity dataset delete my-dataset --force\n`\n\nfunction parseCliFlags(args: {argv?: string[]}) {\n  return yargs(hideBin(args.argv || process.argv).slice(2)).option('force', {type: 'boolean'}).argv\n}\n\ninterface DeleteDatasetFlags {\n  force?: boolean\n}\n\nconst deleteDatasetCommand: CliCommandDefinition<DeleteDatasetFlags> = {\n  name: 'delete',\n  group: 'dataset',\n  helpText,\n  signature: '[datasetName]',\n  description: 'Delete a dataset within your project',\n  action: async (args, context) => {\n    const {apiClient, prompt, output} = context\n    const {force} = await parseCliFlags(args)\n    const [ds] = args.argsWithoutOptions\n    if (!ds) {\n      throw new Error('Dataset name must be provided')\n    }\n\n    const dataset = `${ds}`\n    const dsError = validateDatasetName(dataset)\n    if (dsError) {\n      throw dsError\n    }\n\n    if (force) {\n      output.warn(`'--force' used: skipping confirmation, deleting dataset \"${dataset}\"`)\n    } else {\n      await prompt.single({\n        type: 'input',\n        message:\n          'Are you ABSOLUTELY sure you want to delete this dataset?\\n  Type the name of the dataset to confirm delete:',\n        filter: (input) => `${input}`.trim(),\n        validate: (input) => {\n          return input === dataset || 'Incorrect dataset name. Ctrl + C to cancel delete.'\n        },\n      })\n    }\n\n    await apiClient().datasets.delete(dataset)\n    output.print('Dataset deleted successfully')\n  },\n}\n\nexport default deleteDatasetCommand\n","import type {CliCommandContext} from '@sanity/cli'\nimport {debug} from '../../debug'\nimport {promptForDatasetName} from './datasetNamePrompt'\n\nexport async function chooseDatasetPrompt(\n  context: CliCommandContext,\n  options: {message?: string; allowCreation?: boolean} = {}\n): Promise<string> {\n  const {apiClient, prompt} = context\n  const {message, allowCreation} = options\n  const client = apiClient()\n\n  const datasets = await client.datasets.list()\n  const hasProduction = datasets.find((dataset) => dataset.name === 'production')\n  const datasetChoices = datasets.map((dataset) => ({value: dataset.name}))\n  const selected = await prompt.single({\n    message: message || 'Select dataset to use',\n    type: 'list',\n    choices: allowCreation\n      ? [{value: 'new', name: 'Create new dataset'}, new prompt.Separator(), ...datasetChoices]\n      : datasetChoices,\n  })\n\n  if (selected === 'new') {\n    debug('User wants to create a new dataset, prompting for name')\n    const newDatasetName = await promptForDatasetName(prompt, {\n      message: 'Name your dataset:',\n      default: hasProduction ? undefined : 'production',\n    })\n    await client.datasets.create(newDatasetName)\n    return newDatasetName\n  }\n\n  return selected\n}\n","import path from 'path'\nimport fs from 'fs/promises'\nimport type {CliCommandDefinition, CliPrompter} from '@sanity/cli'\nimport prettyMs from 'pretty-ms'\nimport {absolutify} from '@sanity/util/fs'\nimport exportDataset from '@sanity/export'\nimport {chooseDatasetPrompt} from '../../actions/dataset/chooseDatasetPrompt'\nimport {validateDatasetName} from '../../actions/dataset/validateDatasetName'\n\nconst noop = () => null\n\nconst helpText = `\nOptions\n  --raw                     Extract only documents, without rewriting asset references\n  --no-assets               Export only non-asset documents and remove references to image assets\n  --no-drafts               Export only published versions of documents\n  --no-compress             Skips compressing tarball entries (still generates a gzip file)\n  --types                   Defines which document types to export\n  --overwrite               Overwrite any file with the same name\n  --asset-concurrency <num> Concurrent number of asset downloads\n\nExamples\n  sanity dataset export moviedb localPath.tar.gz\n  sanity dataset export moviedb assetless.tar.gz --no-assets\n  sanity dataset export staging staging.tar.gz --raw\n  sanity dataset export staging staging.tar.gz --types products,shops\n`\n\ninterface ExportFlags {\n  raw?: boolean\n  assets?: boolean\n  drafts?: boolean\n  compress?: boolean\n  overwrite?: boolean\n  types?: string\n  'asset-concurrency'?: string\n}\n\ninterface ParsedExportFlags {\n  raw?: boolean\n  assets?: boolean\n  drafts?: boolean\n  compress?: boolean\n  overwrite?: boolean\n  types?: string[]\n  assetConcurrency?: number\n}\n\nfunction parseFlags(rawFlags: ExportFlags): ParsedExportFlags {\n  const flags: ParsedExportFlags = {}\n  if (rawFlags.types) {\n    flags.types = `${rawFlags.types}`.split(',')\n  }\n\n  if (rawFlags['asset-concurrency']) {\n    flags.assetConcurrency = parseInt(rawFlags['asset-concurrency'], 10)\n  }\n\n  if (typeof rawFlags.raw !== 'undefined') {\n    flags.raw = Boolean(rawFlags.raw)\n  }\n\n  if (typeof rawFlags.assets !== 'undefined') {\n    flags.assets = Boolean(rawFlags.assets)\n  }\n\n  if (typeof rawFlags.drafts !== 'undefined') {\n    flags.drafts = Boolean(rawFlags.drafts)\n  }\n\n  if (typeof rawFlags.compress !== 'undefined') {\n    flags.compress = Boolean(rawFlags.compress)\n  }\n\n  if (typeof rawFlags.overwrite !== 'undefined') {\n    flags.overwrite = Boolean(rawFlags.overwrite)\n  }\n\n  return flags\n}\n\ninterface ProgressEvent {\n  step: string\n  update?: boolean\n  current: number\n  total: number\n}\n\nconst exportDatasetCommand: CliCommandDefinition<ExportFlags> = {\n  name: 'export',\n  group: 'dataset',\n  signature: '[NAME] [DESTINATION]',\n  description: 'Export dataset to local filesystem as a gzipped tarball',\n  helpText,\n  action: async (args, context) => {\n    const {apiClient, output, chalk, workDir, prompt} = context\n    const client = apiClient()\n    const [targetDataset, targetDestination] = args.argsWithoutOptions\n    const flags = parseFlags(args.extOptions)\n\n    let dataset = targetDataset ? `${targetDataset}` : null\n    if (!dataset) {\n      dataset = await chooseDatasetPrompt(context, {message: 'Select dataset to export'})\n    }\n\n    const dsError = validateDatasetName(dataset)\n    if (dsError) {\n      throw dsError\n    }\n\n    // Verify existence of dataset before trying to export from it\n    const datasets = await client.datasets.list()\n    if (!datasets.find((set) => set.name === dataset)) {\n      throw new Error(`Dataset with name \"${dataset}\" not found`)\n    }\n\n    let destinationPath = targetDestination\n    if (!destinationPath) {\n      destinationPath = await prompt.single({\n        type: 'input',\n        message: 'Output path:',\n        default: path.join(workDir, `${dataset}.tar.gz`),\n        filter: absolutify,\n      })\n    }\n\n    const outputPath = await getOutputPath(destinationPath, dataset, prompt, flags)\n    if (!outputPath) {\n      output.print('Cancelled')\n      return\n    }\n\n    // If we are dumping to a file, let the user know where it's at\n    if (outputPath !== '-') {\n      output.print(`Exporting dataset \"${chalk.cyan(dataset)}\" to \"${chalk.cyan(outputPath)}\"`)\n    }\n\n    let currentStep = 'Exporting documents...'\n    let spinner = output.spinner(currentStep).start()\n    const onProgress = (progress: ProgressEvent) => {\n      if (progress.step !== currentStep) {\n        spinner.succeed()\n        spinner = output.spinner(progress.step).start()\n      } else if (progress.step === currentStep && progress.update) {\n        spinner.text = `${progress.step} (${progress.current}/${progress.total})`\n      }\n\n      currentStep = progress.step\n    }\n\n    const start = Date.now()\n    try {\n      await exportDataset({\n        client,\n        dataset,\n        outputPath,\n        onProgress,\n        ...flags,\n      })\n      spinner.succeed()\n    } catch (err) {\n      spinner.fail()\n      throw err\n    }\n\n    output.print(`Export finished (${prettyMs(Date.now() - start)})`)\n  },\n}\n\n// eslint-disable-next-line complexity\nasync function getOutputPath(\n  destination: string,\n  dataset: string,\n  prompt: CliPrompter,\n  flags: ParsedExportFlags\n) {\n  if (destination === '-') {\n    return '-'\n  }\n\n  const dstPath = path.isAbsolute(destination)\n    ? destination\n    : path.resolve(process.cwd(), destination)\n\n  let dstStats = await fs.stat(dstPath).catch(noop)\n  const looksLikeFile = dstStats ? dstStats.isFile() : path.basename(dstPath).indexOf('.') !== -1\n\n  if (!dstStats) {\n    const createPath = looksLikeFile ? path.dirname(dstPath) : dstPath\n\n    await fs.mkdir(createPath, {recursive: true})\n  }\n\n  const finalPath = looksLikeFile ? dstPath : path.join(dstPath, `${dataset}.tar.gz`)\n  dstStats = await fs.stat(finalPath).catch(noop)\n\n  if (!flags.overwrite && dstStats && dstStats.isFile()) {\n    const shouldOverwrite = await prompt.single({\n      type: 'confirm',\n      message: `File \"${finalPath}\" already exists, would you like to overwrite it?`,\n      default: false,\n    })\n\n    if (!shouldOverwrite) {\n      return false\n    }\n  }\n\n  return finalPath\n}\n\nexport default exportDatasetCommand\n","import path from 'path'\nimport fs from 'fs/promises'\nimport {createReadStream} from 'fs'\nimport type {CliCommandContext, CliCommandDefinition, CliOutputter} from '@sanity/cli'\nimport {getIt} from 'get-it'\nimport {promise} from 'get-it/middleware'\nimport sanityImport from '@sanity/import'\nimport padStart from 'lodash/padStart'\nimport prettyMs from 'pretty-ms'\nimport {chooseDatasetPrompt} from '../../actions/dataset/chooseDatasetPrompt'\nimport {validateDatasetName} from '../../actions/dataset/validateDatasetName'\nimport {debug} from '../../debug'\n\nconst yellow = (str: string) => `\\u001b[33m${str}\\u001b[39m`\n\nconst helpText = `\nOptions\n  --missing On duplicate document IDs, skip importing document in question\n  --replace On duplicate document IDs, replace existing document with imported document\n  --allow-failing-assets Skip assets that cannot be fetched/uploaded\n  --replace-assets Skip reuse of existing assets\n\nRarely used options (should generally not be used)\n  --allow-assets-in-different-dataset Allow asset documents to reference different project/dataset\n\nExamples\n  # Import \"moviedb.ndjson\" from the current directory to the dataset called \"moviedb\"\n  sanity dataset import moviedb.ndjson moviedb\n\n  # Import \"moviedb.tar.gz\" from the current directory to the dataset called \"moviedb\",\n  # replacing any documents encountered that have the same document IDs\n  sanity dataset import moviedb.tar.gz moviedb --replace\n\n  # Import from a folder containing an ndjson file, such as an extracted tarball\n  # retrieved through \"sanity dataset export\".\n  sanity dataset import ~/some/folder moviedb\n\n  # Import from a remote URL. Will download and extract the tarball to a temporary\n  # location before importing it.\n  sanity dataset import https://some.url/moviedb.tar.gz moviedb --replace\n`\n\ninterface ImportFlags {\n  'allow-assets-in-different-dataset'?: boolean\n  'allow-failing-assets'?: boolean\n  'asset-concurrency'?: boolean\n  'replace-assets'?: boolean\n  replace?: boolean\n  missing?: boolean\n}\n\ninterface ParsedImportFlags {\n  allowAssetsInDifferentDataset?: boolean\n  allowFailingAssets?: boolean\n  assetConcurrency?: boolean\n  replaceAssets?: boolean\n  replace?: boolean\n  missing?: boolean\n}\n\ninterface ProgressEvent {\n  step: string\n  total?: number\n  current?: number\n}\n\ninterface ImportWarning {\n  type?: string\n  url?: string\n}\n\nfunction toBoolIfSet(flag: unknown): boolean | undefined {\n  return typeof flag === 'undefined' ? undefined : Boolean(flag)\n}\n\nfunction parseFlags(rawFlags: ImportFlags): ParsedImportFlags {\n  const allowAssetsInDifferentDataset = toBoolIfSet(rawFlags['allow-assets-in-different-dataset'])\n  const allowFailingAssets = toBoolIfSet(rawFlags['allow-failing-assets'])\n  const assetConcurrency = toBoolIfSet(rawFlags['asset-concurrency'])\n  const replaceAssets = toBoolIfSet(rawFlags['replace-assets'])\n  const replace = toBoolIfSet(rawFlags.replace)\n  const missing = toBoolIfSet(rawFlags.missing)\n  return {\n    allowAssetsInDifferentDataset,\n    allowFailingAssets,\n    assetConcurrency,\n    replaceAssets,\n    replace,\n    missing,\n  }\n}\n\nconst importDatasetCommand: CliCommandDefinition = {\n  name: 'import',\n  group: 'dataset',\n  signature: '[FILE | FOLDER | URL] [TARGET_DATASET]',\n  description: 'Import documents to given dataset from ndjson file',\n  helpText,\n  // eslint-disable-next-line max-statements\n  action: async (args, context) => {\n    const {apiClient, output, chalk, fromInitCommand} = context\n    const flags = parseFlags(args.extOptions)\n    const {allowAssetsInDifferentDataset, allowFailingAssets, assetConcurrency, replaceAssets} =\n      flags\n\n    const operation = getMutationOperation(args.extOptions)\n    const client = apiClient()\n\n    const [file, target] = args.argsWithoutOptions\n    if (!file) {\n      throw new Error(\n        `Source file name and target dataset must be specified (\"sanity dataset import ${chalk.bold(\n          '[file]'\n        )} [dataset]\")`\n      )\n    }\n\n    const targetDataset = await determineTargetDataset(target, context)\n    debug(`Target dataset has been set to \"${targetDataset}\"`)\n\n    const isUrl = /^https?:\\/\\//i.test(file)\n    let inputStream\n    let assetsBase\n    let sourceIsFolder = false\n\n    if (isUrl) {\n      debug('Input is a URL, streaming from source URL')\n      inputStream = await getUrlStream(file)\n    } else {\n      const sourceFile = path.resolve(process.cwd(), file)\n      const fileStats = await fs.stat(sourceFile).catch(() => null)\n      if (!fileStats) {\n        throw new Error(`${sourceFile} does not exist or is not readable`)\n      }\n\n      sourceIsFolder = fileStats.isDirectory()\n      if (sourceIsFolder) {\n        inputStream = sourceFile\n      } else {\n        assetsBase = path.dirname(sourceFile)\n        inputStream = await createReadStream(sourceFile)\n      }\n    }\n\n    const importClient = client.clone().config({dataset: targetDataset})\n\n    let currentStep: string | undefined\n    let currentProgress: ReturnType<CliOutputter['spinner']> | undefined\n    let stepStart: number | undefined\n    let spinInterval: ReturnType<typeof setInterval> | null = null\n    let percent: string | undefined\n\n    function onProgress(opts: ProgressEvent) {\n      const lengthComputable = opts.total\n      const sameStep = opts.step == currentStep\n      percent = getPercentage(opts)\n\n      if (lengthComputable && opts.total === opts.current) {\n        if (spinInterval) {\n          clearInterval(spinInterval)\n        }\n        spinInterval = null\n      }\n\n      if (sameStep) {\n        return\n      }\n\n      // Moved to a new step\n      const prevStep = currentStep\n      const prevStepStart = stepStart || Date.now()\n      stepStart = Date.now()\n      currentStep = opts.step\n\n      if (currentProgress && currentProgress.succeed) {\n        const timeSpent = prettyMs(Date.now() - prevStepStart, {\n          secondsDecimalDigits: 2,\n        })\n        currentProgress.text = `[100%] ${prevStep} (${timeSpent})`\n        currentProgress.succeed()\n      }\n\n      currentProgress = output.spinner(`[0%] ${opts.step} (0.00s)`).start()\n\n      if (spinInterval) {\n        clearInterval(spinInterval)\n        spinInterval = null\n      }\n\n      spinInterval = setInterval(() => {\n        const timeSpent = prettyMs(Date.now() - prevStepStart, {\n          secondsDecimalDigits: 2,\n        })\n\n        if (currentProgress) {\n          currentProgress.text = `${percent}${opts.step} (${timeSpent})`\n        }\n      }, 60)\n    }\n\n    function endTask({success}: {success: boolean}) {\n      if (spinInterval) {\n        clearInterval(spinInterval)\n      }\n\n      spinInterval = null\n\n      if (success && stepStart && currentProgress) {\n        const timeSpent = prettyMs(Date.now() - stepStart, {\n          secondsDecimalDigits: 2,\n        })\n        currentProgress.text = `[100%] ${currentStep} (${timeSpent})`\n        currentProgress.succeed()\n      } else if (currentProgress) {\n        currentProgress.fail()\n      }\n    }\n\n    // Start the import!\n    try {\n      const {numDocs, warnings} = await sanityImport(inputStream, {\n        client: importClient,\n        assetsBase,\n        operation,\n        onProgress,\n        allowFailingAssets,\n        allowAssetsInDifferentDataset,\n        assetConcurrency,\n        replaceAssets,\n      })\n\n      endTask({success: true})\n\n      output.print('Done! Imported %d documents to dataset \"%s\"\\n', numDocs, targetDataset)\n      printWarnings(warnings, output)\n    } catch (err) {\n      endTask({success: false})\n\n      const isNonRefConflict =\n        !fromInitCommand &&\n        err.response &&\n        err.response.statusCode === 409 &&\n        err.step !== 'strengthen-references'\n\n      if (!isNonRefConflict) {\n        throw err\n      }\n\n      const message = [\n        err.message,\n        '',\n        'You probably want either:',\n        ' --replace (replace existing documents with same IDs)',\n        ' --missing (only import documents that do not already exist)',\n        '',\n      ].join('\\n')\n\n      // @todo SUBCLASS ERROR?\n      const error = new Error(message) as any\n      error.details = err.details\n      error.response = err.response\n      error.responseBody = err.responseBody\n\n      throw error\n    }\n  },\n}\n\nasync function determineTargetDataset(target: string, context: CliCommandContext) {\n  const {apiClient, output, prompt} = context\n  const client = apiClient()\n\n  if (target) {\n    const dsError = validateDatasetName(target)\n    if (dsError) {\n      throw new Error(dsError)\n    }\n  }\n\n  debug('Fetching available datasets')\n  const spinner = output.spinner('Fetching available datasets').start()\n  const datasets = await client.datasets.list()\n  spinner.succeed('[100%] Fetching available datasets')\n\n  let targetDataset = target ? `${target}` : null\n  if (!targetDataset) {\n    targetDataset = await chooseDatasetPrompt(context, {\n      message: 'Select target dataset',\n      allowCreation: true,\n    })\n  } else if (!datasets.find((dataset) => dataset.name === targetDataset)) {\n    debug('Target dataset does not exist, prompting for creation')\n    const shouldCreate = await prompt.single({\n      type: 'confirm',\n      message: `Dataset \"${targetDataset}\" does not exist, would you like to create it?`,\n      default: true,\n    })\n\n    if (!shouldCreate) {\n      throw new Error(`Dataset \"${targetDataset}\" does not exist`)\n    }\n\n    await client.datasets.create(targetDataset)\n  }\n\n  return targetDataset\n}\n\nfunction getMutationOperation(flags: ParsedImportFlags) {\n  const {replace, missing} = flags\n  if (replace && missing) {\n    throw new Error('Cannot use both --replace and --missing')\n  }\n\n  if (flags.replace) {\n    return 'createOrReplace'\n  }\n\n  if (flags.missing) {\n    return 'createIfNotExists'\n  }\n\n  return 'create'\n}\n\nfunction getPercentage(opts: ProgressEvent) {\n  if (!opts.total || typeof opts.current === 'undefined') {\n    return ''\n  }\n\n  const percent = Math.floor((opts.current / opts.total) * 100)\n  return `[${padStart(`${percent}`, 3, ' ')}%] `\n}\n\nfunction getUrlStream(url: string) {\n  const request = getIt([promise({onlyBody: true})])\n  return request({url, stream: true})\n}\n\nfunction printWarnings(warnings: ImportWarning[], output: CliOutputter) {\n  const assetFails = warnings.filter((warn) => warn.type === 'asset')\n\n  if (!assetFails.length) {\n    return\n  }\n\n  const warn = (output.warn || output.print).bind(output)\n\n  warn(yellow('⚠ Failed to import the following %s:'), assetFails.length > 1 ? 'assets' : 'asset')\n\n  warnings.forEach((warning) => {\n    warn(`  ${warning.url}`)\n  })\n}\n\nexport default importDatasetCommand\n","import {parseISO, formatDistanceToNow, formatDistance} from 'date-fns'\nimport {Table} from 'console-table-printer'\nimport type {CliCommandContext} from '@sanity/cli'\n\ninterface ListFlags {\n  offset?: number\n  limit?: number\n}\n\ntype CopyDatasetListResponse = {\n  id: string\n  state: string\n  createdAt: string\n  updatedAt: string\n  sourceDataset: string\n  targetDataset: string\n  withHistory: boolean\n}[]\n\nexport async function listDatasetCopyJobs(\n  flags: ListFlags,\n  context: CliCommandContext\n): Promise<void> {\n  const {apiClient, output, chalk} = context\n  const client = apiClient()\n  const projectId = client.config().projectId\n  const query: {offset?: string; limit?: string} = {}\n  let response\n\n  if (flags.offset && flags.offset >= 0) {\n    query.offset = `${flags.offset}`\n  }\n  if (flags.limit && flags.limit > 0) {\n    query.limit = `${flags.limit}`\n  }\n\n  try {\n    response = await client.request<CopyDatasetListResponse>({\n      method: 'GET',\n      uri: `/projects/${projectId}/datasets/copy`,\n      query,\n    })\n  } catch (error) {\n    if (error.statusCode) {\n      output.error(`${chalk.red(`Dataset copy list failed:\\n${error.response.body.message}`)}\\n`)\n    } else {\n      output.error(`${chalk.red(`Dataset copy list failed:\\n${error.message}`)}\\n`)\n    }\n  }\n\n  if (response && response.length > 0) {\n    const table = new Table({\n      title: 'Dataset copy jobs for this project in descending order',\n      columns: [\n        {name: 'id', title: 'Job ID', alignment: 'left'},\n        {name: 'sourceDataset', title: 'Source Dataset', alignment: 'left'},\n        {name: 'targetDataset', title: 'Target Dataset', alignment: 'left'},\n        {name: 'state', title: 'State', alignment: 'left'},\n        {name: 'withHistory', title: 'With history', alignment: 'left'},\n        {name: 'timeStarted', title: 'Time started', alignment: 'left'},\n        {name: 'timeTaken', title: 'Time taken', alignment: 'left'},\n      ],\n    })\n\n    response.forEach((job) => {\n      const {id, state, createdAt, updatedAt, sourceDataset, targetDataset, withHistory} = job\n\n      let timeStarted = ''\n      if (createdAt !== '') {\n        timeStarted = formatDistanceToNow(parseISO(createdAt))\n      }\n\n      let timeTaken = ''\n      if (updatedAt !== '') {\n        timeTaken = formatDistance(parseISO(updatedAt), parseISO(createdAt))\n      }\n\n      let color\n      switch (state) {\n        case 'completed':\n          color = 'green'\n          break\n        case 'failed':\n          color = 'red'\n          break\n        case 'pending':\n          color = 'yellow'\n          break\n        default:\n          color = ''\n      }\n\n      table.addRow(\n        {\n          id,\n          state,\n          withHistory,\n          timeStarted: `${timeStarted} ago`,\n          timeTaken,\n          sourceDataset,\n          targetDataset,\n        },\n        {color}\n      )\n    })\n\n    table.printTable()\n  } else {\n    output.print(\"This project doesn't have any dataset copy jobs\")\n  }\n}\n","import type {SanityClient} from '@sanity/client'\n\nexport const getClientUrl = (client: SanityClient, uri: string, useCdn = false): string => {\n  const config = client.config()\n  const base = useCdn ? config.cdnUrl : config.url\n  return `${base}/${uri.replace(/^\\//, '')}`\n}\n","import type {SanityClient} from '@sanity/client'\nimport type {CliCommandDefinition, CliOutputter} from '@sanity/cli'\nimport yargs from 'yargs/yargs'\nimport {hideBin} from 'yargs/helpers'\nimport EventSource from '@sanity/eventsource'\nimport {Observable} from 'rxjs'\nimport {promptForDatasetName} from '../../actions/dataset/datasetNamePrompt'\nimport {validateDatasetName} from '../../actions/dataset/validateDatasetName'\nimport {debug} from '../../debug'\nimport {listDatasetCopyJobs} from '../../actions/dataset/listDatasetCopyJobs'\nimport {getClientUrl} from '../../util/getClientUrl'\n\nconst helpText = `\nOptions\n  --detach Start the copy without waiting for it to finish\n  --attach <job-id> Attach to the running copy process to show progress\n  --skip-history Don't preserve document history on copy\n  --list Lists all dataset copy jobs corresponding to a certain criteria.\n  --offset Start position in the list of jobs. Default 0. With --list.\n  --limit Maximum number of jobs returned. Default 10. Maximum 1000. With --list.\n\nExamples\n  sanity dataset copy\n  sanity dataset copy <source-dataset>\n  sanity dataset copy <source-dataset> <target-dataset>\n  sanity dataset copy --skip-history <source-dataset> <target-dataset>\n  sanity dataset copy --detach <source-dataset> <target-dataset>\n  sanity dataset copy --attach <job-id>\n  sanity dataset copy --list\n  sanity dataset copy --list --offset=2\n  sanity dataset copy --list --offset=2 --limit=10\n`\n\ninterface CopyProgressStreamEvent {\n  type: 'reconnect' | string\n  progress?: number\n}\n\ninterface CopyDatasetFlags {\n  list?: boolean\n  attach?: string\n  detach?: boolean\n  offset?: number\n  limit?: number\n  'skip-history'?: boolean\n}\n\ninterface CopyDatasetResponse {\n  jobId: string\n}\n\nfunction parseCliFlags(args: {argv?: string[]}) {\n  return yargs(hideBin(args.argv || process.argv).slice(2))\n    .option('attach', {type: 'string'})\n    .option('list', {type: 'boolean'})\n    .option('limit', {type: 'number'})\n    .option('offset', {type: 'number'})\n    .option('skip-history', {type: 'boolean'})\n    .option('detach', {type: 'boolean'}).argv\n}\n\nconst progress = (url: string) => {\n  return new Observable<CopyProgressStreamEvent>((observer) => {\n    let progressSource = new EventSource(url)\n    let stopped = false\n\n    function onError(error: unknown) {\n      if (progressSource) {\n        progressSource.close()\n      }\n\n      debug(`Error received: ${error}`)\n      if (stopped) {\n        return\n      }\n      observer.next({type: 'reconnect'})\n      progressSource = new EventSource(url)\n    }\n\n    function onChannelError(error: MessageEvent) {\n      stopped = true\n      progressSource.close()\n      observer.error(error)\n    }\n\n    function onMessage(event: MessageEvent) {\n      const data = JSON.parse(event.data)\n      if (data.state === 'failed') {\n        debug('Job failed. Data: %o', event)\n        observer.error(event)\n      } else if (data.state === 'completed') {\n        debug('Job succeeded. Data: %o', event)\n        onComplete()\n      } else {\n        debug(`Job progressed. Data: %o`, event)\n        observer.next(data)\n      }\n    }\n\n    function onComplete() {\n      progressSource.removeEventListener('error', onError)\n      progressSource.removeEventListener('channel_error', onChannelError)\n      progressSource.removeEventListener('job', onMessage)\n      progressSource.removeEventListener('done', onComplete)\n      progressSource.close()\n      observer.complete()\n    }\n\n    progressSource.addEventListener('error', onError)\n    progressSource.addEventListener('channel_error', onChannelError)\n    progressSource.addEventListener('job', onMessage)\n    progressSource.addEventListener('done', onComplete)\n  })\n}\n\nconst followProgress = (\n  jobId: string,\n  client: SanityClient,\n  output: CliOutputter\n): Promise<void> => {\n  let currentProgress = 0\n\n  const spinner = output.spinner({}).start()\n  const listenUrl = getClientUrl(client, `jobs/${jobId}/listen`)\n\n  debug(`Listening to ${listenUrl}`)\n\n  return new Promise((resolve, reject) => {\n    progress(listenUrl).subscribe({\n      next: (event) => {\n        if (typeof event.progress === 'number') {\n          currentProgress = event.progress\n        }\n\n        spinner.text = `Copy in progress: ${currentProgress}%`\n      },\n      error: (err) => {\n        spinner.fail()\n        reject(new Error(`${err.data}`))\n      },\n      complete: () => {\n        spinner.succeed('Copy finished.')\n        resolve()\n      },\n    })\n  })\n}\n\nconst copyDatasetCommand: CliCommandDefinition<CopyDatasetFlags> = {\n  name: 'copy',\n  group: 'dataset',\n  signature: '[SOURCE_DATASET] [TARGET_DATASET]',\n  helpText,\n  description:\n    'Manages dataset copying, including starting a new copy job, listing copy jobs and following the progress of a running copy job',\n  action: async (args, context) => {\n    const {apiClient, output, prompt, chalk} = context\n    // Reparsing CLI flags for better control of binary flags\n    const flags: CopyDatasetFlags = await parseCliFlags(args)\n    const client = apiClient()\n\n    if (flags.list) {\n      await listDatasetCopyJobs(flags, context)\n      return\n    }\n\n    if (flags.attach) {\n      const jobId = flags.attach\n\n      if (!jobId) {\n        throw new Error('Please supply a jobId')\n      }\n\n      await followProgress(jobId, client, output)\n      return\n    }\n\n    const [sourceDataset, targetDataset] = args.argsWithoutOptions\n    const shouldSkipHistory = Boolean(flags['skip-history'])\n\n    const nameError = sourceDataset && validateDatasetName(sourceDataset)\n    if (nameError) {\n      throw new Error(nameError)\n    }\n\n    const existingDatasets = await client.datasets\n      .list()\n      .then((datasets) => datasets.map((ds) => ds.name))\n\n    const sourceDatasetName = await (sourceDataset ||\n      promptForDatasetName(prompt, {message: 'Source dataset name:'}))\n    if (!existingDatasets.includes(sourceDatasetName)) {\n      throw new Error(`Source dataset \"${sourceDatasetName}\" doesn't exist`)\n    }\n\n    const targetDatasetName = await (targetDataset ||\n      promptForDatasetName(prompt, {message: 'Target dataset name:'}))\n    if (existingDatasets.includes(targetDatasetName)) {\n      throw new Error(`Target dataset \"${targetDatasetName}\" already exists`)\n    }\n\n    const err = validateDatasetName(targetDatasetName)\n    if (err) {\n      throw new Error(err)\n    }\n\n    try {\n      const response = await client.request<CopyDatasetResponse>({\n        method: 'PUT',\n        uri: `/datasets/${sourceDatasetName}/copy`,\n        body: {\n          targetDataset: targetDatasetName,\n          skipHistory: shouldSkipHistory,\n        },\n      })\n\n      output.print(\n        `Copying dataset ${chalk.green(sourceDatasetName)} to ${chalk.green(targetDatasetName)}...`\n      )\n\n      if (!shouldSkipHistory) {\n        output.print(\n          `Note: You can run this command with flag '--skip-history'. The flag will reduce copy time in larger datasets.`\n        )\n      }\n\n      output.print(`Job ${chalk.green(response.jobId)} started`)\n\n      if (flags.detach) {\n        return\n      }\n\n      await followProgress(response.jobId, client, output)\n      output.print(`Job ${chalk.green(response.jobId)} completed`)\n    } catch (error) {\n      if (error.statusCode) {\n        output.print(`${chalk.red(`Dataset copying failed:\\n${error.response.body.message}`)}\\n`)\n      } else {\n        output.print(`${chalk.red(`Dataset copying failed:\\n${error.message}`)}\\n`)\n      }\n    }\n  },\n}\n\nexport default copyDatasetCommand\n","import type {CliPrompter} from '@sanity/cli'\nimport {validateDatasetAliasName} from './validateDatasetAliasName'\n\nexport function promptForDatasetAliasName(\n  prompt: CliPrompter,\n  options: {message?: string; default?: string} = {}\n): Promise<string> {\n  return prompt.single({\n    type: 'input',\n    message: 'Alias name:',\n    validate: (name) => {\n      const err = validateDatasetAliasName(name)\n      if (err) {\n        return err\n      }\n\n      return true\n    },\n    ...options,\n  })\n}\n","import type {CliCommandAction} from '@sanity/cli'\nimport {promptForDatasetName} from '../../../actions/dataset/datasetNamePrompt'\nimport {promptForDatasetAliasName} from '../../../actions/dataset/alias/promptForDatasetAliasName'\nimport {validateDatasetAliasName} from '../../../actions/dataset/alias/validateDatasetAliasName'\nimport {validateDatasetName} from '../../../actions/dataset/validateDatasetName'\nimport * as aliasClient from './datasetAliasesClient'\nimport {ALIAS_PREFIX} from './datasetAliasesClient'\n\nexport const createAliasHandler: CliCommandAction = async (args, context) => {\n  const {apiClient, output, prompt} = context\n  const [, alias, targetDataset] = args.argsWithoutOptions\n  const client = apiClient()\n\n  const nameError = alias && validateDatasetAliasName(alias)\n  if (nameError) {\n    throw new Error(nameError)\n  }\n\n  const [datasets, aliases, projectFeatures] = await Promise.all([\n    client.datasets.list().then((sets) => sets.map((ds) => ds.name)),\n    aliasClient.listAliases(client).then((sets) => sets.map((ds) => ds.name)),\n    client.request({uri: '/features'}),\n  ])\n\n  let aliasName = await (alias || promptForDatasetAliasName(prompt))\n  let aliasOutputName = aliasName\n\n  if (aliasName.startsWith(ALIAS_PREFIX)) {\n    aliasName = aliasName.substring(1)\n  } else {\n    aliasOutputName = `${ALIAS_PREFIX}${aliasName}`\n  }\n\n  if (aliases.includes(aliasName)) {\n    throw new Error(`Dataset alias \"${aliasOutputName}\" already exists`)\n  }\n\n  if (targetDataset) {\n    const datasetErr = validateDatasetName(targetDataset)\n    if (datasetErr) {\n      throw new Error(datasetErr)\n    }\n  }\n\n  const datasetName = await (targetDataset || promptForDatasetName(prompt))\n  if (datasetName && !datasets.includes(datasetName)) {\n    throw new Error(`Dataset \"${datasetName}\" does not exist `)\n  }\n\n  const canCreateAlias = projectFeatures.includes('advancedDatasetManagement')\n  if (!canCreateAlias) {\n    throw new Error(`This project cannot create a dataset alias`)\n  }\n\n  try {\n    await aliasClient.createAlias(client, aliasName, datasetName)\n    output.print(\n      `Dataset alias ${aliasOutputName} created ${\n        datasetName && `and linked to ${datasetName}`\n      } successfully`\n    )\n  } catch (err) {\n    throw new Error(`Dataset alias creation failed:\\n${err.message}`)\n  }\n}\n","import type {CliCommandAction} from '@sanity/cli'\nimport {hideBin} from 'yargs/helpers'\nimport yargs from 'yargs/yargs'\nimport {validateDatasetAliasName} from '../../../actions/dataset/alias/validateDatasetAliasName'\nimport * as aliasClient from './datasetAliasesClient'\nimport {ALIAS_PREFIX} from './datasetAliasesClient'\n\nfunction parseCliFlags(args: {argv?: string[]}) {\n  return yargs(hideBin(args.argv || process.argv).slice(2)).option('force', {type: 'boolean'}).argv\n}\n\ninterface DeleteAliasFlags {\n  force?: boolean\n}\n\nexport const deleteAliasHandler: CliCommandAction<DeleteAliasFlags> = async (args, context) => {\n  const {apiClient, prompt, output} = context\n  const [, ds] = args.argsWithoutOptions\n  const {force} = await parseCliFlags(args)\n  const client = apiClient()\n  if (!ds) {\n    throw new Error('Dataset alias name must be provided')\n  }\n\n  let aliasName = `${ds}`\n  const dsError = validateDatasetAliasName(aliasName)\n  if (dsError) {\n    throw dsError\n  }\n  aliasName = aliasName.startsWith(ALIAS_PREFIX) ? aliasName.substring(1) : aliasName\n\n  const [fetchedAliases] = await Promise.all([aliasClient.listAliases(client)])\n  const linkedAlias = fetchedAliases.find((elem) => elem.name === aliasName)\n  const message =\n    linkedAlias && linkedAlias.datasetName\n      ? `This dataset alias is linked to ${linkedAlias.datasetName}. `\n      : ''\n\n  if (force) {\n    output.warn(`'--force' used: skipping confirmation, deleting alias \"${aliasName}\"`)\n  } else {\n    await prompt.single({\n      type: 'input',\n      message: `${message}Are you ABSOLUTELY sure you want to delete this dataset alias?\\n  Type the name of the dataset alias to confirm delete: `,\n      filter: (input) => `${input}`.trim(),\n      validate: (input) => {\n        return input === aliasName || 'Incorrect dataset alias name. Ctrl + C to cancel delete.'\n      },\n    })\n  }\n\n  return aliasClient.removeAlias(client, aliasName).then(() => {\n    output.print('Dataset alias deleted successfully')\n  })\n}\n","import type {CliCommandAction} from '@sanity/cli'\nimport {hideBin} from 'yargs/helpers'\nimport yargs from 'yargs/yargs'\nimport {promptForDatasetAliasName} from '../../../actions/dataset/alias/promptForDatasetAliasName'\nimport {validateDatasetAliasName} from '../../../actions/dataset/alias/validateDatasetAliasName'\nimport * as aliasClient from './datasetAliasesClient'\nimport {ALIAS_PREFIX} from './datasetAliasesClient'\n\ninterface UnlinkFlags {\n  force?: boolean\n}\n\nfunction parseCliFlags(args: {argv?: string[]}) {\n  return yargs(hideBin(args.argv || process.argv).slice(2)).option('force', {type: 'boolean'}).argv\n}\n\nexport const unlinkAliasHandler: CliCommandAction<UnlinkFlags> = async (args, context) => {\n  const {apiClient, output, prompt} = context\n  const [, alias] = args.argsWithoutOptions\n  const {force} = await parseCliFlags(args)\n  const client = apiClient()\n\n  const nameError = alias && validateDatasetAliasName(alias)\n  if (nameError) {\n    throw new Error(nameError)\n  }\n\n  const fetchedAliases = await aliasClient.listAliases(client)\n\n  let aliasName = await (alias || promptForDatasetAliasName(prompt))\n  let aliasOutputName = aliasName\n\n  if (aliasName.startsWith(ALIAS_PREFIX)) {\n    aliasName = aliasName.substring(1)\n  } else {\n    aliasOutputName = `${ALIAS_PREFIX}${aliasName}`\n  }\n\n  // get the current alias from the remote alias list\n  const linkedAlias = fetchedAliases.find((elem) => elem.name === aliasName)\n  if (!linkedAlias) {\n    throw new Error(`Dataset alias \"${aliasOutputName}\" does not exist`)\n  }\n\n  if (!linkedAlias.datasetName) {\n    throw new Error(`Dataset alias \"${aliasOutputName}\" is not linked to a dataset`)\n  }\n\n  if (force) {\n    output.warn(`'--force' used: skipping confirmation, unlinking alias \"${aliasOutputName}\"`)\n  } else {\n    await prompt.single({\n      type: 'input',\n      message: `Are you ABSOLUTELY sure you want to unlink this alias from the \"${linkedAlias.datasetName}\" dataset?\n        \\n  Type YES/NO: `,\n      filter: (input) => `${input}`.toLowerCase(),\n      validate: (input) => {\n        return input === 'yes' || 'Ctrl + C to cancel dataset alias unlink.'\n      },\n    })\n  }\n\n  try {\n    const result = await aliasClient.unlinkAlias(client, aliasName)\n    output.print(\n      `Dataset alias ${aliasOutputName} unlinked from ${result.datasetName} successfully`\n    )\n  } catch (err) {\n    throw new Error(`Dataset alias unlink failed:\\n${err.message}`)\n  }\n}\n","import type {CliCommandAction} from '@sanity/cli'\nimport {promptForDatasetName} from '../../../actions/dataset/datasetNamePrompt'\nimport {promptForDatasetAliasName} from '../../../actions/dataset/alias/promptForDatasetAliasName'\nimport {validateDatasetAliasName} from '../../../actions/dataset/alias/validateDatasetAliasName'\nimport {validateDatasetName} from '../../../actions/dataset/validateDatasetName'\nimport * as aliasClient from './datasetAliasesClient'\nimport {ALIAS_PREFIX} from './datasetAliasesClient'\n\nexport const linkAliasHandler: CliCommandAction = async (args, context) => {\n  const {apiClient, output, prompt} = context\n  const [, alias, targetDataset] = args.argsWithoutOptions\n  const flags = args.extOptions\n  const client = apiClient()\n\n  const nameError = alias && validateDatasetAliasName(alias)\n  if (nameError) {\n    throw new Error(nameError)\n  }\n\n  const [datasets, fetchedAliases] = await Promise.all([\n    client.datasets.list().then((sets) => sets.map((ds) => ds.name)),\n    aliasClient.listAliases(client),\n  ])\n  const aliases = fetchedAliases.map((da) => da.name)\n\n  let aliasName = await (alias || promptForDatasetAliasName(prompt))\n  let aliasOutputName = aliasName\n\n  if (aliasName.startsWith(ALIAS_PREFIX)) {\n    aliasName = aliasName.substring(1)\n  } else {\n    aliasOutputName = `${ALIAS_PREFIX}${aliasName}`\n  }\n\n  if (!aliases.includes(aliasName)) {\n    throw new Error(`Dataset alias \"${aliasOutputName}\" does not exist `)\n  }\n\n  const datasetName = await (targetDataset || promptForDatasetName(prompt))\n  const datasetErr = validateDatasetName(datasetName)\n  if (datasetErr) {\n    throw new Error(datasetErr)\n  }\n\n  if (!datasets.includes(datasetName)) {\n    throw new Error(`Dataset \"${datasetName}\" does not exist `)\n  }\n\n  const linkedAlias = fetchedAliases.find((elem) => elem.name === aliasName)\n\n  if (linkedAlias && linkedAlias.datasetName) {\n    if (linkedAlias.datasetName === datasetName) {\n      throw new Error(`Dataset alias ${aliasOutputName} already linked to ${datasetName}`)\n    }\n\n    if (!flags.force) {\n      await prompt.single({\n        type: 'input',\n        message: `This alias is linked to dataset <${linkedAlias.datasetName}>. Are you ABSOLUTELY sure you want to link this dataset alias to this dataset?\n        \\n  Type YES/NO: `,\n        filter: (input) => `${input}`.toLowerCase(),\n        validate: (input) => {\n          return input === 'yes' || 'Ctrl + C to cancel dataset alias link.'\n        },\n      })\n    }\n  }\n\n  try {\n    await aliasClient.updateAlias(client, aliasName, datasetName)\n    output.print(`Dataset alias ${aliasOutputName} linked to ${datasetName} successfully`)\n  } catch (err) {\n    throw new Error(`Dataset alias link failed:\\n${err.message}`)\n  }\n}\n","import type {CliCommandDefinition} from '@sanity/cli'\nimport oneline from 'oneline'\nimport {createAliasHandler} from './createAliasHandler'\nimport {deleteAliasHandler} from './deleteAliasHandler'\nimport {unlinkAliasHandler} from './unlinkAliasHandler'\nimport {linkAliasHandler} from './linkAliasHandler'\n\nconst helpText = `\nBelow are examples of the alias subcommand\n\nCreate Alias\n  sanity dataset alias create\n  sanity dataset alias create <alias-name>\n  sanity dataset alias create <alias-name> <target-dataset>\n\nDelete Alias\n  Options\n    --force Skips security prompt and forces link command\n\n  Usage\n    sanity dataset alias delete <alias-name>\n    sanity dataset alias delete <alias-name> --force\n\nLink Alias\n  Options\n    --force Skips security prompt and forces link command\n\n  Usage\n    sanity dataset alias link\n    sanity dataset alias link <alias-name>\n    sanity dataset alias link <alias-name> <target-dataset>\n    sanity dataset alias link <alias-name> <target-dataset> --force\n\nUn-link Alias\n  Options\n    --force Skips security prompt and forces link command\n\n  Usage\n    sanity dataset alias unlink\n    sanity dataset alias unlink <alias-name>\n    sanity dataset alias unlink <alias-name> --force\n`\n\nconst aliasCommand: CliCommandDefinition = {\n  name: 'alias',\n  group: 'dataset',\n  signature: 'SUBCOMMAND [ALIAS_NAME, TARGET_DATASET]',\n  helpText,\n  description: 'You can manage your dataset alias using this command.',\n  action: async (args, context) => {\n    const [verb] = args.argsWithoutOptions\n    switch (verb) {\n      case 'create':\n        await createAliasHandler(args, context)\n        break\n      case 'delete':\n        await deleteAliasHandler(args, context)\n        break\n      case 'unlink':\n        await unlinkAliasHandler(args, context)\n        break\n      case 'link':\n        await linkAliasHandler(args, context)\n        break\n      default:\n        throw new Error(oneline`\n          Invalid command provided. Available commands are: create, delete, link and unlink.\n          For more guide run the help command 'sanity dataset alias --help'\n        `)\n    }\n  },\n}\n\nexport default aliasCommand\n","import type {CliCommandGroupDefinition} from '@sanity/cli'\n\nconst documentsGroup: CliCommandGroupDefinition = {\n  name: 'documents',\n  signature: '[COMMAND]',\n  isGroupRoot: true,\n  description: 'Interact with documents in your project',\n}\n\nexport default documentsGroup\n","import type {CliCommandContext} from '@sanity/cli'\nimport tokenize, {LexerToken} from 'json-lexer'\n\ninterface KeyToken {\n  type: 'key'\n  value: string\n  raw: string\n}\n\ntype ExtendedLexerToken = LexerToken | KeyToken\n\nconst identity = (inp: string): string => inp\n\nexport function colorizeJson(input: unknown, chalk: CliCommandContext['chalk']): string {\n  const formatters: Record<ExtendedLexerToken['type'], (str: string) => string> = {\n    punctuator: chalk.white,\n    key: chalk.white,\n    string: chalk.green,\n    number: chalk.yellow,\n    literal: chalk.bold,\n    whitespace: identity,\n  }\n\n  const json = JSON.stringify(input, null, 2)\n\n  return tokenize(json)\n    .map((token, i, arr): ExtendedLexerToken => {\n      // Note how the following only works because we pretty-print the JSON\n      const prevToken = i === 0 ? token : arr[i - 1]\n      if (\n        token.type === 'string' &&\n        prevToken.type === 'whitespace' &&\n        /^\\n\\s+$/.test(prevToken.value)\n      ) {\n        return {...token, type: 'key'}\n      }\n\n      return token\n    })\n    .map((token) => {\n      const formatter = formatters[token.type] || identity\n      return formatter(token.raw)\n    })\n    .join('')\n}\n","import type {CliCommandDefinition} from '@sanity/cli'\nimport {colorizeJson} from '../../util/colorizeJson'\n\nconst helpText = `\nGet and print a document from the projects configured dataset\n\nOptions\n  --pretty colorized JSON output\n  --dataset NAME to override dataset\n\nExamples\n  # Get the document with the ID \"myDocId\"\n  sanity documents get myDocId\n\n  # ID wrapped in double or single quote works equally well\n  sanity documents get 'myDocId'\n`\n\ninterface GetDocumentFlags {\n  pretty?: boolean\n  dataset?: string\n}\n\nconst getDocumentsCommand: CliCommandDefinition<GetDocumentFlags> = {\n  name: 'get',\n  group: 'documents',\n  signature: '[DOCUMENT_ID]',\n  helpText,\n  description: 'Get and print a document by ID',\n  action: async (args, context) => {\n    const {apiClient, output, chalk} = context\n    const {pretty, dataset} = args.extOptions\n    const [docId] = args.argsWithoutOptions.map((str) => `${str}`)\n\n    if (!docId) {\n      throw new Error('Document ID must be specified')\n    }\n\n    const client = dataset ? apiClient().clone().config({dataset}) : apiClient()\n\n    try {\n      const doc = await client.getDocument(docId)\n      if (!doc) {\n        throw new Error('Document not found')\n      }\n\n      output.print(pretty ? colorizeJson(doc, chalk) : JSON.stringify(doc, null, 2))\n    } catch (err) {\n      throw new Error(`Failed to fetch document:\\n${err.message}`)\n    }\n  },\n}\n\nexport default getDocumentsCommand\n","import yargs from 'yargs/yargs'\nimport {hideBin} from 'yargs/helpers'\nimport type {CliCommandArguments, CliCommandContext} from '@sanity/cli'\nimport {colorizeJson} from '../../util/colorizeJson'\n\nconst defaultApiVersion = 'v2022-06-01'\n\nconst helpText = `\nRun a query against the projects configured dataset\n\nOptions\n  --pretty colorized JSON output\n  --dataset NAME to override dataset\n  --project PROJECT to override project ID\n  --anonymous Send the query without any authorization token\n  --api-version API version to use (defaults to \\`${defaultApiVersion}\\`)\n\nEnvironment variables\n  \\`SANITY_CLI_QUERY_API_VERSION\\` - will use the defined API version,\n  unless \\`--api-version\\` is specified.\n\nExamples\n  # Fetch 5 documents of type \"movie\"\n  sanity documents query '*[_type == \"movie\"][0..4]'\n\n  # Fetch title of the oldest movie in the dataset named \"staging\"\n  sanity documents query '*[_type == \"movie\"]|order(releaseDate asc)[0]{title}' --dataset staging\n\n  # Use API version v2021-06-07 and do a query\n  sanity documents query --api-version v2021-06-07 '*[_id == \"header\"] { \"headerText\": pt::text(body) }'\n`\n\ninterface CliQueryCommandFlags {\n  pretty?: boolean\n  anonymous?: boolean\n  dataset?: string\n  project?: string\n  apiVersion?: string\n}\n\nexport default {\n  name: 'query',\n  group: 'documents',\n  signature: '[QUERY]',\n  helpText,\n  description: 'Query for documents',\n  action: async (\n    args: CliCommandArguments<CliQueryCommandFlags>,\n    context: CliCommandContext\n  ): Promise<void> => {\n    // Reparsing arguments for improved control of flags\n    const {\n      pretty,\n      dataset,\n      project,\n      anonymous,\n      'api-version': apiVersion,\n    } = await parseCliFlags(args)\n    const {apiClient, output, chalk, cliConfig} = context\n    const [query] = args.argsWithoutOptions\n\n    if (!query) {\n      throw new Error('Query must be specified')\n    }\n\n    if (!apiVersion) {\n      output.warn(chalk.yellow(`--api-version not specified, using \\`${defaultApiVersion}\\``))\n    }\n\n    const requireDataset = !dataset\n    const requireProject = !project\n    const requireUser = !anonymous\n\n    if (requireProject && !cliConfig?.api?.projectId) {\n      throw new Error(\n        'No project configured in CLI config - either configure one, or use `--project` flag'\n      )\n    }\n\n    if (requireDataset && !cliConfig?.api?.dataset) {\n      throw new Error(\n        'No dataset configured in CLI config - either configure one, or use `--dataset` flag'\n      )\n    }\n\n    const baseClient = apiClient({requireProject, requireUser}).clone()\n    const {dataset: originalDataset, projectId: originalProjectId} = baseClient.config()\n\n    const client = baseClient.config({\n      projectId: project || originalProjectId,\n      dataset: dataset || originalDataset,\n      apiVersion: apiVersion || defaultApiVersion,\n    })\n\n    try {\n      const docs = await client.fetch(query)\n      if (!docs) {\n        throw new Error('Query returned no results')\n      }\n\n      output.print(pretty ? colorizeJson(docs, chalk) : JSON.stringify(docs, null, 2))\n    } catch (err) {\n      throw new Error(`Failed to run query:\\n${err.message}`)\n    }\n  },\n}\n\nfunction parseCliFlags(args: CliCommandArguments<CliQueryCommandFlags>) {\n  // eslint-disable-next-line no-process-env\n  const fallbackApiVersion = process.env.SANITY_CLI_QUERY_API_VERSION\n  return yargs(hideBin(args.argv || process.argv).slice(2))\n    .option('pretty', {type: 'boolean', default: false})\n    .option('dataset', {type: 'string'})\n    .option('project', {type: 'string'})\n    .option('anonymous', {type: 'boolean', default: false})\n    .option('api-version', {type: 'string', default: fallbackApiVersion}).argv\n}\n","import type {CliCommandDefinition} from '@sanity/cli'\nimport pluralize from 'pluralize-esm'\n\nconst helpText = `\nDelete a document from the projects configured dataset\n\nOptions\n  --dataset NAME to override dataset\n\nExample\n  # Delete the document with the ID \"myDocId\"\n  sanity documents delete myDocId\n\n  # ID wrapped in double or single quote works equally well\n  sanity documents delete 'myDocId'\n\n  # Delete document with ID \"someDocId\" from dataset \"blog\"\n  sanity documents delete --dataset=blog someDocId\n\n  # Delete the document with ID \"doc1\" and \"doc2\"\n  sanity documents delete doc1 doc2\n`\n\ninterface DeleteFlags {\n  dataset?: string\n}\n\nconst deleteDocumentsCommand: CliCommandDefinition<DeleteFlags> = {\n  name: 'delete',\n  group: 'documents',\n  signature: '[ID] [...IDS]',\n  helpText,\n  description: 'Delete a document by ID',\n  action: async (args, context) => {\n    const {apiClient, output, chalk} = context\n    const {dataset} = args.extOptions\n    const ids = args.argsWithoutOptions.map((str) => `${str}`)\n\n    if (!ids.length) {\n      throw new Error('Document ID must be specified')\n    }\n\n    const client = dataset ? apiClient().clone().config({dataset}) : apiClient()\n\n    const transaction = ids.reduce((trx, id) => trx.delete(id), client.transaction())\n    try {\n      const {results} = await transaction.commit()\n      const deleted = results.filter((res) => res.operation === 'delete').map((res) => res.id)\n      const notFound = ids.filter((id) => !deleted.includes(id))\n      if (deleted.length > 0) {\n        output.print(`Deleted ${deleted.length} ${pluralize('document', deleted.length)}`)\n      }\n\n      if (notFound.length > 0) {\n        output.error(\n          chalk.red(`${pluralize('Document', notFound.length)} not found: ${notFound.join(', ')}`)\n        )\n      }\n    } catch (err) {\n      throw new Error(`Failed to delete ${pluralize('document', ids.length)}:\\n${err.message}`)\n    }\n  },\n}\n\nexport default deleteDocumentsCommand\n","import path from 'path'\nimport fs from 'fs/promises'\nimport os from 'os'\nimport type {CliCommandDefinition} from '@sanity/cli'\nimport type {\n  SanityClient,\n  MultipleMutationResult,\n  Mutation,\n  IdentifiedSanityDocumentStub,\n} from '@sanity/client'\nimport json5 from 'json5'\nimport execa from 'execa'\nimport chokidar from 'chokidar'\nimport {isPlainObject, isEqual, noop} from 'lodash'\nimport {uuid} from '@sanity/uuid'\n\ntype MutationOperationName = 'create' | 'createOrReplace' | 'createIfNotExists'\n\ninterface CreateFlags {\n  dataset?: string\n  replace?: boolean\n  missing?: boolean\n  watch?: boolean\n  json5?: boolean\n  id?: string\n}\n\nconst helpText = `\nOptions\n  --replace On duplicate document IDs, replace existing document with specified document(s)\n  --missing On duplicate document IDs, don't modify the target document(s)\n  --watch   Write the documents whenever the target file or buffer changes\n  --json5   Use JSON5 file type to allow a \"simplified\" version of JSON\n  --id <id> Specify a document ID to use. Will fetch remote document ID and populate editor.\n  --dataset NAME to override dataset\n\nExamples\n  # Create the document specified in \"myDocument.json\".\n  sanity documents create myDocument.json\n\n  # Open configured $EDITOR and create the specified document(s)\n  sanity documents create\n\n  # Fetch document with the ID \"myDocId\" and open configured $EDITOR with the\n  # current document content (if any). Replace document with the edited version\n  # when the editor closes\n  sanity documents create --id myDocId --replace\n\n  # Open configured $EDITOR and replace the document with the given content\n  # on each save. Use JSON5 file extension and parser for simplified syntax.\n  sanity documents create --id myDocId --watch --replace --json5\n`\n\nconst createDocumentsCommand: CliCommandDefinition<CreateFlags> = {\n  name: 'create',\n  group: 'documents',\n  signature: '[FILE]',\n  helpText,\n  description: 'Create one or more documents',\n  // eslint-disable-next-line complexity\n  action: async (args, context) => {\n    const {apiClient, output} = context\n    const {replace, missing, watch, id, dataset} = args.extOptions\n    const [file] = args.argsWithoutOptions\n    const useJson5 = args.extOptions.json5\n    const client = dataset ? apiClient().clone().config({dataset}) : apiClient()\n\n    if (replace && missing) {\n      throw new Error('Cannot use both --replace and --missing')\n    }\n\n    if (id && file) {\n      throw new Error('Cannot use --id when specifying a file path')\n    }\n\n    let operation: MutationOperationName = 'create'\n    if (replace || missing) {\n      operation = replace ? 'createOrReplace' : 'createIfNotExists'\n    }\n\n    if (file) {\n      const contentPath = path.resolve(process.cwd(), file)\n      const content = json5.parse(await fs.readFile(contentPath, 'utf8'))\n      const result = await writeDocuments(content, operation, client)\n      output.print(getResultMessage(result, operation))\n      return\n    }\n\n    // Create a temporary file and use that as source, opening an editor on it\n    const docId = id || uuid()\n    const ext = useJson5 ? 'json5' : 'json'\n    const tmpFile = path.join(os.tmpdir(), 'sanity-cli', `${docId}.${ext}`)\n    const stringify = useJson5 ? json5.stringify : JSON.stringify\n    const defaultValue = (id && (await client.getDocument(id))) || {_id: docId, _type: 'specify-me'}\n    await fs.mkdir(path.join(os.tmpdir(), 'sanity-cli'), {recursive: true})\n    await fs.writeFile(tmpFile, stringify(defaultValue, null, 2), 'utf8')\n\n    const editor = getEditor()\n    if (watch) {\n      // If we're in watch mode, we want to run the creation on each change (if it validates)\n      registerUnlinkOnSigInt(tmpFile)\n      output.print(`Watch mode: ${tmpFile}`)\n      output.print('Watch mode: Will write documents on each save.')\n      output.print('Watch mode: Press Ctrl + C to cancel watch mode.')\n      chokidar.watch(tmpFile).on('change', () => {\n        output.print('')\n        return readAndPerformCreatesFromFile(tmpFile)\n      })\n      execa(editor.bin, editor.args.concat(tmpFile), {stdio: 'inherit'})\n    } else {\n      // While in normal mode, we just want to wait for the editor to close and run the thing once\n      execa.sync(editor.bin, editor.args.concat(tmpFile), {stdio: 'inherit'})\n      await readAndPerformCreatesFromFile(tmpFile)\n      await fs.unlink(tmpFile).catch(noop)\n    }\n\n    async function readAndPerformCreatesFromFile(filePath: string) {\n      let content\n      try {\n        content = json5.parse(await fs.readFile(filePath, 'utf8'))\n      } catch (err) {\n        output.error(`Failed to read input: ${err.message}`)\n        return\n      }\n\n      if (isEqual(content, defaultValue)) {\n        output.print('Value not modified, doing nothing.')\n        output.print('Modify document to trigger creation.')\n        return\n      }\n\n      try {\n        const writeResult = await writeDocuments(content, operation, client)\n        output.print(getResultMessage(writeResult, operation))\n      } catch (err) {\n        output.error(`Failed to write documents: ${err.message}`)\n        if (err.message.includes('already exists')) {\n          output.error('Perhaps you want to use `--replace` or `--missing`?')\n        }\n      }\n    }\n  },\n}\n\nfunction registerUnlinkOnSigInt(tmpFile: string) {\n  process.on('SIGINT', async () => {\n    await fs.unlink(tmpFile).catch(noop)\n    // eslint-disable-next-line no-process-exit\n    process.exit(130)\n  })\n}\n\nfunction writeDocuments(\n  documents: {_id?: string; _type: string} | {_id?: string; _type: string}[],\n  operation: MutationOperationName,\n  client: SanityClient\n) {\n  const docs = Array.isArray(documents) ? documents : [documents]\n  if (docs.length === 0) {\n    throw new Error('No documents provided')\n  }\n\n  const mutations = docs.map((doc, index): Mutation => {\n    validateDocument(doc, index, docs)\n    if (operation === 'create') {\n      return {create: doc}\n    }\n\n    if (operation === 'createIfNotExists') {\n      if (isIdentifiedSanityDocument(doc)) {\n        return {createIfNotExists: doc}\n      }\n\n      throw new Error(`Missing required _id attribute for ${operation}`)\n    }\n\n    if (operation === 'createOrReplace') {\n      if (isIdentifiedSanityDocument(doc)) {\n        return {createOrReplace: doc}\n      }\n\n      throw new Error(`Missing required _id attribute for ${operation}`)\n    }\n\n    throw new Error(`Unsupported operation ${operation}`)\n  })\n\n  return client.transaction(mutations).commit()\n}\n\nfunction validateDocument(doc: unknown, index: number, arr: unknown[]) {\n  const isSingle = arr.length === 1\n\n  if (!isPlainObject(doc)) {\n    throw new Error(getErrorMessage('must be an object', index, isSingle))\n  }\n\n  if (!isSanityDocumentish(doc)) {\n    throw new Error(getErrorMessage('must have a `_type` property of type string', index, isSingle))\n  }\n}\n\nfunction isSanityDocumentish(doc: unknown): doc is {_type: string} {\n  return (\n    doc !== null &&\n    typeof doc === 'object' &&\n    '_type' in doc &&\n    typeof (doc as any)._type === 'string'\n  )\n}\n\nfunction isIdentifiedSanityDocument(doc: unknown): doc is IdentifiedSanityDocumentStub {\n  return isSanityDocumentish(doc) && '_id' in doc\n}\n\nfunction getErrorMessage(message: string, index: number, isSingle: boolean): string {\n  return isSingle ? `Document ${message}` : `Document at index ${index} ${message}`\n}\n\nfunction getResultMessage(\n  result: MultipleMutationResult,\n  operation: MutationOperationName\n): string {\n  const joiner = '\\n  - '\n  if (operation === 'createOrReplace') {\n    return `Upserted:\\n  - ${result.results.map((res) => res.id).join(joiner)}`\n  }\n\n  if (operation === 'create') {\n    return `Created:\\n  - ${result.results.map((res) => res.id).join(joiner)}`\n  }\n\n  // \"Missing\" (createIfNotExists)\n  const created: string[] = []\n  const skipped: string[] = []\n  for (const res of result.results) {\n    if (res.operation === 'update') {\n      skipped.push(res.id)\n    } else {\n      created.push(res.id)\n    }\n  }\n\n  if (created.length > 0 && skipped.length > 0) {\n    return [\n      `Created:\\n  - ${created.join(joiner)}`,\n      `Skipped (already exists):${joiner}${skipped.join(joiner)}`,\n    ].join('\\n\\n')\n  } else if (created.length > 0) {\n    return `Created:\\n  - ${created.join(joiner)}`\n  }\n\n  return `Skipped (already exists):\\n  - ${skipped.join(joiner)}`\n}\n\nfunction getEditor() {\n  const defaultEditor = /^win/.test(process.platform) ? 'notepad' : 'vim'\n  // eslint-disable-next-line no-process-env\n  const editor = process.env.VISUAL || process.env.EDITOR || defaultEditor\n  const args = editor.split(/\\s+/)\n  const bin = args.shift() || ''\n  return {bin, args}\n}\n\nexport default createDocumentsCommand\n","import type {CliCommandArguments, CliCommandContext, CliCommandDefinition} from '@sanity/cli'\nimport type {StartDevServerCommandFlags} from '../../actions/dev/devAction'\n\nconst helpText = `\nNotes\n  Changing the hostname or port number might require a new entry to the CORS-origins allow list.\n\nOptions\n  --port <port> TCP port to start server on. [default: 3333]\n  --host <host> The local network interface at which to listen. [default: \"127.0.0.1\"]\n\nExamples\n  sanity dev --host=0.0.0.0\n  sanity dev --port=1942\n`\n\nconst devCommand: CliCommandDefinition = {\n  name: 'dev',\n  signature: '[--port <port>] [--host <host>]',\n  description: 'Starts a development server for the Sanity Studio',\n  action: async (\n    args: CliCommandArguments<StartDevServerCommandFlags>,\n    context: CliCommandContext\n  ) => {\n    const devAction = await getDevAction()\n\n    return devAction(args, context)\n  },\n  helpText,\n}\n\nexport async function getDevAction(): Promise<\n  (\n    args: CliCommandArguments<StartDevServerCommandFlags>,\n    context: CliCommandContext\n  ) => Promise<void>\n> {\n  // NOTE: in dev-mode we want to include from `src` so we need to use `.ts` extension\n  // NOTE: this `if` statement is not included in the output bundle\n  if (__DEV__) {\n    // eslint-disable-next-line import/extensions\n    const mod: typeof import('../../actions/dev/devAction') = require('../../actions/dev/devAction.ts')\n\n    return mod.default\n  }\n\n  const mod = await import('../../actions/dev/devAction')\n\n  return mod.default\n}\n\nexport default devCommand\n","/* eslint-disable no-process-env */\nexport const isInteractive =\n  process.stdout.isTTY && process.env.TERM !== 'dumb' && !('CI' in process.env)\n","import type {CliCommandArguments, CliCommandContext, CliCommandDefinition} from '@sanity/cli'\nimport type {StartPreviewServerCommandFlags} from '../../actions/preview/previewAction'\nimport {isInteractive} from '../../util/isInteractive'\nimport {getDevAction} from '../dev/devCommand'\n\nconst helpText = `\nNotes\n  Changing the hostname or port number might require a new CORS-entry to be added.\n\nOptions\n  --port <port> TCP port to start server on. [default: 3333]\n  --host <host> The local network interface at which to listen. [default: \"127.0.0.1\"]\n\nExamples\n  sanity start --host=0.0.0.0\n  sanity start --port=1942\n  sanity start some/build-output-dir\n`\n\nconst startCommand: CliCommandDefinition = {\n  name: 'start',\n  signature: '[BUILD_OUTPUT_DIR] [--port <port>] [--host <host>]',\n  description: 'Alias of `sanity preview`',\n  action: async (\n    args: CliCommandArguments<StartPreviewServerCommandFlags>,\n    context: CliCommandContext\n  ) => {\n    const {output, chalk, prompt} = context\n    const previewAction = await getPreviewAction()\n\n    const warn = (msg: string) => output.warn(chalk.yellow.bgBlack(msg))\n    const error = (msg: string) => output.warn(chalk.red.bgBlack(msg))\n    warn('╭───────────────────────────────────────────────────────────╮')\n    warn('│                                                           │')\n    warn(\"│  You're running Sanity Studio v3. In this version the     │\")\n    warn('│  [start] command is used to preview static builds.        |')\n    warn('│                                                           │')\n    warn('│  To run a development server, use the [npm run dev] or    |')\n    warn('│  [npx sanity dev] command instead. For more information,  │')\n    warn('│  see https://www.sanity.io/help/studio-v2-vs-v3           │')\n    warn('│                                                           │')\n    warn('╰───────────────────────────────────────────────────────────╯')\n    warn('') // Newline to separate from other output\n\n    try {\n      await previewAction(args, context)\n    } catch (err) {\n      if (err.name !== 'BUILD_NOT_FOUND') {\n        throw err\n      }\n\n      error(err.message)\n      error('\\n')\n\n      const shouldRunDevServer =\n        isInteractive &&\n        (await prompt.single({\n          message: 'Do you want to start a development server instead?',\n          type: 'confirm',\n        }))\n\n      if (shouldRunDevServer) {\n        const devAction = await getDevAction()\n        await devAction(args, context)\n      } else {\n        // Indicate that this isn't an expected exit\n        // eslint-disable-next-line no-process-exit\n        process.exit(1)\n      }\n    }\n  },\n  helpText,\n}\n\nasync function getPreviewAction() {\n  // NOTE: in dev-mode we want to include from `src` so we need to use `.ts` extension\n  // NOTE: this `if` statement is not included in the output bundle\n  if (__DEV__) {\n    // eslint-disable-next-line import/extensions\n    const mod: typeof import('../../actions/preview/previewAction') = require('../../actions/preview/previewAction.ts')\n\n    return mod.default\n  }\n\n  const mod = await import('../../actions/preview/previewAction')\n\n  return mod.default\n}\n\nexport default startCommand\n","import type {CliCommandArguments, CliCommandContext, CliCommandDefinition} from '@sanity/cli'\nimport type {StartPreviewServerCommandFlags} from '../../actions/preview/previewAction'\n\nconst helpText = `\nNotes\n  Changing the hostname or port number might require a new entry to the CORS-origins allow list.\n\nOptions\n  --port <port> TCP port to start server on. [default: 3333]\n  --host <host> The local network interface at which to listen. [default: \"127.0.0.1\"]\n\nExamples\n  sanity preview --host=0.0.0.0\n  sanity preview --port=1942\n  sanity preview some/build-output-dir\n`\n\nconst previewCommand: CliCommandDefinition = {\n  name: 'preview',\n  signature: '[BUILD_OUTPUT_DIR] [--port <port>] [--host <host>]',\n  description: 'Starts a local web server for previewing production build',\n  action: async (\n    args: CliCommandArguments<StartPreviewServerCommandFlags>,\n    context: CliCommandContext\n  ) => {\n    const previewAction = await getPreviewAction()\n\n    return previewAction(args, context)\n  },\n  helpText,\n}\n\nasync function getPreviewAction() {\n  // NOTE: in dev-mode we want to include from `src` so we need to use `.ts` extension\n  // NOTE: this `if` statement is not included in the output bundle\n  if (__DEV__) {\n    // eslint-disable-next-line import/extensions\n    const mod: typeof import('../../actions/preview/previewAction') = require('../../actions/preview/previewAction.ts')\n\n    return mod.default\n  }\n\n  const mod = await import('../../actions/preview/previewAction')\n\n  return mod.default\n}\n\nexport default previewCommand\n","import type {CliCommandDefinition} from '@sanity/cli'\n\nconst uninstallCommand: CliCommandDefinition = {\n  name: 'uninstall',\n  signature: '[plugin]',\n  helpText: '',\n  description: 'Removes a Sanity plugin from the current Sanity configuration',\n  hideFromHelp: true,\n  action: async (args, context) => {\n    await context.output.error('`sanity uninstall` is no longer supported - use npm/yarn')\n  },\n}\n\nexport default uninstallCommand\n","import type {CliCommandGroupDefinition} from '@sanity/cli'\n\nconst hookGroup: CliCommandGroupDefinition = {\n  name: 'hook',\n  signature: '[COMMAND]',\n  isGroupRoot: true,\n  description: 'Interact with hooks in your project',\n}\n\nexport default hookGroup\n","import type {CliCommandDefinition} from '@sanity/cli'\nimport open from 'open'\n\nconst createHookCommand: CliCommandDefinition = {\n  name: 'create',\n  group: 'hook',\n  signature: '',\n  helpText: '',\n  description: 'Create a new hook for the given dataset',\n  action: async (args, context) => {\n    const {apiClient, output} = context\n    const client = apiClient()\n\n    const {projectId} = client.config()\n    if (!projectId) {\n      throw new Error('No project ID found')\n    }\n\n    const projectInfo = (await client.projects.getById(projectId)) || {}\n    const organizationId = projectInfo.organizationId || 'personal'\n    const manageUrl = `https://www.sanity.io/organizations/${organizationId}/project/${projectId}/api/webhooks/new`\n\n    output.print(`Opening ${manageUrl}`)\n    open(manageUrl)\n  },\n}\n\nexport default createHookCommand\n","import type {CliCommandContext, CliCommandDefinition} from '@sanity/cli'\nimport type {Hook} from './types'\n\nconst deleteHookCommand: CliCommandDefinition = {\n  name: 'delete',\n  group: 'hook',\n  signature: '[NAME]',\n  helpText: '',\n  description: 'Delete a hook within your project',\n  action: async (args, context) => {\n    const {apiClient} = context\n    const [name] = args.argsWithoutOptions\n    const client = apiClient()\n\n    const hookId = await promptForHook(name, context)\n    try {\n      await client\n        .clone()\n        .config({apiVersion: '2021-10-04'})\n        .request({method: 'DELETE', uri: `/hooks/${hookId}`})\n    } catch (err) {\n      throw new Error(`Hook deletion failed:\\n${err.message}`)\n    }\n  },\n}\n\nasync function promptForHook(specified: string | undefined, context: CliCommandContext) {\n  const specifiedName = specified && specified.toLowerCase()\n  const {prompt, apiClient} = context\n  const client = apiClient()\n\n  const hooks = await client\n    .clone()\n    .config({apiVersion: '2021-10-04'})\n    .request<Hook[]>({uri: '/hooks', json: true})\n\n  if (specifiedName) {\n    const selected = hooks.filter((hook) => hook.name.toLowerCase() === specifiedName)[0]\n    if (!selected) {\n      throw new Error(`Hook with name \"${specified} not found\"`)\n    }\n\n    return selected.id\n  }\n\n  const choices = hooks.map((hook) => ({value: hook.id, name: hook.name}))\n  return prompt.single({\n    message: 'Select hook to delete',\n    type: 'list',\n    choices,\n  })\n}\n\nexport default deleteHookCommand\n","import type {CliCommandDefinition} from '@sanity/cli'\nimport type {Hook} from './types'\n\nconst listHooksCommand: CliCommandDefinition = {\n  name: 'list',\n  group: 'hook',\n  signature: '',\n  helpText: '',\n  description: 'List hooks for a given project',\n  action: async (args, context) => {\n    const {apiClient, output} = context\n    const client = apiClient()\n\n    let hooks\n    try {\n      hooks = await client\n        .clone()\n        .config({apiVersion: '2021-10-04'})\n        .request<Hook[]>({uri: '/hooks'})\n    } catch (err) {\n      throw new Error(`Hook list retrieval failed:\\n${err.message}`)\n    }\n\n    hooks.forEach((hook) => {\n      output.print(`Name: ${hook.name}`)\n      output.print(`Dataset: ${hook.dataset}`)\n      output.print(`URL: ${hook.url}`)\n\n      if (hook.type === 'document') {\n        output.print(`HTTP method: ${hook.httpMethod}`)\n\n        if (hook.description) {\n          output.print(`Description: ${hook.description}`)\n        }\n      }\n\n      output.print('')\n    })\n  },\n}\n\nexport default listHooksCommand\n","import type {CliCommandDefinition} from '@sanity/cli'\nimport type {DeliveryAttempt} from './types'\n\nconst printHookAttemptCommand: CliCommandDefinition = {\n  name: 'attempt',\n  group: 'hook',\n  signature: 'ATTEMPT_ID',\n  helpText: '',\n  description: 'Print details of a given webhook delivery attempt',\n  action: async (args, context) => {\n    const {apiClient, output} = context\n    const [attemptId] = args.argsWithoutOptions\n    const client = apiClient()\n\n    let attempt\n    try {\n      attempt = await client.request<DeliveryAttempt>({uri: `/hooks/attempts/${attemptId}`})\n    } catch (err) {\n      throw new Error(`Hook attempt retrieval failed:\\n${err.message}`)\n    }\n\n    const {createdAt, resultCode, resultBody, failureReason, inProgress} = attempt\n\n    output.print(`Date: ${createdAt}`)\n    output.print(`Status: ${getStatus(attempt)}`)\n    output.print(`Status code: ${resultCode}`)\n\n    if (attempt.isFailure) {\n      output.print(`Failure: ${formatFailure(attempt)}`)\n    }\n\n    if (!inProgress && (!failureReason || failureReason === 'http')) {\n      const body = resultBody ? `\\n---\\n${resultBody}\\n---\\n` : '<empty>'\n      output.print(`Response body: ${body}`)\n    }\n  },\n}\n\nexport default printHookAttemptCommand\n\nexport function formatFailure(\n  attempt: DeliveryAttempt,\n  options: {includeHelp?: boolean} = {}\n): string {\n  const {includeHelp} = options\n  const {id, failureReason, resultCode} = attempt\n  const help = includeHelp ? `(run \\`sanity hook attempt ${id}\\` for details)` : ''\n  switch (failureReason) {\n    case 'http':\n      return `HTTP ${resultCode} ${help}`\n    case 'timeout':\n      return 'Request timed out'\n    case 'network':\n      return 'Network error'\n    case 'other':\n    default:\n  }\n\n  return 'Unknown error'\n}\n\nexport function getStatus(attempt: DeliveryAttempt): string {\n  if (attempt.isFailure) {\n    return 'Failed'\n  }\n\n  if (attempt.inProgress) {\n    return 'In progress'\n  }\n\n  return 'Delivered'\n}\n","import {inspect} from 'util'\nimport type {CliCommandContext, CliCommandDefinition} from '@sanity/cli'\nimport {groupBy} from 'lodash'\nimport {formatFailure} from './printHookAttemptCommand'\nimport type {DeliveryAttempt, Hook, HookMessage} from './types'\n\ninterface ListHookFlags {\n  detailed?: boolean\n}\n\nconst listHookLogsCommand: CliCommandDefinition<ListHookFlags> = {\n  name: 'logs',\n  group: 'hook',\n  signature: '[NAME]',\n  helpText: '',\n  description: 'List latest log entries for a given hook',\n  action: async (args, context) => {\n    const {apiClient} = context\n    const flags = args.extOptions\n    const [name] = args.argsWithoutOptions\n    const client = apiClient()\n\n    const hookId = await promptForHook(name, context)\n    let messages\n    let attempts\n    try {\n      messages = await client.request<HookMessage[]>({uri: `/hooks/${hookId}/messages`})\n      attempts = await client.request<DeliveryAttempt[]>({uri: `/hooks/${hookId}/attempts`})\n    } catch (err) {\n      throw new Error(`Hook logs retrieval failed:\\n${err.message}`)\n    }\n\n    const groupedAttempts = groupBy(attempts, 'messageId')\n    const populated = messages.map((msg): HookMessage & {attempts: DeliveryAttempt[]} => ({\n      ...msg,\n      attempts: groupedAttempts[msg.id],\n    }))\n\n    const totalMessages = messages.length - 1\n    populated.forEach((message, i) => {\n      printMessage(message, context, {detailed: flags.detailed})\n      printSeparator(context, totalMessages === i)\n    })\n  },\n}\n\nexport default listHookLogsCommand\n\nasync function promptForHook(specified: string | undefined, context: CliCommandContext) {\n  const specifiedName = specified && specified.toLowerCase()\n  const {prompt, apiClient} = context\n  const client = apiClient()\n\n  const hooks = await client\n    .clone()\n    .config({apiVersion: '2021-10-04'})\n    .request<Hook[]>({uri: '/hooks', json: true})\n\n  if (specifiedName) {\n    const selected = hooks.filter((hook) => hook.name.toLowerCase() === specifiedName)[0]\n    if (!selected) {\n      throw new Error(`Hook with name \"${specified} not found\"`)\n    }\n\n    return selected.id\n  }\n\n  if (hooks.length === 0) {\n    throw new Error('No hooks currently registered')\n  }\n\n  if (hooks.length === 1) {\n    return hooks[0].id\n  }\n\n  const choices = hooks.map((hook) => ({value: hook.id, name: hook.name}))\n  return prompt.single({\n    message: 'Select hook to list logs for',\n    type: 'list',\n    choices,\n  })\n}\n\nfunction printSeparator(context: CliCommandContext, skip: boolean) {\n  if (!skip) {\n    context.output.print('---\\n')\n  }\n}\n\nfunction printMessage(\n  message: HookMessage & {attempts: DeliveryAttempt[]},\n  context: CliCommandContext,\n  options: {detailed?: boolean}\n) {\n  const {detailed} = options\n  const {output, chalk} = context\n\n  output.print(`Date: ${message.createdAt}`)\n  output.print(`Status: ${message.status}`)\n  output.print(`Result code: ${message.resultCode}`)\n\n  if (message.failureCount > 0) {\n    output.print(`Failures: ${message.failureCount}`)\n  }\n\n  if (detailed) {\n    output.print('Payload:')\n    output.print(inspect(JSON.parse(message.payload), {colors: true}))\n  }\n\n  if (detailed && message.attempts) {\n    output.print('Attempts:')\n    message.attempts.forEach((attempt) => {\n      const date = attempt.createdAt.replace(/\\.\\d+Z$/, 'Z')\n      const prefix = `  [${date}]`\n\n      if (attempt.inProgress) {\n        output.print(`${prefix} ${chalk.yellow('Pending')}`)\n      } else if (attempt.isFailure) {\n        const failure = formatFailure(attempt, {includeHelp: true})\n        output.print(`${prefix} ${chalk.yellow(`Failure: ${failure}`)}`)\n      } else {\n        output.print(`${prefix} Success: HTTP ${attempt.resultCode} (${attempt.duration}ms)`)\n      }\n    })\n  }\n\n  // Leave some empty space between messages\n  output.print('')\n}\n","import type {CliCommandDefinition} from '@sanity/cli'\n\nconst helpText = `\nOptions\n  --with-user-token Prime access token from CLI config into getCliClient()\n  --mock-browser-env Mocks a browser-like environment using jsdom\n\nExamples\n  # Run the script at some/script.js in Sanity context\n  sanity exec some/script.js\n\n  # Run the script at migrations/fullname.ts and configure \\`getCliClient()\\`\n  # from \\`sanity/cli\\`to include the current user's token\n  sanity exec migrations/fullname.ts --with-user-token\n\n  # Run the script at scripts/browserScript.js in a mock browser environment\n  sanity exec scripts/browserScript.js --mock-browser-env\n\n  # Pass arbitrary arguments to scripts by separating them with a \\`--\\`.\n  # Arguments are available in \\`process.argv\\` as they would in regular node scripts\n  # eg the following command would yield a \\`process.argv\\` of:\n  # ['/path/to/node', '/path/to/myscript.js', '--dry-run', 'positional-argument']\n  sanity exec --mock-browser-env myscript.js -- --dry-run positional-argument\n`\n\nexport const execCommand: CliCommandDefinition = {\n  name: 'exec',\n  signature: 'SCRIPT',\n  description: 'Runs a script in Sanity context',\n  helpText,\n  action: async (args, context) => {\n    const mod = await import('../../actions/exec/execScript')\n\n    return mod.default(args, context)\n  },\n}\n\nexport default execCommand\n","import type {CliCommandGroupDefinition} from '@sanity/cli'\n\nconst corsGroup: CliCommandGroupDefinition = {\n  name: 'cors',\n  signature: '[COMMAND]',\n  isGroupRoot: true,\n  description: 'Interact with CORS-entries for your project',\n}\n\nexport default corsGroup\n","import url from 'url'\nimport logSymbols from 'log-symbols'\nimport oneline from 'oneline'\nimport type {CliCommandContext, CliPrompter} from '@sanity/cli'\n\nconst wildcardReplacement = 'a-wild-card-r3pl4c3m3n7-a'\nconst portReplacement = ':7777777'\n\ninterface AddCorsOriginFlags {\n  credentials?: boolean\n}\n\nexport async function addCorsOrigin(\n  givenOrigin: string,\n  flags: AddCorsOriginFlags,\n  context: CliCommandContext\n): Promise<boolean> {\n  const {apiClient, prompt, output} = context\n  const origin = await (givenOrigin\n    ? filterAndValidateOrigin(givenOrigin)\n    : promptForOrigin(prompt))\n\n  const hasWildcard = origin.includes('*')\n  if (hasWildcard && !(await promptForWildcardConfirmation(origin, context))) {\n    return false\n  }\n  const allowCredentials =\n    typeof flags.credentials === 'undefined'\n      ? await promptForCredentials(hasWildcard, context)\n      : Boolean(flags.credentials)\n\n  if (givenOrigin !== origin) {\n    output.print(`Normalized origin to ${origin}`)\n  }\n\n  const client = apiClient({\n    requireUser: true,\n    requireProject: true,\n  })\n\n  await client.request({\n    method: 'POST',\n    url: '/cors',\n    body: {origin, allowCredentials},\n    maxRedirects: 0,\n  })\n\n  return true\n}\n\nfunction promptForCredentials(hasWildcard: boolean, context: CliCommandContext): Promise<string> {\n  const {prompt, output, chalk} = context\n\n  output.print('')\n  if (hasWildcard) {\n    output.print(oneline`\n      ${chalk.yellow(`${logSymbols.warning} Warning:`)}\n      We ${chalk.red(chalk.underline('HIGHLY'))} recommend NOT allowing credentials\n      on origins containing wildcards. If you are logged in to a studio, people will\n      be able to send requests ${chalk.underline('on your behalf')} to read and modify\n      data, from any matching origin. Please tread carefully!\n    `)\n  } else {\n    output.print(oneline`\n      ${chalk.yellow(`${logSymbols.warning} Warning:`)}\n      Should this origin be allowed to send requests using authentication tokens or\n      session cookies? Be aware that any script on this origin will be able to send\n      requests ${chalk.underline('on your behalf')} to read and modify data if you\n      are logged in to a Sanity studio. If this origin hosts a studio, you will need\n      this, otherwise you should probably answer \"No\" (n).\n    `)\n  }\n\n  output.print('')\n\n  return prompt.single({\n    type: 'confirm',\n    message: oneline`\n      Allow credentials to be sent from this origin? Please read the warning above.\n    `,\n    default: false,\n  })\n}\n\nfunction promptForWildcardConfirmation(\n  origin: string,\n  context: CliCommandContext\n): Promise<boolean> {\n  const {prompt, output, chalk} = context\n\n  output.print('')\n  output.print(chalk.yellow(`${logSymbols.warning} Warning: Examples of allowed origins:`))\n\n  if (origin === '*') {\n    output.print('- http://www.some-malicious.site')\n    output.print('- https://not.what-you-were-expecting.com')\n    output.print('- https://high-traffic-site.com')\n    output.print('- http://192.168.1.1:8080')\n  } else {\n    output.print(`- ${origin.replace(/:\\*/, ':1234').replace(/\\*/g, 'foo')}`)\n    output.print(`- ${origin.replace(/:\\*/, ':3030').replace(/\\*/g, 'foo.bar')}`)\n  }\n\n  output.print('')\n\n  return prompt.single({\n    type: 'confirm',\n    message: oneline`\n      Using wildcards can be ${chalk.red('risky')}.\n      Are you ${chalk.underline('absolutely sure')} you want to allow this origin?`,\n    default: false,\n  })\n}\n\nfunction promptForOrigin(prompt: CliPrompter): Promise<string> {\n  return prompt.single({\n    type: 'input',\n    message: 'Origin (including protocol):',\n    filter: filterOrigin,\n    validate: (origin) => validateOrigin(origin, origin),\n  })\n}\n\nfunction filterOrigin(origin: string): string | null {\n  if (origin === '*' || origin === 'file:///*' || origin === 'null') {\n    return origin\n  }\n\n  try {\n    const example = origin\n      .replace(/([^:])\\*/g, `$1${wildcardReplacement}`)\n      .replace(/:\\*/, portReplacement)\n\n    const parsed = url.parse(example)\n    let host = parsed.host || ''\n    if (/^https?:$/.test(parsed.protocol || '')) {\n      host = host.replace(/:(80|443)$/, '')\n    }\n\n    host = host.replace(portReplacement, ':*').replace(new RegExp(wildcardReplacement, 'g'), '*')\n\n    return `${parsed.protocol}//${host}`\n  } catch (err) {\n    return null\n  }\n}\n\nfunction validateOrigin(origin: string | null, givenOrigin: string): true | string {\n  if (origin === '*' || origin === 'file:///*' || origin === 'null') {\n    return true\n  }\n\n  try {\n    url.parse(origin || (0 as any as string)) // Use 0 to trigger error for unset values\n    return true\n  } catch (err) {\n    // Fall-through to error\n  }\n\n  if (/^file:\\/\\//.test(givenOrigin)) {\n    return `Only a local file wildcard is currently allowed: file:///*`\n  }\n\n  return `Invalid origin \"${givenOrigin}\", must include protocol (https://some.host)`\n}\n\nfunction filterAndValidateOrigin(givenOrigin: string): string {\n  const origin = filterOrigin(givenOrigin)\n  const result = validateOrigin(origin, givenOrigin)\n  if (result !== true) {\n    throw new Error(result)\n  }\n\n  if (!origin) {\n    throw new Error('Invalid origin')\n  }\n\n  return origin\n}\n","import fs from 'fs'\nimport path from 'path'\nimport type {CliCommandDefinition} from '@sanity/cli'\nimport {addCorsOrigin} from '../../actions/cors/addCorsOrigin'\n\nconst helpText = `\nOptions\n  --credentials Allow credentials (token/cookie) to be sent from this origin\n  --no-credentials Disallow credentials (token/cookie) to be sent from this origin\n\nExamples\n  sanity cors add\n  sanity cors add http://localhost:3000 --no-credentials\n`\n\nconst addCorsOriginCommand: CliCommandDefinition = {\n  name: 'add',\n  group: 'cors',\n  signature: '[ORIGIN]',\n  helpText,\n  description: 'Allow a new origin to use your project API through CORS',\n  action: async (args, context) => {\n    const {output} = context\n    const [origin] = args.argsWithoutOptions\n\n    if (!origin) {\n      throw new Error('No origin specified, use `sanity cors add <origin-url>`')\n    }\n\n    const flags = args.extOptions\n\n    // eslint-disable-next-line no-sync\n    const isFile = fs.existsSync(path.join(process.cwd(), origin))\n    if (isFile) {\n      output.warn(`Origin \"${origin}?\" Remember to quote values (sanity cors add \"*\")`)\n    }\n\n    const success = await addCorsOrigin(origin, flags, context)\n    if (success) {\n      output.print('CORS origin added successfully')\n    }\n  },\n}\n\nexport default addCorsOriginCommand\n","import type {CliCommandDefinition} from '@sanity/cli'\nimport type {CorsOrigin} from './types'\n\nconst helpText = `\nExamples\n  sanity cors list\n`\n\nconst listCorsOriginsCommand: CliCommandDefinition = {\n  name: 'list',\n  group: 'cors',\n  signature: '',\n  helpText,\n  description: 'List all origins allowed to access the API for this project',\n  action: async (args, context) => {\n    const {output} = context\n    const {apiClient} = context\n    const client = apiClient({requireUser: true, requireProject: true})\n    const origins = await client.request<CorsOrigin[]>({url: '/cors'})\n    output.print(origins.map((origin) => origin.origin).join('\\n'))\n  },\n}\n\nexport default listCorsOriginsCommand\n","import type {CliCommandContext, CliCommandDefinition} from '@sanity/cli'\nimport type {CorsOrigin} from './types'\n\nconst helpText = `\nExamples\n  sanity cors delete\n  sanity cors delete http://localhost:3000\n`\n\nconst deleteCorsOriginCommand: CliCommandDefinition = {\n  name: 'delete',\n  group: 'cors',\n  signature: '[ORIGIN]',\n  helpText,\n  description: 'Delete an existing CORS-origin from your project',\n  action: async (args, context) => {\n    const {output, apiClient} = context\n    const [origin] = args.argsWithoutOptions\n    const client = apiClient({requireUser: true, requireProject: true})\n    const originId = await promptForOrigin(origin, context)\n    try {\n      await client.request({method: 'DELETE', uri: `/cors/${originId}`})\n      output.print('Origin deleted')\n    } catch (err) {\n      throw new Error(`Origin deletion failed:\\n${err.message}`)\n    }\n  },\n}\n\nexport default deleteCorsOriginCommand\n\nasync function promptForOrigin(specified: string | undefined, context: CliCommandContext) {\n  const specifiedOrigin = specified && specified.toLowerCase()\n  const {prompt, apiClient} = context\n  const client = apiClient({requireUser: true, requireProject: true})\n\n  const origins = await client.request<CorsOrigin[]>({url: '/cors'})\n  if (specifiedOrigin) {\n    const selected = origins.filter((origin) => origin.origin.toLowerCase() === specifiedOrigin)[0]\n    if (!selected) {\n      throw new Error(`Origin \"${specified} not found\"`)\n    }\n\n    return selected.id\n  }\n\n  const choices = origins.map((origin) => ({value: origin.id, name: origin.origin}))\n  return prompt.single({\n    message: 'Select origin to delete',\n    type: 'list',\n    choices,\n  })\n}\n","import type {CliCommandGroupDefinition} from '@sanity/cli'\n\nconst graphqlGroup: CliCommandGroupDefinition = {\n  name: 'graphql',\n  signature: '[COMMAND]',\n  isGroupRoot: true,\n  description: 'Interact with GraphQL APIs',\n}\n\nexport default graphqlGroup\n","import type {CliCommandArguments, CliCommandContext, CliCommandDefinition} from '@sanity/cli'\n\nconst helpText = `\nExamples\n  sanity graphql list\n`\n\nconst listGraphQLAPIsCommand: CliCommandDefinition = {\n  name: 'list',\n  signature: '',\n  group: 'graphql',\n  description: 'Lists all the GraphQL endpoints deployed for this project',\n  action: async (\n    args: CliCommandArguments<Record<string, unknown>>,\n    context: CliCommandContext\n  ) => {\n    const mod = await import('../../actions/graphql/listApisAction')\n\n    return mod.default(args, context)\n  },\n  helpText,\n}\n\nexport default listGraphQLAPIsCommand\n","import type {CliCommandContext, CliCommandDefinition} from '@sanity/cli'\n\nconst helpText = `\nOptions\n  --dry-run Validate defined APIs, exiting with an error on breaking changes\n  --force Deploy API without confirming breaking changes\n  --api <api-id> Only deploy API with this ID. Can be specified multiple times.\n\nThe following options will override any setting from the CLI configuration file\n(sanity.cli.js/sanity.cli.ts) - and applies to ALL defined APIs defined in that\nconfiguration file. Tread with caution!\n\n  --tag Deploy API(s) to given tag (defaults to 'default')\n  --dataset <name> Deploy API for the given dataset\n  --generation <gen1|gen2|gen3> API generation to deploy (defaults to 'gen3')\n  --non-null-document-fields Use non-null document fields (_id, _type etc)\n  --playground Enable GraphQL playground for easier debugging\n  --no-playground Disable GraphQL playground\n\nExamples\n  # Deploy all defined GraphQL APIs\n  sanity graphql deploy\n\n  # Validate defined GraphQL APIs, check for breaking changes, skip deploy\n  sanity graphql deploy --dry-run\n\n  # Deploy only the GraphQL APIs with the IDs \"staging\" and \"ios\"\n  sanity graphql deploy --api staging --api ios\n\n  # Deploy all defined GraphQL APIs, overriding any playground setting\n  sanity graphql deploy --playground\n`\n\nconst deployGraphQLAPICommand: CliCommandDefinition = {\n  name: 'deploy',\n  signature: '',\n  group: 'graphql',\n  description: 'Deploy a GraphQL API from the current Sanity schema',\n  action: async (args: {argv?: string[]}, context: CliCommandContext) => {\n    const mod = await import('../../actions/graphql/deployApiAction')\n\n    return mod.default(args, context)\n  },\n  helpText,\n}\n\nexport default deployGraphQLAPICommand\n","import type {CliCommandArguments, CliCommandContext, CliCommandDefinition} from '@sanity/cli'\nimport type {DeleteGraphQLApiFlags} from '../../actions/graphql/deleteApiAction'\n\nconst helpText = `\nOptions\n  --api <api-id> Undeploy API with this ID (project, dataset and tag flags takes preference)\n  --project <projectId> Project ID to delete GraphQL API for\n  --dataset <dataset> Delete GraphQL API for the given dataset\n  --tag <tag> Delete GraphQL API for the given tag (defaults to 'default')\n  --force Skip confirmation prompt, forcefully undeploying the GraphQL API\n\nExamples\n  sanity graphql undeploy\n  sanity graphql undeploy --api ios\n  sanity graphql undeploy --dataset staging\n  sanity graphql undeploy --dataset staging --tag next\n`\n\nconst deleteGraphQLAPICommand: CliCommandDefinition = {\n  name: 'undeploy',\n  group: 'graphql',\n  signature: '',\n  description: 'Remove a deployed GraphQL API',\n  action: async (args: CliCommandArguments<DeleteGraphQLApiFlags>, context: CliCommandContext) => {\n    const mod = await import('../../actions/graphql/deleteApiAction')\n\n    return mod.default(args, context)\n  },\n  helpText,\n}\n\nexport default deleteGraphQLAPICommand\n","import type {CliCommandGroupDefinition} from '@sanity/cli'\n\nexport const usersGroup: CliCommandGroupDefinition = {\n  name: 'users',\n  signature: '[COMMAND]',\n  isGroupRoot: true,\n  description: 'Manage users of your project',\n}\n\nexport default usersGroup\n","export function prettifyQuotaError(message: string) {\n  return (err: Error & {statusCode?: number}): Error & {statusCode?: number} => {\n    if (err.statusCode === 402) {\n      err.message = message\n      throw err\n    }\n\n    throw err\n  }\n}\n","import type {CliCommandDefinition, CliPrompter} from '@sanity/cli'\nimport {prettifyQuotaError} from '../../util/prettifyQuotaError'\nimport type {Role} from './types'\n\nconst helpText = `\nOptions\n  --role Role to invite the user as\n\nExamples\n  # Invite a new user to the project (prompt for details)\n  sanity users invite\n\n  # Send a new user invite to the email \"pippi@sanity.io\", prompt for role\n  sanity users invite pippi@sanity.io\n\n  # Send a new user invite to the email \"pippi@sanity.io\", as administrator\n  sanity users invite pippi@sanity.io --role administrator\n`\n\ninterface InviteFlags {\n  role?: string\n}\n\nconst inviteUserCommand: CliCommandDefinition<InviteFlags> = {\n  name: 'invite',\n  group: 'users',\n  signature: '[EMAIL]',\n  helpText,\n  description: 'Invite a new user to the project',\n  action: async (args, context) => {\n    const {apiClient, output, prompt} = context\n    const [selectedEmail] = args.argsWithoutOptions\n    const flags = args.extOptions\n\n    const client = apiClient().clone().config({useProjectHostname: false, apiVersion: '2021-06-07'})\n    const {projectId} = client.config()\n    const roles = (await client.request<Role[]>({uri: `/projects/${projectId}/roles`})).filter(\n      (role) => role.appliesToUsers\n    )\n    const email = selectedEmail || (await promptForEmail(prompt))\n    const selectedRole = flags.role || (await promptForRole(prompt, roles))\n    const role = roles.find(({name}) => name.toLowerCase() === selectedRole.toLowerCase())\n    if (!role) {\n      throw new Error(`Role name \"${selectedRole}\" not found`)\n    }\n\n    await client\n      .clone()\n      .request({\n        method: 'POST',\n        uri: `/invitations/project/${projectId}`,\n        body: {email, role: role.name},\n        useGlobalApi: true,\n        maxRedirects: 0,\n      })\n      .catch(\n        prettifyQuotaError(\n          'Project is already at user quota, add billing details to the project in order to allow overage charges.'\n        )\n      )\n\n    output.print(`Invitation sent to ${email}`)\n  },\n}\n\nexport default inviteUserCommand\n\nfunction promptForEmail(prompt: CliPrompter): Promise<string> {\n  return prompt.single({\n    type: 'input',\n    message: 'Email to invite:',\n    filter: (val) => val.trim(),\n    validate: (name) => {\n      if (!name || !name.includes('@')) {\n        return 'Invalid email'\n      }\n\n      return true\n    },\n  })\n}\n\nfunction promptForRole(prompt: CliPrompter, roles: Role[]): Promise<string> {\n  return prompt.single({\n    type: 'list',\n    message: 'Which role should the user have?',\n    choices: roles.map((role) => ({\n      value: role.name,\n      name: `${role.title} (${role.description})`,\n    })),\n  })\n}\n","import {sortBy, size} from 'lodash'\nimport type {CliCommandDefinition} from '@sanity/cli'\nimport type {Invite, PartialProjectResponse, User} from './types'\n\nconst sortFields = ['id', 'name', 'role', 'date']\n\nconst helpText = `\nOptions\n  --no-invitations Don't include pending invitations\n  --no-robots Don't include robots (token users)\n  --sort <field> Sort users by specified column: ${sortFields.join(', ')}\n  --order <asc/desc> Sort output ascending/descending\n\nExamples\n  # List all users of the project\n  sanity users list\n\n  # List all users of the project, but exclude pending invitations and robots\n  sanity users list --no-invitations --no-robots\n\n  # List all users, sorted by role\n  sanity users list --sort role\n`\n\nconst listUsersCommand: CliCommandDefinition = {\n  name: 'list',\n  group: 'users',\n  signature: '',\n  helpText,\n  description: 'List all users of the project',\n  action: async (args, context) => {\n    const {apiClient, output, chalk} = context\n    const {sort, order, robots, invitations} = {\n      sort: 'date',\n      order: 'asc',\n      robots: true,\n      invitations: true,\n      ...args.extOptions,\n    }\n\n    if (!sortFields.includes(sort)) {\n      throw new Error(`Can't sort by field \"${sort}\". Must be one of ${sortFields.join(', ')}`)\n    }\n\n    if (order !== 'asc' && order !== 'desc') {\n      throw new Error(`Unknown sort order \"${order}\", must be either \"asc\" or \"desc\"`)\n    }\n\n    const client = apiClient()\n    const globalClient = client.clone().config({useProjectHostname: false})\n    const {projectId} = client.config()\n\n    const useGlobalApi = true\n    const [pendingInvitations, project] = await Promise.all([\n      invitations\n        ? globalClient\n            .request<Invite[]>({uri: `/invitations/project/${projectId}`, useGlobalApi})\n            .then(getPendingInvitations)\n        : [],\n      globalClient.request<PartialProjectResponse>({uri: `/projects/${projectId}`, useGlobalApi}),\n    ])\n\n    const memberIds = project.members.map((member) => member.id)\n    const users = await globalClient\n      .request<User | User[]>({uri: `/users/${memberIds.join(',')}`, useGlobalApi})\n      .then((user) => (Array.isArray(user) ? user : [user]))\n\n    const projectMembers = project.members\n      .map((member) => ({\n        ...member,\n        ...getUserProps(users.find((candidate) => candidate.id === member.id)),\n      }))\n      .filter((member) => !member.isRobot || robots)\n\n    const members = [...projectMembers, ...pendingInvitations]\n\n    const ordered = sortBy(\n      members.map(({id, name, role, date}) => [id, name, role, date]),\n      [sortFields.indexOf(sort)]\n    )\n\n    const rows = order === 'asc' ? ordered : ordered.reverse()\n\n    const maxWidths = rows.reduce(\n      (max, row) => row.map((current, index) => Math.max(size(current), max[index])),\n      sortFields.map((str) => size(str))\n    )\n\n    const printRow = (row: string[]) => {\n      const isInvite = row[0] === '<pending>'\n      const textRow = row.map((col, i) => `${col}`.padEnd(maxWidths[i])).join('   ')\n      return isInvite ? chalk.dim(textRow) : textRow\n    }\n\n    output.print(chalk.cyan(printRow(sortFields)))\n    rows.forEach((row) => output.print(printRow(row)))\n  },\n}\n\nfunction getUserProps(user: User | undefined) {\n  const {displayName: name, createdAt: date} = user || {}\n  return {name: name || '', date: date || ''}\n}\n\nfunction getPendingInvitations(invitations: Invite[]) {\n  return invitations\n    .filter((invite) => !invite.isAccepted && !invite.isRevoked && !invite.acceptedByUserId)\n    .map((invite) => ({\n      id: '<pending>',\n      name: invite.email,\n      role: invite.role,\n      date: invite.createdAt,\n    }))\n}\n\nexport default listUsersCommand\n","import type {CliCommandDefinition, CliCommandGroupDefinition} from '@sanity/cli'\nimport buildCommand from './build/buildCommand'\nimport checkCommand from './check/checkCommand'\nimport configCheckCommand from './config/configCheckCommand'\nimport datasetGroup from './dataset/datasetGroup'\nimport deployCommand from './deploy/deployCommand'\nimport undeployCommand from './deploy/undeployCommand'\nimport listDatasetsCommand from './dataset/listDatasetsCommand'\nimport createDatasetCommand from './dataset/createDatasetCommand'\nimport datasetVisibilityCommand from './dataset/datasetVisibilityCommand'\nimport deleteDatasetCommand from './dataset/deleteDatasetCommand'\nimport exportDatasetCommand from './dataset/exportDatasetCommand'\nimport importDatasetCommand from './dataset/importDatasetCommand'\nimport copyDatasetCommand from './dataset/copyDatasetCommand'\nimport aliasDatasetCommand from './dataset/alias/aliasCommands'\nimport documentsGroup from './documents/documentsGroup'\nimport getDocumentsCommand from './documents/getDocumentsCommand'\nimport queryDocumentsCommand from './documents/queryDocumentsCommand'\nimport deleteDocumentsCommand from './documents/deleteDocumentsCommand'\nimport createDocumentsCommand from './documents/createDocumentsCommand'\nimport devCommand from './dev/devCommand'\nimport startCommand from './start/startCommand'\nimport previewCommand from './preview/previewCommand'\nimport uninstallCommand from './uninstall/uninstallCommand'\nimport hookGroup from './hook/hookGroup'\nimport createHookCommand from './hook/createHookCommand'\nimport deleteHookCommand from './hook/deleteHookCommand'\nimport listHooksCommand from './hook/listHooksCommand'\nimport printHookAttemptCommand from './hook/printHookAttemptCommand'\nimport listHookLogsCommand from './hook/listHookLogsCommand'\nimport execCommand from './exec/execCommand'\nimport corsGroup from './cors/corsGroup'\nimport addCorsOriginCommand from './cors/addCorsOriginCommand'\nimport listCorsOriginsCommand from './cors/listCorsOriginsCommand'\nimport deleteCorsOriginCommand from './cors/deleteCorsOriginCommand'\nimport graphqlGroup from './graphql/graphqlGroup'\nimport listGraphQLAPIsCommand from './graphql/listGraphQLAPIsCommand'\nimport deployGraphQLAPICommand from './graphql/deployGraphQLAPICommand'\nimport deleteGraphQLAPICommand from './graphql/deleteGraphQLAPICommand'\nimport usersGroup from './users/usersGroup'\nimport inviteUserCommand from './users/inviteUserCommand'\nimport listUsersCommand from './users/listUsersCommand'\n\nconst commands: (CliCommandDefinition | CliCommandGroupDefinition)[] = [\n  buildCommand,\n  checkCommand,\n  configCheckCommand,\n  datasetGroup,\n  deployCommand,\n  undeployCommand,\n  listDatasetsCommand,\n  createDatasetCommand,\n  datasetVisibilityCommand,\n  exportDatasetCommand,\n  importDatasetCommand,\n  deleteDatasetCommand,\n  copyDatasetCommand,\n  aliasDatasetCommand,\n  corsGroup,\n  listCorsOriginsCommand,\n  addCorsOriginCommand,\n  deleteCorsOriginCommand,\n  usersGroup,\n  inviteUserCommand,\n  listUsersCommand,\n  hookGroup,\n  listHooksCommand,\n  createHookCommand,\n  deleteHookCommand,\n  listHookLogsCommand,\n  printHookAttemptCommand,\n  documentsGroup,\n  getDocumentsCommand,\n  queryDocumentsCommand,\n  deleteDocumentsCommand,\n  createDocumentsCommand,\n  graphqlGroup,\n  listGraphQLAPIsCommand,\n  deployGraphQLAPICommand,\n  deleteGraphQLAPICommand,\n  devCommand,\n  startCommand,\n  previewCommand,\n  uninstallCommand,\n  execCommand,\n]\n\n/**\n * @deprecated Not actually deprecated, but these are internals and should not be relied upon outside of the Sanity team\n * @internal\n */\nexport const cliProjectCommands = {\n  requiredCliVersionRange: '^3.0.0',\n  commands,\n}\n"],"names":["helpText","buildCommand","name","signature","description","action","args","context","overrides","buildAction","getBuildAction","mod","default","checkCommand","hideFromHelp","_args","output","print","Promise","resolve","configCheckCommand","error","datasetGroup","isGroupRoot","deployCommand","undeployCommand","MAX_DATASET_NAME_LENGTH","validateDatasetAliasName","datasetName","toLowerCase","length","concat","test","ALIAS_PREFIX","listAliases","client","request","uri","createAlias","aliasName","modify","updateAlias","unlinkAlias","removeAlias","method","body","listAliasesHandler","apiClient","aliases","aliasClient.listAliases","map","set","join","listDatasetsCommand","group","datasets","list","debug","debugIt","validateDatasetName","promptForDatasetName","prompt","options","arguments","undefined","single","type","message","validate","err","allowedModes","createDatasetCommand","flags","extOptions","dataset","argsWithoutOptions","nameError","Error","projectFeatures","all","then","sets","ds","visibility","includes","canCreatePrivate","defaultAclMode","aclMode","promptForDatasetVisibility","create","mode","choices","value","datasetVisibilityCommand","edit","dsError","current","find","curr","parseCliFlags","yargs","hideBin","argv","process","slice","option","deleteDatasetCommand","force","warn","filter","input","trim","delete","chooseDatasetPrompt","allowCreation","hasProduction","datasetChoices","selected","Separator","newDatasetName","noop","parseFlags","rawFlags","types","split","assetConcurrency","parseInt","raw","Boolean","assets","drafts","compress","overwrite","exportDatasetCommand","chalk","workDir","targetDataset","targetDestination","destinationPath","path","absolutify","outputPath","getOutputPath","cyan","currentStep","spinner","start","onProgress","progress","step","succeed","update","text","total","Date","now","exportDataset","fail","prettyMs","destination","dstPath","isAbsolute","cwd","dstStats","fs","stat","catch","looksLikeFile","isFile","basename","indexOf","createPath","dirname","mkdir","recursive","finalPath","shouldOverwrite","yellow","str","toBoolIfSet","flag","allowAssetsInDifferentDataset","allowFailingAssets","replaceAssets","replace","missing","importDatasetCommand","fromInitCommand","operation","getMutationOperation","file","target","bold","determineTargetDataset","isUrl","inputStream","assetsBase","sourceIsFolder","getUrlStream","sourceFile","fileStats","isDirectory","createReadStream","importClient","clone","config","currentProgress","stepStart","spinInterval","percent","opts","lengthComputable","sameStep","getPercentage","clearInterval","prevStep","prevStepStart","timeSpent","secondsDecimalDigits","setInterval","endTask","_ref","success","numDocs","warnings","sanityImport","printWarnings","isNonRefConflict","response","statusCode","details","responseBody","shouldCreate","Math","floor","padStart","url","getIt","promise","onlyBody","stream","assetFails","bind","forEach","warning","listDatasetCopyJobs","projectId","query","offset","limit","red","table","Table","title","columns","alignment","job","id","state","createdAt","updatedAt","sourceDataset","withHistory","timeStarted","formatDistanceToNow","parseISO","timeTaken","formatDistance","color","addRow","printTable","getClientUrl","useCdn","base","cdnUrl","Observable","observer","progressSource","EventSource","stopped","onError","close","next","onChannelError","onMessage","event","data","JSON","parse","onComplete","removeEventListener","complete","addEventListener","followProgress","jobId","listenUrl","reject","subscribe","copyDatasetCommand","attach","shouldSkipHistory","existingDatasets","sourceDatasetName","targetDatasetName","skipHistory","green","detach","promptForDatasetAliasName","createAliasHandler","alias","aliasOutputName","startsWith","substring","datasetErr","canCreateAlias","aliasClient.createAlias","deleteAliasHandler","fetchedAliases","linkedAlias","elem","aliasClient.removeAlias","unlinkAliasHandler","result","aliasClient.unlinkAlias","linkAliasHandler","da","aliasClient.updateAlias","aliasCommand","verb","oneline","_templateObject","_taggedTemplateLiteral","documentsGroup","identity","inp","colorizeJson","formatters","punctuator","white","key","string","number","literal","whitespace","json","stringify","tokenize","token","i","arr","prevToken","formatter","getDocumentsCommand","pretty","docId","doc","getDocument","defaultApiVersion","queryDocumentsCommand","_a","_b","project","anonymous","apiVersion","cliConfig","requireDataset","requireProject","requireUser","api","baseClient","originalDataset","originalProjectId","docs","fetch","fallbackApiVersion","env","SANITY_CLI_QUERY_API_VERSION","deleteDocumentsCommand","ids","transaction","reduce","trx","results","commit","deleted","res","notFound","pluralize","createDocumentsCommand","watch","useJson5","json5","contentPath","content","readFile","writeDocuments","getResultMessage","uuid","ext","tmpFile","os","tmpdir","defaultValue","_id","_type","writeFile","editor","getEditor","registerUnlinkOnSigInt","chokidar","on","readAndPerformCreatesFromFile","execa","bin","stdio","sync","unlink","filePath","isEqual","writeResult","exit","documents","Array","isArray","mutations","index","validateDocument","isIdentifiedSanityDocument","createIfNotExists","createOrReplace","isSingle","isPlainObject","getErrorMessage","isSanityDocumentish","joiner","created","skipped","push","defaultEditor","platform","VISUAL","EDITOR","shift","devCommand","devAction","getDevAction","isInteractive","stdout","isTTY","TERM","startCommand","previewAction","getPreviewAction","msg","bgBlack","shouldRunDevServer","getPreviewAction$1","previewCommand","uninstallCommand","hookGroup","createHookCommand","projectInfo","projects","getById","organizationId","manageUrl","open","deleteHookCommand","hookId","promptForHook","promptForHook$1","specified","specifiedName","hooks","hook","listHooksCommand","httpMethod","printHookAttemptCommand","attemptId","attempt","resultCode","resultBody","failureReason","inProgress","getStatus","isFailure","formatFailure","includeHelp","help","listHookLogsCommand","messages","attempts","groupedAttempts","groupBy","populated","totalMessages","printMessage","detailed","printSeparator","skip","status","failureCount","inspect","payload","colors","date","prefix","failure","duration","execCommand","corsGroup","wildcardReplacement","portReplacement","addCorsOrigin","givenOrigin","origin","filterAndValidateOrigin","promptForOrigin","hasWildcard","promptForWildcardConfirmation","allowCredentials","credentials","promptForCredentials","maxRedirects","_templateObject2","logSymbols","underline","_templateObject3","_templateObject4","_templateObject5","filterOrigin","validateOrigin","example","parsed","host","protocol","RegExp","addCorsOriginCommand","existsSync","listCorsOriginsCommand","origins","deleteCorsOriginCommand","originId","specifiedOrigin","graphqlGroup","listGraphQLAPIsCommand","deployGraphQLAPICommand","deleteGraphQLAPICommand","usersGroup","prettifyQuotaError","inviteUserCommand","selectedEmail","useProjectHostname","roles","role","appliesToUsers","email","promptForEmail","selectedRole","promptForRole","_ref2","useGlobalApi","val","sortFields","listUsersCommand","sort","order","robots","invitations","globalClient","pendingInvitations","getPendingInvitations","memberIds","members","member","users","user","projectMembers","getUserProps","candidate","isRobot","ordered","sortBy","_ref3","rows","reverse","maxWidths","max","row","size","printRow","isInvite","textRow","col","padEnd","dim","displayName","invite","isAccepted","isRevoked","acceptedByUserId","commands","aliasDatasetCommand","cliProjectCommands","requiredCliVersionRange"],"mappings":"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"}