/** @public */
export declare function base(baseUrl: any): any

/**
 * The cancel token API is based on the [cancelable promises proposal](https://github.com/tc39/proposal-cancelable-promises), which is currently at Stage 1.
 *
 * Code shamelessly stolen/borrowed from MIT-licensed [axios](https://github.com/mzabriskie/axios). Thanks to [Nick Uraltsev](https://github.com/nickuraltsev), [Matt Zabriskie](https://github.com/mzabriskie) and the other contributors of that project!
 */
/** @public */
export declare class Cancel {
  __CANCEL__: boolean
  message: string | undefined
  constructor(message: string | undefined)
  toString(): string
}

/** @public */
export declare class CancelToken {
  promise: Promise<any>
  reason?: Cancel
  constructor(executor: (cb: (message?: string) => void) => void)
  static source: () => {
    token: CancelToken
    cancel: (message?: string) => void
  }
}

/** @public */
declare function debug_2(opts?: any): any
export {debug_2 as debug}

/** @public */
export declare function headers(_headers: any, opts?: any): any

/** @public */
export declare function httpErrors(): {
  onResponse: (res: any, ctx: any) => any
}

/** @public */
export declare function injectResponse(opts?: any): {
  interceptRequest: (prevValue: any, event: any) => any
}

/** @public */
export declare function jsonRequest(): {
  processOptions: (options: any) => any
}

/** @public */
export declare function jsonResponse(opts?: any): {
  onResponse: (response: any) => any
  processOptions: (options: any) => any
}

/** @public */
export declare function keepAlive(config?: any): any

/** @public */
export declare function mtls(config?: any): {
  finalizeOptions: (options: any) => any
}

/** @public */
export declare function observable(opts?: any): {
  onReturn: (channels: any, context: any) => any
}

/** @public */
export declare function processOptions(opts: any): any

/** @public */
export declare function progress(): {
  onHeaders: (response: any, evt: any) => any
  onRequest: (evt: any) => void
}

/** @public */
export declare const promise: {
  (options?: any): {
    onReturn: (channels: any, context: any) => any
  }
  Cancel: typeof Cancel
  CancelToken: typeof CancelToken
  isCancel: (value: any) => value is Cancel
}

/** @public */
export declare function proxy(_proxy: any): {
  processOptions: (options: any) => any
}

/** @public */
export declare const retry: {
  (opts?: Partial<RetryOptions>): any
  shouldRetry: (err: any, num: number, options: any) => any
}

/** @public */
export declare interface RetryOptions {
  shouldRetry: (err: any, num: number, options: any) => boolean
  maxRetries?: number
  retryDelay?: (attemptNumber: number) => number
}

/** @public */
export declare function urlEncoded(): any

/** @public */
export declare function validateOptions(options: any): any

export {}
