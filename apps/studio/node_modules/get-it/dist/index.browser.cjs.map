{"version":3,"file":"index.browser.cjs","sources":["../src/util/middlewareReducer.ts","../src/util/pubsub.ts","../src/createRequester.ts","../src/request/browser/fetchXhr.ts","../src/request/browser-request.ts","../src/index.browser.ts"],"sourcesContent":["export default (middleware: any) => {\n  const applyMiddleware = (hook: any, defaultValue: any, ...args: any[]) => {\n    const bailEarly = hook === 'onError'\n\n    let value = defaultValue\n    for (let i = 0; i < middleware[hook].length; i++) {\n      const handler = middleware[hook][i]\n      value = handler(value, ...args)\n\n      if (bailEarly && !value) {\n        break\n      }\n    }\n\n    return value\n  }\n\n  return applyMiddleware\n}\n","// Code borrowed from https://github.com/bjoerge/nano-pubsub\n\nexport interface Subscriber<Event> {\n  (event: Event): void\n}\nexport interface PubSub<Message> {\n  publish: (message: Message) => void\n  subscribe: (subscriber: Subscriber<Message>) => () => void\n}\n\nexport function createPubSub<Message = void>(): PubSub<Message> {\n  const subscribers: {[id: string]: Subscriber<Message>} = Object.create(null)\n  let nextId = 0\n  function subscribe(subscriber: Subscriber<Message>) {\n    const id = nextId++\n    subscribers[id] = subscriber\n    return function unsubscribe() {\n      delete subscribers[id]\n    }\n  }\n\n  function publish(event: Message) {\n    for (const id in subscribers) {\n      subscribers[id](event)\n    }\n  }\n\n  return {\n    publish,\n    subscribe,\n  }\n}\n","import {processOptions} from './middleware/defaultOptionsProcessor'\nimport {validateOptions} from './middleware/defaultOptionsValidator'\nimport type {HttpRequest, Middleware, Middlewares, Requester} from './types'\nimport middlewareReducer from './util/middlewareReducer'\nimport {createPubSub} from './util/pubsub'\n\nconst channelNames = ['request', 'response', 'progress', 'error', 'abort']\nconst middlehooks = [\n  'processOptions',\n  'validateOptions',\n  'interceptRequest',\n  'finalizeOptions',\n  'onRequest',\n  'onResponse',\n  'onError',\n  'onReturn',\n  'onHeaders',\n]\n\n/** @public */\nexport function createRequester(initMiddleware: Middlewares, httpRequest: HttpRequest): Requester {\n  const loadedMiddleware: any[] = []\n  const middleware = middlehooks.reduce(\n    (ware: any, name: any) => {\n      ware[name] = ware[name] || []\n      return ware\n    },\n    {\n      processOptions: [processOptions],\n      validateOptions: [validateOptions],\n    }\n  )\n\n  function request(opts: any) {\n    const channels = channelNames.reduce((target: any, name: any): any => {\n      target[name] = createPubSub()\n      return target\n    }, {})\n\n    // Prepare a middleware reducer that can be reused throughout the lifecycle\n    const applyMiddleware = middlewareReducer(middleware)\n\n    // Parse the passed options\n    const options = applyMiddleware('processOptions', opts)\n\n    // Validate the options\n    applyMiddleware('validateOptions', options)\n\n    // Build a context object we can pass to child handlers\n    const context = {options, channels, applyMiddleware}\n\n    // We need to hold a reference to the current, ongoing request,\n    // in order to allow cancellation. In the case of the retry middleware,\n    // a new request might be triggered\n    let ongoingRequest: any = null\n    const unsubscribe = channels.request.subscribe((ctx: any) => {\n      // Let request adapters (node/browser) perform the actual request\n      ongoingRequest = httpRequest(ctx, (err: any, res: any) => onResponse(err, res, ctx))\n    })\n\n    // If we abort the request, prevent further requests from happening,\n    // and be sure to cancel any ongoing request (obviously)\n    channels.abort.subscribe(() => {\n      unsubscribe()\n      if (ongoingRequest) {\n        ongoingRequest.abort()\n      }\n    })\n\n    // See if any middleware wants to modify the return value - for instance\n    // the promise or observable middlewares\n    const returnValue = applyMiddleware('onReturn', channels, context)\n\n    // If return value has been modified by a middleware, we expect the middleware\n    // to publish on the 'request' channel. If it hasn't been modified, we want to\n    // trigger it right away\n    if (returnValue === channels) {\n      channels.request.publish(context)\n    }\n\n    return returnValue\n\n    function onResponse(reqErr: any, res: any, ctx: any) {\n      let error = reqErr\n      let response = res\n\n      // We're processing non-errors first, in case a middleware converts the\n      // response into an error (for instance, status >= 400 == HttpError)\n      if (!error) {\n        try {\n          response = applyMiddleware('onResponse', res, ctx)\n        } catch (err) {\n          response = null\n          error = err\n        }\n      }\n\n      // Apply error middleware - if middleware return the same (or a different) error,\n      // publish as an error event. If we *don't* return an error, assume it has been handled\n      error = error && applyMiddleware('onError', error, ctx)\n\n      // Figure out if we should publish on error/response channels\n      if (error) {\n        channels.error.publish(error)\n      } else if (response) {\n        channels.response.publish(response)\n      }\n    }\n  }\n\n  request.use = function use(newMiddleware: Middleware) {\n    if (!newMiddleware) {\n      throw new Error('Tried to add middleware that resolved to falsey value')\n    }\n\n    if (typeof newMiddleware === 'function') {\n      throw new Error(\n        'Tried to add middleware that was a function. It probably expects you to pass options to it.'\n      )\n    }\n\n    if (newMiddleware.onReturn && middleware.onReturn.length > 0) {\n      throw new Error(\n        'Tried to add new middleware with `onReturn` handler, but another handler has already been registered for this event'\n      )\n    }\n\n    middlehooks.forEach((key) => {\n      if (newMiddleware[key]) {\n        middleware[key].push(newMiddleware[key])\n      }\n    })\n\n    loadedMiddleware.push(newMiddleware)\n    return request\n  }\n\n  request.clone = function clone() {\n    return createRequester(loadedMiddleware, httpRequest)\n  }\n\n  initMiddleware.forEach(request.use)\n\n  return request\n}\n","/**\n * Mimicks the XMLHttpRequest API with only the parts needed for get-it's XHR adapter\n */\nexport class FetchXhr\n  implements Pick<XMLHttpRequest, 'open' | 'abort' | 'getAllResponseHeaders' | 'setRequestHeader'>\n{\n  /**\n   * Public interface, interop with real XMLHttpRequest\n   */\n  onabort: () => void\n  onerror: (error?: any) => void\n  onreadystatechange: () => void\n  ontimeout: XMLHttpRequest['ontimeout']\n  /**\n   * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState\n   */\n  readyState: 0 | 1 | 2 | 3 | 4 = 0\n  response: XMLHttpRequest['response']\n  responseText: XMLHttpRequest['responseText']\n  responseType: XMLHttpRequest['responseType'] = ''\n  status: XMLHttpRequest['status']\n  statusText: XMLHttpRequest['statusText']\n  withCredentials: XMLHttpRequest['withCredentials']\n\n  /**\n   * Private implementation details\n   */\n  #method: string\n  #url: string\n  #resHeaders: string\n  #headers: Record<string, string> = {}\n  #controller?: AbortController\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- _async is only declared for typings compatibility\n  open(method: string, url: string, _async?: boolean) {\n    this.#method = method\n    this.#url = url\n    this.#resHeaders = ''\n    this.readyState = 1 // Open\n    this.onreadystatechange()\n    this.#controller = undefined\n  }\n  abort() {\n    if (this.#controller) {\n      this.#controller.abort()\n    }\n  }\n  getAllResponseHeaders() {\n    return this.#resHeaders\n  }\n  setRequestHeader(name: string, value: string) {\n    this.#headers[name] = value\n  }\n  send(body: BodyInit) {\n    const textBody = this.responseType !== 'arraybuffer'\n    const options: RequestInit = {\n      method: this.#method,\n      headers: this.#headers,\n      body,\n    }\n    if (typeof AbortController === 'function') {\n      this.#controller = new AbortController()\n      // The instanceof check ensures environments like Edge Runtime, Node 18 with built-in fetch\n      // and more don't throw if `signal` doesn't implement`EventTarget`\n      // Native browser AbortSignal implements EventTarget, so we can use it\n      if (typeof EventTarget !== 'undefined' && this.#controller.signal instanceof EventTarget) {\n        options.signal = this.#controller.signal\n      }\n    }\n\n    // Some environments (like CloudFlare workers) don't support credentials in\n    // RequestInitDict, and there doesn't seem to be any easy way to check for it,\n    // so for now let's just make do with a document check :/\n    if (typeof document !== 'undefined') {\n      options.credentials = this.withCredentials ? 'include' : 'omit'\n    }\n\n    fetch(this.#url, options)\n      .then((res): Promise<string | ArrayBuffer> => {\n        res.headers.forEach((value: any, key: any) => {\n          this.#resHeaders += `${key}: ${value}\\r\\n`\n        })\n        this.status = res.status\n        this.statusText = res.statusText\n        this.readyState = 3 // Loading\n        return textBody ? res.text() : res.arrayBuffer()\n      })\n      .then((resBody) => {\n        if (typeof resBody === 'string') {\n          this.responseText = resBody\n        } else {\n          this.response = resBody\n        }\n        this.readyState = 4 // Done\n        this.onreadystatechange()\n      })\n      .catch((err: Error) => {\n        if (err.name === 'AbortError') {\n          this.onabort()\n          return\n        }\n\n        this.onerror?.(err)\n      })\n  }\n}\n","import parseHeaders from 'parse-headers'\n\nimport type {RequestAdapter} from '../types'\nimport {FetchXhr} from './browser/fetchXhr'\n\n// Use fetch if it's available, non-browser environments such as Deno, Edge Runtime and more provide fetch as a global but doesn't provide xhr\nexport const adapter: RequestAdapter = typeof XMLHttpRequest === 'function' ? 'xhr' : 'fetch'\n\n// Fallback to fetch-based XHR polyfill for non-browser environments like Workers\nconst XmlHttpRequest = adapter === 'xhr' ? XMLHttpRequest : FetchXhr\n\nexport default (context: any, callback: (err: Error | null, response?: any) => void) => {\n  const opts = context.options\n  const options = context.applyMiddleware('finalizeOptions', opts)\n  const timers: any = {}\n\n  // Allow middleware to inject a response, for instance in the case of caching or mocking\n  const injectedResponse = context.applyMiddleware('interceptRequest', undefined, {\n    adapter,\n    context,\n  })\n\n  // If middleware injected a response, treat it as we normally would and return it\n  // Do note that the injected response has to be reduced to a cross-environment friendly response\n  if (injectedResponse) {\n    const cbTimer = setTimeout(callback, 0, null, injectedResponse)\n    const cancel = () => clearTimeout(cbTimer)\n    return {abort: cancel}\n  }\n\n  // We'll want to null out the request on success/failure\n  let xhr = new XmlHttpRequest()\n\n  const headers = options.headers\n  const delays = options.timeout\n\n  // Request state\n  let aborted = false\n  let loaded = false\n  let timedOut = false\n\n  // Apply event handlers\n  xhr.onerror = (event: ProgressEvent) => {\n    onError(\n      new Error(\n        `Request error while attempting to reach ${options.url}${\n          event.lengthComputable ? `(${event.loaded} of ${event.total} bytes transferred)` : ''\n        }`\n      )\n    )\n  }\n  xhr.ontimeout = (event: ProgressEvent) => {\n    onError(\n      new Error(\n        `Request timeout while attempting to reach ${options.url}${\n          event.lengthComputable ? `(${event.loaded} of ${event.total} bytes transferred)` : ''\n        }`\n      )\n    )\n  }\n  xhr.onabort = () => {\n    stopTimers(true)\n    aborted = true\n  }\n\n  xhr.onreadystatechange = () => {\n    // Prevent request from timing out\n    resetTimers()\n\n    if (aborted || xhr.readyState !== 4) {\n      return\n    }\n\n    // Will be handled by onError\n    if (xhr.status === 0) {\n      return\n    }\n\n    onLoad()\n  }\n\n  // @todo two last options to open() is username/password\n  xhr.open(\n    options.method,\n    options.url,\n    true // Always async\n  )\n\n  // Some options need to be applied after open\n  xhr.withCredentials = !!options.withCredentials\n\n  // Set headers\n  if (headers && xhr.setRequestHeader) {\n    for (const key in headers) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key])\n      }\n    }\n  }\n\n  if (options.rawBody) {\n    xhr.responseType = 'arraybuffer'\n  }\n\n  // Let middleware know we're about to do a request\n  context.applyMiddleware('onRequest', {options, adapter, request: xhr, context})\n\n  xhr.send(options.body || null)\n\n  // Figure out which timeouts to use (if any)\n  if (delays) {\n    timers.connect = setTimeout(() => timeoutRequest('ETIMEDOUT'), delays.connect)\n  }\n\n  return {abort}\n\n  function abort() {\n    aborted = true\n\n    if (xhr) {\n      xhr.abort()\n    }\n  }\n\n  function timeoutRequest(code: any) {\n    timedOut = true\n    xhr.abort()\n    const error: any = new Error(\n      code === 'ESOCKETTIMEDOUT'\n        ? `Socket timed out on request to ${options.url}`\n        : `Connection timed out on request to ${options.url}`\n    )\n    error.code = code\n    context.channels.error.publish(error)\n  }\n\n  function resetTimers() {\n    if (!delays) {\n      return\n    }\n\n    stopTimers()\n    timers.socket = setTimeout(() => timeoutRequest('ESOCKETTIMEDOUT'), delays.socket)\n  }\n\n  function stopTimers(force?: boolean) {\n    // Only clear the connect timeout if we've got a connection\n    if (force || aborted || (xhr.readyState >= 2 && timers.connect)) {\n      clearTimeout(timers.connect)\n    }\n\n    if (timers.socket) {\n      clearTimeout(timers.socket)\n    }\n  }\n\n  function onError(error: Error) {\n    if (loaded) {\n      return\n    }\n\n    // Clean up\n    stopTimers(true)\n    loaded = true\n    ;(xhr as any) = null\n\n    // Annoyingly, details are extremely scarce and hidden from us.\n    // We only really know that it is a network error\n    const err = (error ||\n      new Error(`Network error while attempting to reach ${options.url}`)) as Error & {\n      isNetworkError: boolean\n      request?: any\n    }\n    err.isNetworkError = true\n    err.request = options\n    callback(err)\n  }\n\n  function reduceResponse() {\n    return {\n      body:\n        xhr.response ||\n        (xhr.responseType === '' || xhr.responseType === 'text' ? xhr.responseText : ''),\n      url: options.url,\n      method: options.method,\n      headers: parseHeaders(xhr.getAllResponseHeaders()),\n      statusCode: xhr.status,\n      statusMessage: xhr.statusText,\n    }\n  }\n\n  function onLoad() {\n    if (aborted || loaded || timedOut) {\n      return\n    }\n\n    if (xhr.status === 0) {\n      onError(new Error('Unknown XHR error'))\n      return\n    }\n\n    // Prevent being called twice\n    stopTimers()\n    loaded = true\n    callback(null, reduceResponse())\n  }\n}\n","import {createRequester} from './createRequester'\nimport httpRequester from './request/browser-request'\nimport type {ExportEnv, HttpRequest, Middlewares, Requester} from './types'\n\nexport * from './types'\n\n/** @public */\nexport const getIt = (\n  initMiddleware: Middlewares = [],\n  httpRequest: HttpRequest = httpRequester\n): Requester => createRequester(initMiddleware, httpRequest)\n\n/** @public */\nexport const environment: ExportEnv = 'browser'\n\n/** @public */\nexport {adapter} from './request/browser-request'\n"],"names":["middlewareReducer","middleware","applyMiddleware","hook","defaultValue","bailEarly","value","_len","arguments","length","args","Array","_key","i","handler","createPubSub","subscribers","Object","create","nextId","subscribe","subscriber","id","unsubscribe","publish","event","channelNames","middlehooks","createRequester","initMiddleware","httpRequest","loadedMiddleware","reduce","ware","name","processOptions","validateOptions","request","opts","channels","target","options","context","ongoingRequest","ctx","err","res","onResponse","abort","returnValue","reqErr","error","response","use","newMiddleware","Error","onReturn","forEach","key","push","clone","_method","_url","_resHeaders","_headers","_controller","FetchXhr","constructor","readyState","responseType","__privateAdd","open","method","url","_async","__privateSet","onreadystatechange","__privateGet","getAllResponseHeaders","setRequestHeader","send","body","textBody","headers","AbortController","EventTarget","signal","document","credentials","withCredentials","fetch","then","concat","status","statusText","text","arrayBuffer","resBody","responseText","catch","_a","onabort","onerror","call","WeakMap","adapter","XMLHttpRequest","XmlHttpRequest","httpRequester","callback","timers","injectedResponse","cbTimer","setTimeout","cancel","clearTimeout","xhr","delays","timeout","aborted","loaded","timedOut","onError","lengthComputable","total","ontimeout","stopTimers","resetTimers","onLoad","hasOwnProperty","rawBody","connect","timeoutRequest","code","socket","force","isNetworkError","reduceResponse","parseHeaders","default","statusCode","statusMessage","getIt","undefined","environment"],"mappings":";;;;;;;;;;;;;AAAA,IAAeA,iBAAA,GAACC,UAAoB,IAAA;EAClC,MAAMC,eAAkB,GAAA,SAAAA,CAACC,IAAW,EAAAC,YAAA,EAAsC;IACxE,MAAMC,YAAYF,IAAS,KAAA,SAAA;IAE3B,IAAIG,KAAQ,GAAAF,YAAA;IAAA,SAAAG,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAH4CC,IAAgB,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAhBF,IAAgB,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;IAAA;IAIxE,KAAA,IAASC,IAAI,CAAG,EAAAA,CAAA,GAAIZ,WAAWE,IAAI,CAAA,CAAEM,QAAQI,CAAK,EAAA,EAAA;MAChD,MAAMC,OAAU,GAAAb,UAAA,CAAWE,IAAI,CAAA,CAAEU,CAAC,CAAA;MAC1BP,KAAA,GAAAQ,OAAA,CAAQR,KAAO,EAAA,GAAGI,IAAI,CAAA;MAE1B,IAAAL,SAAA,IAAa,CAACC,KAAO,EAAA;QACvB;MACF;IACF;IAEO,OAAAA,KAAA;EAAA,CACT;EAEO,OAAAJ,eAAA;AACT,CAAA;ACRO,SAASa,YAAgDA,CAAA,EAAA;EACxD,MAAAC,WAAA,GAA0D,eAAAC,MAAA,CAAAC,MAAA,CAAO,IAAI,CAAA;EAC3E,IAAIC,MAAS,GAAA,CAAA;EACb,SAASC,UAAUC,UAAiC,EAAA;IAClD,MAAMC,EAAK,GAAAH,MAAA,EAAA;IACXH,WAAA,CAAYM,EAAE,CAAI,GAAAD,UAAA;IAClB,OAAO,SAASE,WAAcA,CAAA,EAAA;MAC5B,OAAOP,YAAYM,EAAE,CAAA;IAAA,CACvB;EACF;EAEA,SAASE,QAAQC,KAAgB,EAAA;IAC/B,KAAA,MAAWH,MAAMN,WAAa,EAAA;MAChBA,WAAA,CAAAM,EAAE,EAAEG,KAAK,CAAA;IACvB;EACF;EAEO,OAAA;IACLD,OAAA;IACAJ;EAAA,CACF;AACF;ACzBA,MAAMM,eAAe,CAAC,SAAA,EAAW,UAAY,EAAA,UAAA,EAAY,SAAS,OAAO,CAAA;AACzE,MAAMC,WAAc,GAAA,CAClB,gBAAA,EACA,iBAAA,EACA,kBAAA,EACA,iBAAA,EACA,WAAA,EACA,YAAA,EACA,SAAA,EACA,UAAA,EACA,WAAA,CACF;AAGgB,SAAAC,eAAAA,CAAgBC,gBAA6BC,WAAqC,EAAA;EAChG,MAAMC,mBAA0B,EAAC;EACjC,MAAM9B,aAAa0B,WAAY,CAAAK,MAAA,CAC7B,CAACC,MAAWC,IAAc,KAAA;IACxBD,IAAA,CAAKC,IAAI,CAAA,GAAID,IAAK,CAAAC,IAAI,KAAK,EAAC;IACrB,OAAAD,IAAA;EACT,CAAA,EACA;IACEE,cAAA,EAAgB,CAACA,uBAAAA,CAAAA,cAAc,CAAA;IAC/BC,eAAA,EAAiB,CAACA,uBAAAA,CAAAA,eAAe;EACnC,CAAA,CACF;EAEA,SAASC,QAAQC,IAAW,EAAA;IAC1B,MAAMC,QAAW,GAAAb,YAAA,CAAaM,MAAO,CAAA,CAACQ,QAAaN,IAAmB,KAAA;MAC7DM,MAAA,CAAAN,IAAI,IAAInB,YAAa,EAAA;MACrB,OAAAyB,MAAA;IACT,CAAA,EAAG,CAAE,CAAA,CAAA;IAGC,MAAAtC,eAAA,GAAkBF,kBAAkBC,UAAU,CAAA;IAG9C,MAAAwC,OAAA,GAAUvC,eAAgB,CAAA,gBAAA,EAAkBoC,IAAI,CAAA;IAGtDpC,eAAA,CAAgB,mBAAmBuC,OAAO,CAAA;IAG1C,MAAMC,OAAU,GAAA;MAACD,OAAS;MAAAF,QAAA;MAAUrC;IAAe,CAAA;IAKnD,IAAIyC,cAAsB,GAAA,IAAA;IAC1B,MAAMpB,WAAc,GAAAgB,QAAA,CAASF,OAAQ,CAAAjB,SAAA,CAAWwB,GAAa,IAAA;MAE1CD,cAAA,GAAAb,WAAA,CAAYc,KAAK,CAACC,GAAA,EAAUC,QAAaC,UAAW,CAAAF,GAAA,EAAKC,GAAK,EAAAF,GAAG,CAAC,CAAA;IAAA,CACpF,CAAA;IAIQL,QAAA,CAAAS,KAAA,CAAM5B,UAAU,MAAM;MACjBG,WAAA,EAAA;MACZ,IAAIoB,cAAgB,EAAA;QAClBA,cAAA,CAAeK,KAAM,CAAA,CAAA;MACvB;IAAA,CACD,CAAA;IAID,MAAMC,WAAc,GAAA/C,eAAA,CAAgB,UAAY,EAAAqC,QAAA,EAAUG,OAAO,CAAA;IAKjE,IAAIO,gBAAgBV,QAAU,EAAA;MACnBA,QAAA,CAAAF,OAAA,CAAQb,QAAQkB,OAAO,CAAA;IAClC;IAEO,OAAAO,WAAA;IAEE,SAAAF,UAAAA,CAAWG,MAAa,EAAAJ,GAAA,EAAUF,GAAU,EAAA;MACnD,IAAIO,KAAQ,GAAAD,MAAA;MACZ,IAAIE,QAAW,GAAAN,GAAA;MAIf,IAAI,CAACK,KAAO,EAAA;QACN,IAAA;UACSC,QAAA,GAAAlD,eAAA,CAAgB,YAAc,EAAA4C,GAAA,EAAKF,GAAG,CAAA;iBAC1CC,GAAP,EAAA;UACWO,QAAA,GAAA,IAAA;UACHD,KAAA,GAAAN,GAAA;QACV;MACF;MAIAM,KAAA,GAAQA,KAAS,IAAAjD,eAAA,CAAgB,SAAW,EAAAiD,KAAA,EAAOP,GAAG,CAAA;MAGtD,IAAIO,KAAO,EAAA;QACAZ,QAAA,CAAAY,KAAA,CAAM3B,QAAQ2B,KAAK,CAAA;iBACnBC,QAAU,EAAA;QACVb,QAAA,CAAAa,QAAA,CAAS5B,QAAQ4B,QAAQ,CAAA;MACpC;IACF;EACF;EAEQf,OAAA,CAAAgB,GAAA,GAAM,SAASA,GAAAA,CAAIC,aAA2B,EAAA;IACpD,IAAI,CAACA,aAAe,EAAA;MACZ,MAAA,IAAIC,MAAM,uDAAuD,CAAA;IACzE;IAEI,IAAA,OAAOD,kBAAkB,UAAY,EAAA;MACvC,MAAM,IAAIC,KAAA,CACR,6FAAA,CACF;IACF;IAEA,IAAID,aAAc,CAAAE,QAAA,IAAYvD,UAAW,CAAAuD,QAAA,CAAS/C,SAAS,CAAG,EAAA;MAC5D,MAAM,IAAI8C,KAAA,CACR,qHAAA,CACF;IACF;IAEY5B,WAAA,CAAA8B,OAAA,CAASC,GAAQ,IAAA;MACvB,IAAAJ,aAAA,CAAcI,GAAG,CAAG,EAAA;QACtBzD,UAAA,CAAWyD,GAAG,CAAA,CAAEC,IAAK,CAAAL,aAAA,CAAcI,GAAG,CAAC,CAAA;MACzC;IAAA,CACD,CAAA;IAED3B,gBAAA,CAAiB4B,KAAKL,aAAa,CAAA;IAC5B,OAAAjB,OAAA;EAAA,CACT;EAEQA,OAAA,CAAAuB,KAAA,GAAQ,SAASA,KAAQA,CAAA,EAAA;IACxB,OAAAhC,eAAA,CAAgBG,kBAAkBD,WAAW,CAAA;EAAA,CACtD;EAEeD,cAAA,CAAA4B,OAAA,CAAQpB,QAAQgB,GAAG,CAAA;EAE3B,OAAAhB,OAAA;AACT;;;;;;;;;;;;;;;;;AChJA,IAAAwB,OAAA,EAAAC,IAAA,EAAAC,WAAA,EAAAC,QAAA,EAAAC,WAAA;AAGO,MAAMC,QAEb,CAAA;EAFOC,WAAAA,CAAA,EAAA;IAaL;AAAA;AAAA;IAAgC,IAAA,CAAAC,UAAA,GAAA,CAAA;IAGe,IAAA,CAAAC,YAAA,GAAA,EAAA;IAQ/C;AAAA;AAAA;IAAAC,YAAA,CAAA,IAAA,EAAAT,OAAA,EAAA,KAAA,CAAA,CAAA;IACAS,YAAA,CAAA,IAAA,EAAAR,IAAA,EAAA,KAAA,CAAA,CAAA;IACAQ,YAAA,CAAA,IAAA,EAAAP,WAAA,EAAA,KAAA,CAAA,CAAA;IACAO,YAAA,CAAA,IAAA,EAAAN,QAAA,EAAmC,CAAA,CAAC,CAAA;IACpCM,YAAA,CAAA,IAAA,EAAAL,WAAA,EAAA,KAAA,CAAA,CAAA;EAAA;EAAA;EAEAM,IAAAA,CAAKC,MAAgB,EAAAC,GAAA,EAAaC,MAAkB,EAAA;IAClDC,YAAA,CAAA,IAAA,EAAKd,OAAU,EAAAW,MAAA,CAAA;IACfG,YAAA,CAAA,IAAA,EAAKb,IAAO,EAAAW,GAAA,CAAA;IACZE,YAAA,CAAA,IAAA,EAAKZ,WAAc,EAAA,EAAA,CAAA;IACnB,IAAA,CAAKK,UAAa,GAAA,CAAA;IAClB,IAAA,CAAKQ,kBAAmB,CAAA,CAAA;IACxBD,YAAA,CAAA,IAAA,EAAKV,WAAc,EAAA,KAAA,CAAA,CAAA;EACrB;EACAjB,KAAQA,CAAA,EAAA;IACN,IAAI6B,mBAAKZ,WAAa,CAAA,EAAA;MACpBY,YAAA,CAAA,IAAA,EAAKZ,aAAYjB,KAAM,CAAA,CAAA;IACzB;EACF;EACA8B,qBAAwBA,CAAA,EAAA;IACtB,OAAOD,YAAK,CAAA,IAAA,EAAAd,WAAA,CAAA;EACd;EACAgB,gBAAAA,CAAiB7C,MAAc5B,KAAe,EAAA;IACvCuE,YAAA,CAAA,IAAA,EAAAb,QAAA,CAAA,CAAS9B,IAAI,CAAI,GAAA5B,KAAA;EACxB;EACA0E,KAAKC,IAAgB,EAAA;IACb,MAAAC,QAAA,GAAW,KAAKb,YAAiB,KAAA,aAAA;IACvC,MAAM5B,OAAuB,GAAA;MAC3B+B,QAAQK,YAAK,CAAA,IAAA,EAAAhB,OAAA,CAAA;MACbsB,SAASN,YAAK,CAAA,IAAA,EAAAb,QAAA,CAAA;MACdiB;IAAA,CACF;IACI,IAAA,OAAOG,oBAAoB,UAAY,EAAA;MACpCT,YAAA,CAAA,IAAA,EAAAV,WAAA,EAAc,IAAImB,eAAgB,CAAA,CAAA,CAAA;MAIvC,IAAI,OAAOC,WAAgB,KAAA,WAAA,IAAeR,YAAK,CAAA,IAAA,EAAAZ,WAAA,CAAA,CAAYqB,kBAAkBD,WAAa,EAAA;QAChF5C,OAAA,CAAA6C,MAAA,GAAST,mBAAKZ,WAAY,CAAA,CAAAqB,MAAA;MACpC;IACF;IAKI,IAAA,OAAOC,aAAa,WAAa,EAAA;MAC3B9C,OAAA,CAAA+C,WAAA,GAAc,IAAK,CAAAC,eAAA,GAAkB,SAAY,GAAA,MAAA;IAC3D;IAEAC,KAAA,CAAMb,mBAAKf,IAAM,CAAA,EAAArB,OAAO,CACrB,CAAAkD,IAAA,CAAM7C,GAAuC,IAAA;MAC5CA,GAAA,CAAIqC,OAAQ,CAAA1B,OAAA,CAAQ,CAACnD,KAAA,EAAYoD,GAAa,KAAA;QAC5CiB,YAAA,CAAA,IAAA,EAAKZ,WAAL,EAAAc,YAAA,CAAA,IAAA,EAAKd,WAAe,CAAA,MAAA6B,MAAA,CAAGlC,GAAQ,QAAAkC,MAAA,CAAAtF,KAAA,SAAA,CAAA;MAAA,CAChC,CAAA;MACD,IAAA,CAAKuF,SAAS/C,GAAI,CAAA+C,MAAA;MAClB,IAAA,CAAKC,aAAahD,GAAI,CAAAgD,UAAA;MACtB,IAAA,CAAK1B,UAAa,GAAA,CAAA;MAClB,OAAOc,QAAW,GAAApC,GAAA,CAAIiD,IAAK,CAAA,CAAA,GAAIjD,IAAIkD,WAAY,CAAA,CAAA;IAAA,CAChD,CAAA,CACAL,IAAK,CAACM,OAAY,IAAA;MACb,IAAA,OAAOA,YAAY,QAAU,EAAA;QAC/B,IAAA,CAAKC,YAAe,GAAAD,OAAA;MAAA,CACf,MAAA;QACL,IAAA,CAAK7C,QAAW,GAAA6C,OAAA;MAClB;MACA,IAAA,CAAK7B,UAAa,GAAA,CAAA;MAClB,IAAA,CAAKQ,kBAAmB,CAAA,CAAA;IAAA,CACzB,CAAA,CACAuB,KAAM,CAACtD,GAAe,IAAA;MA/F7B,IAAAuD,EAAA;MAgGY,IAAAvD,GAAA,CAAIX,SAAS,YAAc,EAAA;QAC7B,IAAA,CAAKmE,OAAQ,CAAA,CAAA;QACb;MACF;MAEA,CAAAD,EAAA,GAAA,IAAA,CAAKE,YAAL,IAAe,GAAA,KAAA,CAAA,GAAAF,EAAA,CAAAG,IAAA,CAAA,IAAA,EAAA1D,GAAA,CAAA;IAAA,CAChB,CAAA;EACL;AACF;AA7EEgB,OAAA,GAAA,IAAA2C,OAAA,CAAA,CAAA;AACA1C,IAAA,GAAA,IAAA0C,OAAA,CAAA,CAAA;AACAzC,WAAA,GAAA,IAAAyC,OAAA,CAAA,CAAA;AACAxC,QAAA,GAAA,IAAAwC,OAAA,CAAA,CAAA;AACAvC,WAAA,GAAA,IAAAuC,OAAA,CAAA,CAAA;ACzBK,MAAMC,OAA0B,GAAA,OAAOC,cAAmB,KAAA,UAAA,GAAa,KAAQ,GAAA,OAAA;AAGtF,MAAMC,cAAA,GAAiBF,OAAY,KAAA,KAAA,GAAQC,cAAiB,GAAAxC,QAAA;AAE5D,IAAA0C,aAAA,GAAeA,CAAClE,SAAcmE,QAA0D,KAAA;EACtF,MAAMvE,OAAOI,OAAQ,CAAAD,OAAA;EACrB,MAAMA,OAAU,GAAAC,OAAA,CAAQxC,eAAgB,CAAA,iBAAA,EAAmBoC,IAAI,CAAA;EAC/D,MAAMwE,SAAc,CAAA,CAAC;EAGrB,MAAMC,gBAAmB,GAAArE,OAAA,CAAQxC,eAAgB,CAAA,kBAAA,EAAoB,KAAW,CAAA,EAAA;IAC9EuG,OAAA;IACA/D;EAAA,CACD,CAAA;EAID,IAAIqE,gBAAkB,EAAA;IACpB,MAAMC,OAAU,GAAAC,UAAA,CAAWJ,QAAU,EAAA,CAAA,EAAG,MAAME,gBAAgB,CAAA;IACxD,MAAAG,MAAA,GAASA,CAAA,KAAMC,YAAA,CAAaH,OAAO,CAAA;IAClC,OAAA;MAAChE,OAAOkE;KAAM;EACvB;EAGI,IAAAE,GAAA,GAAM,IAAIT,cAAe,EAAA;EAE7B,MAAMxB,UAAU1C,OAAQ,CAAA0C,OAAA;EACxB,MAAMkC,SAAS5E,OAAQ,CAAA6E,OAAA;EAGvB,IAAIC,OAAU,GAAA,KAAA;EACd,IAAIC,MAAS,GAAA,KAAA;EACb,IAAIC,QAAW,GAAA,KAAA;EAGXL,GAAA,CAAAd,OAAA,GAAW7E,KAAyB,IAAA;IACtCiG,OAAA,CACE,IAAInE,KAAA,4CAAAqC,MAAA,CACyCnD,QAAQgC,GACjD,EAAAmB,MAAA,CAAAnE,KAAA,CAAMkG,8BAAuBlG,KAAA,CAAM+F,MAAa,UAAA5B,MAAA,CAAAnE,KAAA,CAAMmG,KAA6B,2BAAA,EAAA,CAEvF,CAAA,CACF;EAAA,CACF;EACIR,GAAA,CAAAS,SAAA,GAAapG,KAAyB,IAAA;IACxCiG,OAAA,CACE,IAAInE,KAAA,8CAAAqC,MAAA,CAC2CnD,QAAQgC,GACnD,EAAAmB,MAAA,CAAAnE,KAAA,CAAMkG,8BAAuBlG,KAAA,CAAM+F,MAAa,UAAA5B,MAAA,CAAAnE,KAAA,CAAMmG,KAA6B,2BAAA,EAAA,CAEvF,CAAA,CACF;EAAA,CACF;EACAR,GAAA,CAAIf,UAAU,MAAM;IAClByB,UAAA,CAAW,IAAI,CAAA;IACLP,OAAA,GAAA,IAAA;EAAA,CACZ;EAEAH,GAAA,CAAIxC,qBAAqB,MAAM;IAEjBmD,WAAA,EAAA;IAER,IAAAR,OAAA,IAAWH,GAAI,CAAAhD,UAAA,KAAe,CAAG,EAAA;MACnC;IACF;IAGI,IAAAgD,GAAA,CAAIvB,WAAW,CAAG,EAAA;MACpB;IACF;IAEOmC,MAAA,EAAA;EAAA,CACT;EAGIZ,GAAA,CAAA7C,IAAA,CACF9B,OAAQ,CAAA+B,MAAA,EACR/B,OAAQ,CAAAgC,GAAA,EACR;EAAA;EAAA,CACF;;EAGI2C,GAAA,CAAA3B,eAAA,GAAkB,CAAC,CAAChD,OAAQ,CAAAgD,eAAA;EAG5B,IAAAN,OAAA,IAAWiC,IAAIrC,gBAAkB,EAAA;IACnC,KAAA,MAAWrB,OAAOyB,OAAS,EAAA;MAErB,IAAAA,OAAA,CAAQ8C,cAAe,CAAAvE,GAAG,CAAG,EAAA;QAC/B0D,GAAA,CAAIrC,gBAAiB,CAAArB,GAAA,EAAKyB,OAAQ,CAAAzB,GAAG,CAAC,CAAA;MACxC;IACF;EACF;EAEA,IAAIjB,QAAQyF,OAAS,EAAA;IACnBd,GAAA,CAAI/C,YAAe,GAAA,aAAA;EACrB;EAGQ3B,OAAA,CAAAxC,eAAA,CAAgB,aAAa;IAACuC,OAAA;IAASgE;IAASpE,OAAS,EAAA+E,GAAA;IAAK1E;GAAQ,CAAA;EAE1E0E,GAAA,CAAApC,IAAA,CAAKvC,OAAQ,CAAAwC,IAAA,IAAQ,IAAI,CAAA;EAG7B,IAAIoC,MAAQ,EAAA;IACVP,MAAA,CAAOqB,UAAUlB,UAAW,CAAA,MAAMmB,eAAe,WAAW,CAAA,EAAGf,OAAOc,OAAO,CAAA;EAC/E;EAEA,OAAO;IAACnF;EAAK,CAAA;EAEb,SAASA,KAAQA,CAAA,EAAA;IACLuE,OAAA,GAAA,IAAA;IAEV,IAAIH,GAAK,EAAA;MACPA,GAAA,CAAIpE,KAAM,CAAA,CAAA;IACZ;EACF;EAEA,SAASoF,eAAeC,IAAW,EAAA;IACtBZ,QAAA,GAAA,IAAA;IACXL,GAAA,CAAIpE,KAAM,CAAA,CAAA;IACV,MAAMG,QAAa,IAAII,KAAA,CACrB8E,SAAS,iBACL,qCAAAzC,MAAA,CAAkCnD,OAAQ,CAAAgC,GAAA,0CAAAmB,MAAA,CACJnD,OAAQ,CAAAgC,GAAA,CAAA,CACpD;IACAtB,KAAA,CAAMkF,IAAO,GAAAA,IAAA;IACL3F,OAAA,CAAAH,QAAA,CAASY,KAAM,CAAA3B,OAAA,CAAQ2B,KAAK,CAAA;EACtC;EAEA,SAAS4E,WAAcA,CAAA,EAAA;IACrB,IAAI,CAACV,MAAQ,EAAA;MACX;IACF;IAEWS,UAAA,EAAA;IACXhB,MAAA,CAAOwB,SAASrB,UAAW,CAAA,MAAMmB,eAAe,iBAAiB,CAAA,EAAGf,OAAOiB,MAAM,CAAA;EACnF;EAEA,SAASR,WAAWS,KAAiB,EAAA;IAEnC,IAAIA,SAAShB,OAAY,IAAAH,GAAA,CAAIhD,UAAc,IAAA,CAAA,IAAK0C,OAAOqB,OAAU,EAAA;MAC/DhB,YAAA,CAAaL,OAAOqB,OAAO,CAAA;IAC7B;IAEA,IAAIrB,OAAOwB,MAAQ,EAAA;MACjBnB,YAAA,CAAaL,OAAOwB,MAAM,CAAA;IAC5B;EACF;EAEA,SAASZ,QAAQvE,KAAc,EAAA;IAC7B,IAAIqE,MAAQ,EAAA;MACV;IACF;IAGAM,UAAA,CAAW,IAAI,CAAA;IACNN,MAAA,GAAA,IAAA;IACPJ,GAAc,GAAA,IAAA;IAIhB,MAAMvE,MAAOM,KACX,IAAA,IAAII,KAAM,4CAAAqC,MAAA,CAA2CnD,QAAQgC,GAAK,CAAA,CAAA;IAIpE5B,GAAA,CAAI2F,cAAiB,GAAA,IAAA;IACrB3F,GAAA,CAAIR,OAAU,GAAAI,OAAA;IACdoE,QAAA,CAAShE,GAAG,CAAA;EACd;EAEA,SAAS4F,cAAiBA,CAAA,EAAA;IACjB,OAAA;MACLxD,IAAA,EACEmC,GAAI,CAAAhE,QAAA,KACHgE,GAAI,CAAA/C,YAAA,KAAiB,MAAM+C,GAAI,CAAA/C,YAAA,KAAiB,MAAS,GAAA+C,GAAA,CAAIlB,YAAe,GAAA,EAAA,CAAA;MAC/EzB,KAAKhC,OAAQ,CAAAgC,GAAA;MACbD,QAAQ/B,OAAQ,CAAA+B,MAAA;MAChBW,OAAS,EAAAuD,qBAAA,CAAAC,OAAA,CAAavB,GAAI,CAAAtC,qBAAA,EAAuB,CAAA;MACjD8D,YAAYxB,GAAI,CAAAvB,MAAA;MAChBgD,eAAezB,GAAI,CAAAtB;IAAA,CACrB;EACF;EAEA,SAASkC,MAASA,CAAA,EAAA;IACZ,IAAAT,OAAA,IAAWC,UAAUC,QAAU,EAAA;MACjC;IACF;IAEI,IAAAL,GAAA,CAAIvB,WAAW,CAAG,EAAA;MACZ6B,OAAA,CAAA,IAAInE,KAAM,CAAA,mBAAmB,CAAC,CAAA;MACtC;IACF;IAGWuE,UAAA,EAAA;IACFN,MAAA,GAAA,IAAA;IACAX,QAAA,CAAA,IAAA,EAAM4B,gBAAgB,CAAA;EACjC;AACF,CAAA;ACxMa,MAAAK,KAAA,GAAQ,SAAAA,CAAA;EAAA,IACnBjH,cAA8B,GAAArB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAuI,SAAA,GAAAvI,SAAA,MAAA;MAC9BsB,WAA2B,GAAAtB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAuI,SAAA,GAAAvI,SAAA,MAAAoG,aAAA;EAAA,OACbhF,eAAgB,CAAAC,cAAA,EAAgBC,WAAW,CAAA;AAAA;AAGpD,MAAMkH,WAAyB,GAAA,SAAA;;;"}